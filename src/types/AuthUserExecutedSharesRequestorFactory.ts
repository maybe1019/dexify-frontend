/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common';

export interface AuthUserExecutedSharesRequestorFactoryInterface
  extends utils.Interface {
  functions: {
    'deploySharesRequestorProxy(address)': FunctionFragment;
    'getAuthUserExecutedSharesRequestorLib()': FunctionFragment;
    'getDispatcher()': FunctionFragment;
    'getSharesRequestorProxyForComptrollerProxy(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'deploySharesRequestorProxy'
      | 'getAuthUserExecutedSharesRequestorLib'
      | 'getDispatcher'
      | 'getSharesRequestorProxyForComptrollerProxy',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'deploySharesRequestorProxy',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getAuthUserExecutedSharesRequestorLib',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getDispatcher',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getSharesRequestorProxyForComptrollerProxy',
    values: [PromiseOrValue<string>],
  ): string;

  decodeFunctionResult(
    functionFragment: 'deploySharesRequestorProxy',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getAuthUserExecutedSharesRequestorLib',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getDispatcher',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getSharesRequestorProxyForComptrollerProxy',
    data: BytesLike,
  ): Result;

  events: {
    'SharesRequestorProxyDeployed(address,address)': EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: 'SharesRequestorProxyDeployed',
  ): EventFragment;
}

export interface SharesRequestorProxyDeployedEventObject {
  comptrollerProxy: string;
  sharesRequestorProxy: string;
}
export type SharesRequestorProxyDeployedEvent = TypedEvent<
  [string, string],
  SharesRequestorProxyDeployedEventObject
>;

export type SharesRequestorProxyDeployedEventFilter =
  TypedEventFilter<SharesRequestorProxyDeployedEvent>;

export interface AuthUserExecutedSharesRequestorFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AuthUserExecutedSharesRequestorFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Deploys a shares requestor proxy instance for a given ComptrollerProxy instance
     * @param _comptrollerProxy The ComptrollerProxy for which to deploy the shares requestor proxy
     */
    deploySharesRequestorProxy(
      _comptrollerProxy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Gets the value of the `AUTH_USER_EXECUTED_SHARES_REQUESTOR_LIB` variable
     */
    getAuthUserExecutedSharesRequestorLib(
      overrides?: CallOverrides,
    ): Promise<[string] & { authUserExecutedSharesRequestorLib_: string }>;

    /**
     * Gets the value of the `DISPATCHER` variable
     */
    getDispatcher(
      overrides?: CallOverrides,
    ): Promise<[string] & { dispatcher_: string }>;

    /**
     * Gets the AuthUserExecutedSharesRequestorProxy associated with the given ComptrollerProxy
     * @param _comptrollerProxy The ComptrollerProxy for which to get the associated AuthUserExecutedSharesRequestorProxy
     */
    getSharesRequestorProxyForComptrollerProxy(
      _comptrollerProxy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[string] & { sharesRequestorProxy_: string }>;
  };

  /**
   * Deploys a shares requestor proxy instance for a given ComptrollerProxy instance
   * @param _comptrollerProxy The ComptrollerProxy for which to deploy the shares requestor proxy
   */
  deploySharesRequestorProxy(
    _comptrollerProxy: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Gets the value of the `AUTH_USER_EXECUTED_SHARES_REQUESTOR_LIB` variable
   */
  getAuthUserExecutedSharesRequestorLib(
    overrides?: CallOverrides,
  ): Promise<string>;

  /**
   * Gets the value of the `DISPATCHER` variable
   */
  getDispatcher(overrides?: CallOverrides): Promise<string>;

  /**
   * Gets the AuthUserExecutedSharesRequestorProxy associated with the given ComptrollerProxy
   * @param _comptrollerProxy The ComptrollerProxy for which to get the associated AuthUserExecutedSharesRequestorProxy
   */
  getSharesRequestorProxyForComptrollerProxy(
    _comptrollerProxy: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<string>;

  callStatic: {
    /**
     * Deploys a shares requestor proxy instance for a given ComptrollerProxy instance
     * @param _comptrollerProxy The ComptrollerProxy for which to deploy the shares requestor proxy
     */
    deploySharesRequestorProxy(
      _comptrollerProxy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<string>;

    /**
     * Gets the value of the `AUTH_USER_EXECUTED_SHARES_REQUESTOR_LIB` variable
     */
    getAuthUserExecutedSharesRequestorLib(
      overrides?: CallOverrides,
    ): Promise<string>;

    /**
     * Gets the value of the `DISPATCHER` variable
     */
    getDispatcher(overrides?: CallOverrides): Promise<string>;

    /**
     * Gets the AuthUserExecutedSharesRequestorProxy associated with the given ComptrollerProxy
     * @param _comptrollerProxy The ComptrollerProxy for which to get the associated AuthUserExecutedSharesRequestorProxy
     */
    getSharesRequestorProxyForComptrollerProxy(
      _comptrollerProxy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<string>;
  };

  filters: {
    'SharesRequestorProxyDeployed(address,address)'(
      comptrollerProxy?: PromiseOrValue<string> | null,
      sharesRequestorProxy?: null,
    ): SharesRequestorProxyDeployedEventFilter;
    SharesRequestorProxyDeployed(
      comptrollerProxy?: PromiseOrValue<string> | null,
      sharesRequestorProxy?: null,
    ): SharesRequestorProxyDeployedEventFilter;
  };

  estimateGas: {
    /**
     * Deploys a shares requestor proxy instance for a given ComptrollerProxy instance
     * @param _comptrollerProxy The ComptrollerProxy for which to deploy the shares requestor proxy
     */
    deploySharesRequestorProxy(
      _comptrollerProxy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Gets the value of the `AUTH_USER_EXECUTED_SHARES_REQUESTOR_LIB` variable
     */
    getAuthUserExecutedSharesRequestorLib(
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    /**
     * Gets the value of the `DISPATCHER` variable
     */
    getDispatcher(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the AuthUserExecutedSharesRequestorProxy associated with the given ComptrollerProxy
     * @param _comptrollerProxy The ComptrollerProxy for which to get the associated AuthUserExecutedSharesRequestorProxy
     */
    getSharesRequestorProxyForComptrollerProxy(
      _comptrollerProxy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Deploys a shares requestor proxy instance for a given ComptrollerProxy instance
     * @param _comptrollerProxy The ComptrollerProxy for which to deploy the shares requestor proxy
     */
    deploySharesRequestorProxy(
      _comptrollerProxy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the value of the `AUTH_USER_EXECUTED_SHARES_REQUESTOR_LIB` variable
     */
    getAuthUserExecutedSharesRequestorLib(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the value of the `DISPATCHER` variable
     */
    getDispatcher(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Gets the AuthUserExecutedSharesRequestorProxy associated with the given ComptrollerProxy
     * @param _comptrollerProxy The ComptrollerProxy for which to get the associated AuthUserExecutedSharesRequestorProxy
     */
    getSharesRequestorProxyForComptrollerProxy(
      _comptrollerProxy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;
  };
}
