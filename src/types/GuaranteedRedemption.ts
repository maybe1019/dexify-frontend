/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common';

export declare namespace GuaranteedRedemption {
  export type RedemptionWindowStruct = {
    startTimestamp: PromiseOrValue<BigNumberish>;
    duration: PromiseOrValue<BigNumberish>;
  };

  export type RedemptionWindowStructOutput = [BigNumber, BigNumber] & {
    startTimestamp: BigNumber;
    duration: BigNumber;
  };
}

export interface GuaranteedRedemptionInterface extends utils.Interface {
  functions: {
    'activateForFund(address,address)': FunctionFragment;
    'adapterCanBlockRedemption(address)': FunctionFragment;
    'addFundSettings(address,bytes)': FunctionFragment;
    'addRedemptionBlockingAdapters(address[])': FunctionFragment;
    'calcLatestRedemptionWindowStart(uint256)': FunctionFragment;
    'getFundDeployer()': FunctionFragment;
    'getOwner()': FunctionFragment;
    'getPolicyManager()': FunctionFragment;
    'getRedemptionWindowBuffer()': FunctionFragment;
    'getRedemptionWindowForFund(address)': FunctionFragment;
    'identifier()': FunctionFragment;
    'implementedHooks()': FunctionFragment;
    'passesRule(address,address)': FunctionFragment;
    'removeRedemptionBlockingAdapters(address[])': FunctionFragment;
    'setRedemptionWindowBuffer(uint256)': FunctionFragment;
    'updateFundSettings(address,address,bytes)': FunctionFragment;
    'validateRule(address,address,uint8,bytes)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'activateForFund'
      | 'adapterCanBlockRedemption'
      | 'addFundSettings'
      | 'addRedemptionBlockingAdapters'
      | 'calcLatestRedemptionWindowStart'
      | 'getFundDeployer'
      | 'getOwner'
      | 'getPolicyManager'
      | 'getRedemptionWindowBuffer'
      | 'getRedemptionWindowForFund'
      | 'identifier'
      | 'implementedHooks'
      | 'passesRule'
      | 'removeRedemptionBlockingAdapters'
      | 'setRedemptionWindowBuffer'
      | 'updateFundSettings'
      | 'validateRule',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'activateForFund',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'adapterCanBlockRedemption',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'addFundSettings',
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(
    functionFragment: 'addRedemptionBlockingAdapters',
    values: [PromiseOrValue<string>[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'calcLatestRedemptionWindowStart',
    values: [PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getFundDeployer',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'getOwner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getPolicyManager',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getRedemptionWindowBuffer',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getRedemptionWindowForFund',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'identifier',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'implementedHooks',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'passesRule',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'removeRedemptionBlockingAdapters',
    values: [PromiseOrValue<string>[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'setRedemptionWindowBuffer',
    values: [PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'updateFundSettings',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'validateRule',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
    ],
  ): string;

  decodeFunctionResult(
    functionFragment: 'activateForFund',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'adapterCanBlockRedemption',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'addFundSettings',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'addRedemptionBlockingAdapters',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'calcLatestRedemptionWindowStart',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getFundDeployer',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'getOwner', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getPolicyManager',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getRedemptionWindowBuffer',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getRedemptionWindowForFund',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'identifier', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'implementedHooks',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'passesRule', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'removeRedemptionBlockingAdapters',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setRedemptionWindowBuffer',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateFundSettings',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'validateRule',
    data: BytesLike,
  ): Result;

  events: {
    'AdapterAdded(address)': EventFragment;
    'AdapterRemoved(address)': EventFragment;
    'FundSettingsSet(address,uint256,uint256)': EventFragment;
    'RedemptionWindowBufferSet(uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AdapterAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AdapterRemoved'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FundSettingsSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RedemptionWindowBufferSet'): EventFragment;
}

export interface AdapterAddedEventObject {
  adapter: string;
}
export type AdapterAddedEvent = TypedEvent<[string], AdapterAddedEventObject>;

export type AdapterAddedEventFilter = TypedEventFilter<AdapterAddedEvent>;

export interface AdapterRemovedEventObject {
  adapter: string;
}
export type AdapterRemovedEvent = TypedEvent<
  [string],
  AdapterRemovedEventObject
>;

export type AdapterRemovedEventFilter = TypedEventFilter<AdapterRemovedEvent>;

export interface FundSettingsSetEventObject {
  comptrollerProxy: string;
  startTimestamp: BigNumber;
  duration: BigNumber;
}
export type FundSettingsSetEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  FundSettingsSetEventObject
>;

export type FundSettingsSetEventFilter = TypedEventFilter<FundSettingsSetEvent>;

export interface RedemptionWindowBufferSetEventObject {
  prevBuffer: BigNumber;
  nextBuffer: BigNumber;
}
export type RedemptionWindowBufferSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  RedemptionWindowBufferSetEventObject
>;

export type RedemptionWindowBufferSetEventFilter =
  TypedEventFilter<RedemptionWindowBufferSetEvent>;

export interface GuaranteedRedemption extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GuaranteedRedemptionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Unimplemented by default, can be overridden by the policy
     * Validates and initializes a policy as necessary prior to fund activation
     */
    activateForFund(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Checks whether an adapter can block shares redemption
     * @param _adapter The address of the adapter to check
     */
    adapterCanBlockRedemption(
      _adapter: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean] & { canBlockRedemption_: boolean }>;

    /**
     * Add the initial policy settings for a fund
     * @param _comptrollerProxy The fund's ComptrollerProxy address
     * @param _encodedSettings Encoded settings to apply to a fund
     */
    addFundSettings(
      _comptrollerProxy: PromiseOrValue<string>,
      _encodedSettings: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Add adapters which can block shares redemption
     * @param _adapters The addresses of adapters to be added
     */
    addRedemptionBlockingAdapters(
      _adapters: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Calculates the start of the most recent redemption window
     * @param _startTimestamp The initial startTimestamp for the redemption window
     */
    calcLatestRedemptionWindowStart(
      _startTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { latestRedemptionWindowStart_: BigNumber }>;

    /**
     * Gets the `FUND_DEPLOYER` variable
     */
    getFundDeployer(
      overrides?: CallOverrides,
    ): Promise<[string] & { fundDeployer_: string }>;

    /**
     * Ownership is deferred to the owner of the FundDeployer contract
     * Gets the owner of this contract
     */
    getOwner(overrides?: CallOverrides): Promise<[string] & { owner_: string }>;

    /**
     * Gets the `POLICY_MANAGER` variable value
     */
    getPolicyManager(
      overrides?: CallOverrides,
    ): Promise<[string] & { policyManager_: string }>;

    /**
     * Gets the `redemptionWindowBuffer` variable
     */
    getRedemptionWindowBuffer(
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { redemptionWindowBuffer_: BigNumber }>;

    /**
     * Gets the RedemptionWindow settings for a given fund
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     */
    getRedemptionWindowForFund(
      _comptrollerProxy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [GuaranteedRedemption.RedemptionWindowStructOutput] & {
        redemptionWindow_: GuaranteedRedemption.RedemptionWindowStructOutput;
      }
    >;

    /**
     * Provides a constant string identifier for a policy
     */
    identifier(
      overrides?: CallOverrides,
    ): Promise<[string] & { identifier_: string }>;

    /**
     * Gets the implemented PolicyHooks for a policy
     */
    implementedHooks(
      overrides?: CallOverrides,
    ): Promise<[number[]] & { implementedHooks_: number[] }>;

    /**
     * Checks whether a particular condition passes the rule for a particular fund
     * @param _adapter The adapter for which to check the rule
     * @param _comptrollerProxy The fund's ComptrollerProxy address
     */
    passesRule(
      _comptrollerProxy: PromiseOrValue<string>,
      _adapter: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean] & { isValid_: boolean }>;

    /**
     * Remove adapters which can block shares redemption
     * @param _adapters The addresses of adapters to be removed
     */
    removeRedemptionBlockingAdapters(
      _adapters: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * The redemptionWindowBuffer is added to the beginning of the redemption window, and should always be >= the longest potential block on redemption amongst all adapters. (e.g., Synthetix blocks token transfers during a timelock after trading synths)
     * Sets a new value for the redemptionWindowBuffer variable
     * @param _nextRedemptionWindowBuffer The number of seconds for the redemptionWindowBuffer
     */
    setRedemptionWindowBuffer(
      _nextRedemptionWindowBuffer: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Disallowed by default, can be overridden by the policy
     * Updates the policy settings for a fund
     */
    updateFundSettings(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Apply the rule with the specified parameters of a PolicyHook
     * @param _comptrollerProxy The fund's ComptrollerProxy address
     * @param _encodedArgs Encoded args with which to validate the rule
     */
    validateRule(
      _comptrollerProxy: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      _encodedArgs: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  /**
   * Unimplemented by default, can be overridden by the policy
   * Validates and initializes a policy as necessary prior to fund activation
   */
  activateForFund(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Checks whether an adapter can block shares redemption
   * @param _adapter The address of the adapter to check
   */
  adapterCanBlockRedemption(
    _adapter: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  /**
   * Add the initial policy settings for a fund
   * @param _comptrollerProxy The fund's ComptrollerProxy address
   * @param _encodedSettings Encoded settings to apply to a fund
   */
  addFundSettings(
    _comptrollerProxy: PromiseOrValue<string>,
    _encodedSettings: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Add adapters which can block shares redemption
   * @param _adapters The addresses of adapters to be added
   */
  addRedemptionBlockingAdapters(
    _adapters: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Calculates the start of the most recent redemption window
   * @param _startTimestamp The initial startTimestamp for the redemption window
   */
  calcLatestRedemptionWindowStart(
    _startTimestamp: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  /**
   * Gets the `FUND_DEPLOYER` variable
   */
  getFundDeployer(overrides?: CallOverrides): Promise<string>;

  /**
   * Ownership is deferred to the owner of the FundDeployer contract
   * Gets the owner of this contract
   */
  getOwner(overrides?: CallOverrides): Promise<string>;

  /**
   * Gets the `POLICY_MANAGER` variable value
   */
  getPolicyManager(overrides?: CallOverrides): Promise<string>;

  /**
   * Gets the `redemptionWindowBuffer` variable
   */
  getRedemptionWindowBuffer(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Gets the RedemptionWindow settings for a given fund
   * @param _comptrollerProxy The ComptrollerProxy of the fund
   */
  getRedemptionWindowForFund(
    _comptrollerProxy: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<GuaranteedRedemption.RedemptionWindowStructOutput>;

  /**
   * Provides a constant string identifier for a policy
   */
  identifier(overrides?: CallOverrides): Promise<string>;

  /**
   * Gets the implemented PolicyHooks for a policy
   */
  implementedHooks(overrides?: CallOverrides): Promise<number[]>;

  /**
   * Checks whether a particular condition passes the rule for a particular fund
   * @param _adapter The adapter for which to check the rule
   * @param _comptrollerProxy The fund's ComptrollerProxy address
   */
  passesRule(
    _comptrollerProxy: PromiseOrValue<string>,
    _adapter: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  /**
   * Remove adapters which can block shares redemption
   * @param _adapters The addresses of adapters to be removed
   */
  removeRedemptionBlockingAdapters(
    _adapters: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * The redemptionWindowBuffer is added to the beginning of the redemption window, and should always be >= the longest potential block on redemption amongst all adapters. (e.g., Synthetix blocks token transfers during a timelock after trading synths)
   * Sets a new value for the redemptionWindowBuffer variable
   * @param _nextRedemptionWindowBuffer The number of seconds for the redemptionWindowBuffer
   */
  setRedemptionWindowBuffer(
    _nextRedemptionWindowBuffer: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Disallowed by default, can be overridden by the policy
   * Updates the policy settings for a fund
   */
  updateFundSettings(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Apply the rule with the specified parameters of a PolicyHook
   * @param _comptrollerProxy The fund's ComptrollerProxy address
   * @param _encodedArgs Encoded args with which to validate the rule
   */
  validateRule(
    _comptrollerProxy: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    _encodedArgs: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * Unimplemented by default, can be overridden by the policy
     * Validates and initializes a policy as necessary prior to fund activation
     */
    activateForFund(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    /**
     * Checks whether an adapter can block shares redemption
     * @param _adapter The address of the adapter to check
     */
    adapterCanBlockRedemption(
      _adapter: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    /**
     * Add the initial policy settings for a fund
     * @param _comptrollerProxy The fund's ComptrollerProxy address
     * @param _encodedSettings Encoded settings to apply to a fund
     */
    addFundSettings(
      _comptrollerProxy: PromiseOrValue<string>,
      _encodedSettings: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    /**
     * Add adapters which can block shares redemption
     * @param _adapters The addresses of adapters to be added
     */
    addRedemptionBlockingAdapters(
      _adapters: PromiseOrValue<string>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    /**
     * Calculates the start of the most recent redemption window
     * @param _startTimestamp The initial startTimestamp for the redemption window
     */
    calcLatestRedemptionWindowStart(
      _startTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    /**
     * Gets the `FUND_DEPLOYER` variable
     */
    getFundDeployer(overrides?: CallOverrides): Promise<string>;

    /**
     * Ownership is deferred to the owner of the FundDeployer contract
     * Gets the owner of this contract
     */
    getOwner(overrides?: CallOverrides): Promise<string>;

    /**
     * Gets the `POLICY_MANAGER` variable value
     */
    getPolicyManager(overrides?: CallOverrides): Promise<string>;

    /**
     * Gets the `redemptionWindowBuffer` variable
     */
    getRedemptionWindowBuffer(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the RedemptionWindow settings for a given fund
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     */
    getRedemptionWindowForFund(
      _comptrollerProxy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<GuaranteedRedemption.RedemptionWindowStructOutput>;

    /**
     * Provides a constant string identifier for a policy
     */
    identifier(overrides?: CallOverrides): Promise<string>;

    /**
     * Gets the implemented PolicyHooks for a policy
     */
    implementedHooks(overrides?: CallOverrides): Promise<number[]>;

    /**
     * Checks whether a particular condition passes the rule for a particular fund
     * @param _adapter The adapter for which to check the rule
     * @param _comptrollerProxy The fund's ComptrollerProxy address
     */
    passesRule(
      _comptrollerProxy: PromiseOrValue<string>,
      _adapter: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    /**
     * Remove adapters which can block shares redemption
     * @param _adapters The addresses of adapters to be removed
     */
    removeRedemptionBlockingAdapters(
      _adapters: PromiseOrValue<string>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    /**
     * The redemptionWindowBuffer is added to the beginning of the redemption window, and should always be >= the longest potential block on redemption amongst all adapters. (e.g., Synthetix blocks token transfers during a timelock after trading synths)
     * Sets a new value for the redemptionWindowBuffer variable
     * @param _nextRedemptionWindowBuffer The number of seconds for the redemptionWindowBuffer
     */
    setRedemptionWindowBuffer(
      _nextRedemptionWindowBuffer: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    /**
     * Disallowed by default, can be overridden by the policy
     * Updates the policy settings for a fund
     */
    updateFundSettings(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    /**
     * Apply the rule with the specified parameters of a PolicyHook
     * @param _comptrollerProxy The fund's ComptrollerProxy address
     * @param _encodedArgs Encoded args with which to validate the rule
     */
    validateRule(
      _comptrollerProxy: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      _encodedArgs: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<boolean>;
  };

  filters: {
    'AdapterAdded(address)'(adapter?: null): AdapterAddedEventFilter;
    AdapterAdded(adapter?: null): AdapterAddedEventFilter;

    'AdapterRemoved(address)'(adapter?: null): AdapterRemovedEventFilter;
    AdapterRemoved(adapter?: null): AdapterRemovedEventFilter;

    'FundSettingsSet(address,uint256,uint256)'(
      comptrollerProxy?: PromiseOrValue<string> | null,
      startTimestamp?: null,
      duration?: null,
    ): FundSettingsSetEventFilter;
    FundSettingsSet(
      comptrollerProxy?: PromiseOrValue<string> | null,
      startTimestamp?: null,
      duration?: null,
    ): FundSettingsSetEventFilter;

    'RedemptionWindowBufferSet(uint256,uint256)'(
      prevBuffer?: null,
      nextBuffer?: null,
    ): RedemptionWindowBufferSetEventFilter;
    RedemptionWindowBufferSet(
      prevBuffer?: null,
      nextBuffer?: null,
    ): RedemptionWindowBufferSetEventFilter;
  };

  estimateGas: {
    /**
     * Unimplemented by default, can be overridden by the policy
     * Validates and initializes a policy as necessary prior to fund activation
     */
    activateForFund(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Checks whether an adapter can block shares redemption
     * @param _adapter The address of the adapter to check
     */
    adapterCanBlockRedemption(
      _adapter: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    /**
     * Add the initial policy settings for a fund
     * @param _comptrollerProxy The fund's ComptrollerProxy address
     * @param _encodedSettings Encoded settings to apply to a fund
     */
    addFundSettings(
      _comptrollerProxy: PromiseOrValue<string>,
      _encodedSettings: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Add adapters which can block shares redemption
     * @param _adapters The addresses of adapters to be added
     */
    addRedemptionBlockingAdapters(
      _adapters: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Calculates the start of the most recent redemption window
     * @param _startTimestamp The initial startTimestamp for the redemption window
     */
    calcLatestRedemptionWindowStart(
      _startTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    /**
     * Gets the `FUND_DEPLOYER` variable
     */
    getFundDeployer(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Ownership is deferred to the owner of the FundDeployer contract
     * Gets the owner of this contract
     */
    getOwner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the `POLICY_MANAGER` variable value
     */
    getPolicyManager(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the `redemptionWindowBuffer` variable
     */
    getRedemptionWindowBuffer(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the RedemptionWindow settings for a given fund
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     */
    getRedemptionWindowForFund(
      _comptrollerProxy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    /**
     * Provides a constant string identifier for a policy
     */
    identifier(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the implemented PolicyHooks for a policy
     */
    implementedHooks(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Checks whether a particular condition passes the rule for a particular fund
     * @param _adapter The adapter for which to check the rule
     * @param _comptrollerProxy The fund's ComptrollerProxy address
     */
    passesRule(
      _comptrollerProxy: PromiseOrValue<string>,
      _adapter: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    /**
     * Remove adapters which can block shares redemption
     * @param _adapters The addresses of adapters to be removed
     */
    removeRedemptionBlockingAdapters(
      _adapters: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * The redemptionWindowBuffer is added to the beginning of the redemption window, and should always be >= the longest potential block on redemption amongst all adapters. (e.g., Synthetix blocks token transfers during a timelock after trading synths)
     * Sets a new value for the redemptionWindowBuffer variable
     * @param _nextRedemptionWindowBuffer The number of seconds for the redemptionWindowBuffer
     */
    setRedemptionWindowBuffer(
      _nextRedemptionWindowBuffer: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Disallowed by default, can be overridden by the policy
     * Updates the policy settings for a fund
     */
    updateFundSettings(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Apply the rule with the specified parameters of a PolicyHook
     * @param _comptrollerProxy The fund's ComptrollerProxy address
     * @param _encodedArgs Encoded args with which to validate the rule
     */
    validateRule(
      _comptrollerProxy: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      _encodedArgs: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Unimplemented by default, can be overridden by the policy
     * Validates and initializes a policy as necessary prior to fund activation
     */
    activateForFund(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Checks whether an adapter can block shares redemption
     * @param _adapter The address of the adapter to check
     */
    adapterCanBlockRedemption(
      _adapter: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    /**
     * Add the initial policy settings for a fund
     * @param _comptrollerProxy The fund's ComptrollerProxy address
     * @param _encodedSettings Encoded settings to apply to a fund
     */
    addFundSettings(
      _comptrollerProxy: PromiseOrValue<string>,
      _encodedSettings: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Add adapters which can block shares redemption
     * @param _adapters The addresses of adapters to be added
     */
    addRedemptionBlockingAdapters(
      _adapters: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Calculates the start of the most recent redemption window
     * @param _startTimestamp The initial startTimestamp for the redemption window
     */
    calcLatestRedemptionWindowStart(
      _startTimestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the `FUND_DEPLOYER` variable
     */
    getFundDeployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Ownership is deferred to the owner of the FundDeployer contract
     * Gets the owner of this contract
     */
    getOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Gets the `POLICY_MANAGER` variable value
     */
    getPolicyManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Gets the `redemptionWindowBuffer` variable
     */
    getRedemptionWindowBuffer(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the RedemptionWindow settings for a given fund
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     */
    getRedemptionWindowForFund(
      _comptrollerProxy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    /**
     * Provides a constant string identifier for a policy
     */
    identifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Gets the implemented PolicyHooks for a policy
     */
    implementedHooks(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Checks whether a particular condition passes the rule for a particular fund
     * @param _adapter The adapter for which to check the rule
     * @param _comptrollerProxy The fund's ComptrollerProxy address
     */
    passesRule(
      _comptrollerProxy: PromiseOrValue<string>,
      _adapter: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    /**
     * Remove adapters which can block shares redemption
     * @param _adapters The addresses of adapters to be removed
     */
    removeRedemptionBlockingAdapters(
      _adapters: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * The redemptionWindowBuffer is added to the beginning of the redemption window, and should always be >= the longest potential block on redemption amongst all adapters. (e.g., Synthetix blocks token transfers during a timelock after trading synths)
     * Sets a new value for the redemptionWindowBuffer variable
     * @param _nextRedemptionWindowBuffer The number of seconds for the redemptionWindowBuffer
     */
    setRedemptionWindowBuffer(
      _nextRedemptionWindowBuffer: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Disallowed by default, can be overridden by the policy
     * Updates the policy settings for a fund
     */
    updateFundSettings(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Apply the rule with the specified parameters of a PolicyHook
     * @param _comptrollerProxy The fund's ComptrollerProxy address
     * @param _encodedArgs Encoded args with which to validate the rule
     */
    validateRule(
      _comptrollerProxy: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      _encodedArgs: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
