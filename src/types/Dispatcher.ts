/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common';

export interface DispatcherInterface extends utils.Interface {
  functions: {
    'cancelMigration(address,bool)': FunctionFragment;
    'claimOwnership()': FunctionFragment;
    'deployVaultProxy(address,address,address,string)': FunctionFragment;
    'executeMigration(address,bool)': FunctionFragment;
    'getCurrentFundDeployer()': FunctionFragment;
    'getFundDeployerForVaultProxy(address)': FunctionFragment;
    'getMigrationRequestDetailsForVaultProxy(address)': FunctionFragment;
    'getMigrationTimelock()': FunctionFragment;
    'getNominatedOwner()': FunctionFragment;
    'getOwner()': FunctionFragment;
    'getSharesTokenSymbol()': FunctionFragment;
    'getTimelockRemainingForMigrationRequest(address)': FunctionFragment;
    'hasExecutableMigrationRequest(address)': FunctionFragment;
    'hasMigrationRequest(address)': FunctionFragment;
    'removeNominatedOwner()': FunctionFragment;
    'setCurrentFundDeployer(address)': FunctionFragment;
    'setMigrationTimelock(uint256)': FunctionFragment;
    'setNominatedOwner(address)': FunctionFragment;
    'setSharesTokenSymbol(string)': FunctionFragment;
    'signalMigration(address,address,address,bool)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'cancelMigration'
      | 'claimOwnership'
      | 'deployVaultProxy'
      | 'executeMigration'
      | 'getCurrentFundDeployer'
      | 'getFundDeployerForVaultProxy'
      | 'getMigrationRequestDetailsForVaultProxy'
      | 'getMigrationTimelock'
      | 'getNominatedOwner'
      | 'getOwner'
      | 'getSharesTokenSymbol'
      | 'getTimelockRemainingForMigrationRequest'
      | 'hasExecutableMigrationRequest'
      | 'hasMigrationRequest'
      | 'removeNominatedOwner'
      | 'setCurrentFundDeployer'
      | 'setMigrationTimelock'
      | 'setNominatedOwner'
      | 'setSharesTokenSymbol'
      | 'signalMigration',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'cancelMigration',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(
    functionFragment: 'claimOwnership',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'deployVaultProxy',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'executeMigration',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getCurrentFundDeployer',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getFundDeployerForVaultProxy',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getMigrationRequestDetailsForVaultProxy',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getMigrationTimelock',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getNominatedOwner',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'getOwner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getSharesTokenSymbol',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getTimelockRemainingForMigrationRequest',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'hasExecutableMigrationRequest',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'hasMigrationRequest',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'removeNominatedOwner',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'setCurrentFundDeployer',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setMigrationTimelock',
    values: [PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setNominatedOwner',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setSharesTokenSymbol',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'signalMigration',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
    ],
  ): string;

  decodeFunctionResult(
    functionFragment: 'cancelMigration',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'claimOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'deployVaultProxy',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'executeMigration',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getCurrentFundDeployer',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getFundDeployerForVaultProxy',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getMigrationRequestDetailsForVaultProxy',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getMigrationTimelock',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getNominatedOwner',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'getOwner', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getSharesTokenSymbol',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getTimelockRemainingForMigrationRequest',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'hasExecutableMigrationRequest',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'hasMigrationRequest',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'removeNominatedOwner',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setCurrentFundDeployer',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setMigrationTimelock',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setNominatedOwner',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setSharesTokenSymbol',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'signalMigration',
    data: BytesLike,
  ): Result;

  events: {
    'CurrentFundDeployerSet(address,address)': EventFragment;
    'MigrationCancelled(address,address,address,address,address,uint256)': EventFragment;
    'MigrationExecuted(address,address,address,address,address,uint256)': EventFragment;
    'MigrationInCancelHookFailed(bytes,address,address,address,address,address)': EventFragment;
    'MigrationOutHookFailed(bytes,uint8,address,address,address,address,address)': EventFragment;
    'MigrationSignaled(address,address,address,address,address,uint256)': EventFragment;
    'MigrationTimelockSet(uint256,uint256)': EventFragment;
    'NominatedOwnerRemoved(address)': EventFragment;
    'NominatedOwnerSet(address)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'SharesTokenSymbolSet(string)': EventFragment;
    'VaultProxyDeployed(address,address,address,address,address,string)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'CurrentFundDeployerSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MigrationCancelled'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MigrationExecuted'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'MigrationInCancelHookFailed',
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MigrationOutHookFailed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MigrationSignaled'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MigrationTimelockSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NominatedOwnerRemoved'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NominatedOwnerSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SharesTokenSymbolSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'VaultProxyDeployed'): EventFragment;
}

export interface CurrentFundDeployerSetEventObject {
  prevFundDeployer: string;
  nextFundDeployer: string;
}
export type CurrentFundDeployerSetEvent = TypedEvent<
  [string, string],
  CurrentFundDeployerSetEventObject
>;

export type CurrentFundDeployerSetEventFilter =
  TypedEventFilter<CurrentFundDeployerSetEvent>;

export interface MigrationCancelledEventObject {
  vaultProxy: string;
  prevFundDeployer: string;
  nextFundDeployer: string;
  nextVaultAccessor: string;
  nextVaultLib: string;
  executableTimestamp: BigNumber;
}
export type MigrationCancelledEvent = TypedEvent<
  [string, string, string, string, string, BigNumber],
  MigrationCancelledEventObject
>;

export type MigrationCancelledEventFilter =
  TypedEventFilter<MigrationCancelledEvent>;

export interface MigrationExecutedEventObject {
  vaultProxy: string;
  prevFundDeployer: string;
  nextFundDeployer: string;
  nextVaultAccessor: string;
  nextVaultLib: string;
  executableTimestamp: BigNumber;
}
export type MigrationExecutedEvent = TypedEvent<
  [string, string, string, string, string, BigNumber],
  MigrationExecutedEventObject
>;

export type MigrationExecutedEventFilter =
  TypedEventFilter<MigrationExecutedEvent>;

export interface MigrationInCancelHookFailedEventObject {
  failureReturnData: string;
  vaultProxy: string;
  prevFundDeployer: string;
  nextFundDeployer: string;
  nextVaultAccessor: string;
  nextVaultLib: string;
}
export type MigrationInCancelHookFailedEvent = TypedEvent<
  [string, string, string, string, string, string],
  MigrationInCancelHookFailedEventObject
>;

export type MigrationInCancelHookFailedEventFilter =
  TypedEventFilter<MigrationInCancelHookFailedEvent>;

export interface MigrationOutHookFailedEventObject {
  failureReturnData: string;
  hook: number;
  vaultProxy: string;
  prevFundDeployer: string;
  nextFundDeployer: string;
  nextVaultAccessor: string;
  nextVaultLib: string;
}
export type MigrationOutHookFailedEvent = TypedEvent<
  [string, number, string, string, string, string, string],
  MigrationOutHookFailedEventObject
>;

export type MigrationOutHookFailedEventFilter =
  TypedEventFilter<MigrationOutHookFailedEvent>;

export interface MigrationSignaledEventObject {
  vaultProxy: string;
  prevFundDeployer: string;
  nextFundDeployer: string;
  nextVaultAccessor: string;
  nextVaultLib: string;
  executableTimestamp: BigNumber;
}
export type MigrationSignaledEvent = TypedEvent<
  [string, string, string, string, string, BigNumber],
  MigrationSignaledEventObject
>;

export type MigrationSignaledEventFilter =
  TypedEventFilter<MigrationSignaledEvent>;

export interface MigrationTimelockSetEventObject {
  prevTimelock: BigNumber;
  nextTimelock: BigNumber;
}
export type MigrationTimelockSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  MigrationTimelockSetEventObject
>;

export type MigrationTimelockSetEventFilter =
  TypedEventFilter<MigrationTimelockSetEvent>;

export interface NominatedOwnerRemovedEventObject {
  nominatedOwner: string;
}
export type NominatedOwnerRemovedEvent = TypedEvent<
  [string],
  NominatedOwnerRemovedEventObject
>;

export type NominatedOwnerRemovedEventFilter =
  TypedEventFilter<NominatedOwnerRemovedEvent>;

export interface NominatedOwnerSetEventObject {
  nominatedOwner: string;
}
export type NominatedOwnerSetEvent = TypedEvent<
  [string],
  NominatedOwnerSetEventObject
>;

export type NominatedOwnerSetEventFilter =
  TypedEventFilter<NominatedOwnerSetEvent>;

export interface OwnershipTransferredEventObject {
  prevOwner: string;
  nextOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SharesTokenSymbolSetEventObject {
  _nextSymbol: string;
}
export type SharesTokenSymbolSetEvent = TypedEvent<
  [string],
  SharesTokenSymbolSetEventObject
>;

export type SharesTokenSymbolSetEventFilter =
  TypedEventFilter<SharesTokenSymbolSetEvent>;

export interface VaultProxyDeployedEventObject {
  fundDeployer: string;
  owner: string;
  vaultProxy: string;
  vaultLib: string;
  vaultAccessor: string;
  fundName: string;
}
export type VaultProxyDeployedEvent = TypedEvent<
  [string, string, string, string, string, string],
  VaultProxyDeployedEventObject
>;

export type VaultProxyDeployedEventFilter =
  TypedEventFilter<VaultProxyDeployedEvent>;

export interface Dispatcher extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DispatcherInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Because this function must also be callable by a permissioned migrator, it has an extra migration hook to the nextFundDeployer for the case where cancelMigration() is called directly (rather than via the nextFundDeployer).
     * Cancels a pending migration request
     * @param _bypassFailure True if a failure in either migration hook should be ignored
     * @param _vaultProxy The VaultProxy contract for which to cancel the migration request
     */
    cancelMigration(
      _vaultProxy: PromiseOrValue<string>,
      _bypassFailure: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Claim ownership of the contract
     */
    claimOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Input validation should be handled by the VaultProxy during deployment
     * Deploys a VaultProxy
     * @param _fundName The name of the fund
     * @param _owner The account to set as the VaultProxy's owner
     * @param _vaultAccessor The account to set as the VaultProxy's permissioned accessor
     * @param _vaultLib The VaultLib library with which to instantiate the VaultProxy
     */
    deployVaultProxy(
      _vaultLib: PromiseOrValue<string>,
      _owner: PromiseOrValue<string>,
      _vaultAccessor: PromiseOrValue<string>,
      _fundName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Executes a pending migration request
     * @param _bypassFailure True if a failure in either migration hook should be ignored
     * @param _vaultProxy The VaultProxy contract for which to execute the migration request
     */
    executeMigration(
      _vaultProxy: PromiseOrValue<string>,
      _bypassFailure: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Gets the current FundDeployer that is allowed to deploy and migrate funds
     */
    getCurrentFundDeployer(
      overrides?: CallOverrides,
    ): Promise<[string] & { currentFundDeployer_: string }>;

    /**
     * Gets the FundDeployer with which a given VaultProxy is associated
     * @param _vaultProxy The VaultProxy instance
     */
    getFundDeployerForVaultProxy(
      _vaultProxy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[string] & { fundDeployer_: string }>;

    /**
     * Gets the details of a pending migration request for a given VaultProxy
     * @param _vaultProxy The VaultProxy instance
     */
    getMigrationRequestDetailsForVaultProxy(
      _vaultProxy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, string, BigNumber] & {
        nextFundDeployer_: string;
        nextVaultAccessor_: string;
        nextVaultLib_: string;
        executableTimestamp_: BigNumber;
      }
    >;

    /**
     * Gets the amount of time that must pass between signaling and executing a migration
     */
    getMigrationTimelock(
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { migrationTimelock_: BigNumber }>;

    /**
     * Gets the account that is nominated to be the next owner of this contract
     */
    getNominatedOwner(
      overrides?: CallOverrides,
    ): Promise<[string] & { nominatedOwner_: string }>;

    /**
     * Gets the owner of this contract
     */
    getOwner(overrides?: CallOverrides): Promise<[string] & { owner_: string }>;

    /**
     * Gets the shares token `symbol` value for use in VaultProxy instances
     */
    getSharesTokenSymbol(
      overrides?: CallOverrides,
    ): Promise<[string] & { sharesTokenSymbol_: string }>;

    /**
     * Gets the time remaining until the migration request of a given VaultProxy can be executed
     * @param _vaultProxy The VaultProxy instance
     */
    getTimelockRemainingForMigrationRequest(
      _vaultProxy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { secondsRemaining_: BigNumber }>;

    /**
     * Checks whether a migration request that is executable exists for a given VaultProxy
     * @param _vaultProxy The VaultProxy instance
     */
    hasExecutableMigrationRequest(
      _vaultProxy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean] & { hasExecutableRequest_: boolean }>;

    /**
     * Checks whether a migration request exists for a given VaultProxy
     * @param _vaultProxy The VaultProxy instance
     */
    hasMigrationRequest(
      _vaultProxy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean] & { hasMigrationRequest_: boolean }>;

    /**
     * Revoke the nomination of a new contract owner
     */
    removeNominatedOwner(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Set a new FundDeployer for use within the contract
     * @param _nextFundDeployer The address of the FundDeployer contract
     */
    setCurrentFundDeployer(
      _nextFundDeployer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Sets a new migration timelock
     * @param _nextTimelock The number of seconds for the new timelock
     */
    setMigrationTimelock(
      _nextTimelock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Does not prohibit overwriting the current nominatedOwner
     * Nominate a new contract owner
     * @param _nextNominatedOwner The account to nominate
     */
    setNominatedOwner(
      _nextNominatedOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Sets a new `symbol` value for VaultProxy instances
     * @param _nextSymbol The symbol value to set
     */
    setSharesTokenSymbol(
      _nextSymbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Signals a migration by creating a migration request
     * @param _bypassFailure True if a failure in either migration hook should be ignored
     * @param _nextVaultAccessor The account that will be the next `accessor` on the VaultProxy
     * @param _nextVaultLib The next VaultLib library contract address to set on the VaultProxy
     * @param _vaultProxy The VaultProxy contract for which to signal migration
     */
    signalMigration(
      _vaultProxy: PromiseOrValue<string>,
      _nextVaultAccessor: PromiseOrValue<string>,
      _nextVaultLib: PromiseOrValue<string>,
      _bypassFailure: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  /**
   * Because this function must also be callable by a permissioned migrator, it has an extra migration hook to the nextFundDeployer for the case where cancelMigration() is called directly (rather than via the nextFundDeployer).
   * Cancels a pending migration request
   * @param _bypassFailure True if a failure in either migration hook should be ignored
   * @param _vaultProxy The VaultProxy contract for which to cancel the migration request
   */
  cancelMigration(
    _vaultProxy: PromiseOrValue<string>,
    _bypassFailure: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Claim ownership of the contract
   */
  claimOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Input validation should be handled by the VaultProxy during deployment
   * Deploys a VaultProxy
   * @param _fundName The name of the fund
   * @param _owner The account to set as the VaultProxy's owner
   * @param _vaultAccessor The account to set as the VaultProxy's permissioned accessor
   * @param _vaultLib The VaultLib library with which to instantiate the VaultProxy
   */
  deployVaultProxy(
    _vaultLib: PromiseOrValue<string>,
    _owner: PromiseOrValue<string>,
    _vaultAccessor: PromiseOrValue<string>,
    _fundName: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Executes a pending migration request
   * @param _bypassFailure True if a failure in either migration hook should be ignored
   * @param _vaultProxy The VaultProxy contract for which to execute the migration request
   */
  executeMigration(
    _vaultProxy: PromiseOrValue<string>,
    _bypassFailure: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Gets the current FundDeployer that is allowed to deploy and migrate funds
   */
  getCurrentFundDeployer(overrides?: CallOverrides): Promise<string>;

  /**
   * Gets the FundDeployer with which a given VaultProxy is associated
   * @param _vaultProxy The VaultProxy instance
   */
  getFundDeployerForVaultProxy(
    _vaultProxy: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<string>;

  /**
   * Gets the details of a pending migration request for a given VaultProxy
   * @param _vaultProxy The VaultProxy instance
   */
  getMigrationRequestDetailsForVaultProxy(
    _vaultProxy: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<
    [string, string, string, BigNumber] & {
      nextFundDeployer_: string;
      nextVaultAccessor_: string;
      nextVaultLib_: string;
      executableTimestamp_: BigNumber;
    }
  >;

  /**
   * Gets the amount of time that must pass between signaling and executing a migration
   */
  getMigrationTimelock(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Gets the account that is nominated to be the next owner of this contract
   */
  getNominatedOwner(overrides?: CallOverrides): Promise<string>;

  /**
   * Gets the owner of this contract
   */
  getOwner(overrides?: CallOverrides): Promise<string>;

  /**
   * Gets the shares token `symbol` value for use in VaultProxy instances
   */
  getSharesTokenSymbol(overrides?: CallOverrides): Promise<string>;

  /**
   * Gets the time remaining until the migration request of a given VaultProxy can be executed
   * @param _vaultProxy The VaultProxy instance
   */
  getTimelockRemainingForMigrationRequest(
    _vaultProxy: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  /**
   * Checks whether a migration request that is executable exists for a given VaultProxy
   * @param _vaultProxy The VaultProxy instance
   */
  hasExecutableMigrationRequest(
    _vaultProxy: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  /**
   * Checks whether a migration request exists for a given VaultProxy
   * @param _vaultProxy The VaultProxy instance
   */
  hasMigrationRequest(
    _vaultProxy: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  /**
   * Revoke the nomination of a new contract owner
   */
  removeNominatedOwner(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Set a new FundDeployer for use within the contract
   * @param _nextFundDeployer The address of the FundDeployer contract
   */
  setCurrentFundDeployer(
    _nextFundDeployer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Sets a new migration timelock
   * @param _nextTimelock The number of seconds for the new timelock
   */
  setMigrationTimelock(
    _nextTimelock: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Does not prohibit overwriting the current nominatedOwner
   * Nominate a new contract owner
   * @param _nextNominatedOwner The account to nominate
   */
  setNominatedOwner(
    _nextNominatedOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Sets a new `symbol` value for VaultProxy instances
   * @param _nextSymbol The symbol value to set
   */
  setSharesTokenSymbol(
    _nextSymbol: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Signals a migration by creating a migration request
   * @param _bypassFailure True if a failure in either migration hook should be ignored
   * @param _nextVaultAccessor The account that will be the next `accessor` on the VaultProxy
   * @param _nextVaultLib The next VaultLib library contract address to set on the VaultProxy
   * @param _vaultProxy The VaultProxy contract for which to signal migration
   */
  signalMigration(
    _vaultProxy: PromiseOrValue<string>,
    _nextVaultAccessor: PromiseOrValue<string>,
    _nextVaultLib: PromiseOrValue<string>,
    _bypassFailure: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * Because this function must also be callable by a permissioned migrator, it has an extra migration hook to the nextFundDeployer for the case where cancelMigration() is called directly (rather than via the nextFundDeployer).
     * Cancels a pending migration request
     * @param _bypassFailure True if a failure in either migration hook should be ignored
     * @param _vaultProxy The VaultProxy contract for which to cancel the migration request
     */
    cancelMigration(
      _vaultProxy: PromiseOrValue<string>,
      _bypassFailure: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    /**
     * Claim ownership of the contract
     */
    claimOwnership(overrides?: CallOverrides): Promise<void>;

    /**
     * Input validation should be handled by the VaultProxy during deployment
     * Deploys a VaultProxy
     * @param _fundName The name of the fund
     * @param _owner The account to set as the VaultProxy's owner
     * @param _vaultAccessor The account to set as the VaultProxy's permissioned accessor
     * @param _vaultLib The VaultLib library with which to instantiate the VaultProxy
     */
    deployVaultProxy(
      _vaultLib: PromiseOrValue<string>,
      _owner: PromiseOrValue<string>,
      _vaultAccessor: PromiseOrValue<string>,
      _fundName: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<string>;

    /**
     * Executes a pending migration request
     * @param _bypassFailure True if a failure in either migration hook should be ignored
     * @param _vaultProxy The VaultProxy contract for which to execute the migration request
     */
    executeMigration(
      _vaultProxy: PromiseOrValue<string>,
      _bypassFailure: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    /**
     * Gets the current FundDeployer that is allowed to deploy and migrate funds
     */
    getCurrentFundDeployer(overrides?: CallOverrides): Promise<string>;

    /**
     * Gets the FundDeployer with which a given VaultProxy is associated
     * @param _vaultProxy The VaultProxy instance
     */
    getFundDeployerForVaultProxy(
      _vaultProxy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<string>;

    /**
     * Gets the details of a pending migration request for a given VaultProxy
     * @param _vaultProxy The VaultProxy instance
     */
    getMigrationRequestDetailsForVaultProxy(
      _vaultProxy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, string, BigNumber] & {
        nextFundDeployer_: string;
        nextVaultAccessor_: string;
        nextVaultLib_: string;
        executableTimestamp_: BigNumber;
      }
    >;

    /**
     * Gets the amount of time that must pass between signaling and executing a migration
     */
    getMigrationTimelock(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the account that is nominated to be the next owner of this contract
     */
    getNominatedOwner(overrides?: CallOverrides): Promise<string>;

    /**
     * Gets the owner of this contract
     */
    getOwner(overrides?: CallOverrides): Promise<string>;

    /**
     * Gets the shares token `symbol` value for use in VaultProxy instances
     */
    getSharesTokenSymbol(overrides?: CallOverrides): Promise<string>;

    /**
     * Gets the time remaining until the migration request of a given VaultProxy can be executed
     * @param _vaultProxy The VaultProxy instance
     */
    getTimelockRemainingForMigrationRequest(
      _vaultProxy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    /**
     * Checks whether a migration request that is executable exists for a given VaultProxy
     * @param _vaultProxy The VaultProxy instance
     */
    hasExecutableMigrationRequest(
      _vaultProxy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    /**
     * Checks whether a migration request exists for a given VaultProxy
     * @param _vaultProxy The VaultProxy instance
     */
    hasMigrationRequest(
      _vaultProxy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    /**
     * Revoke the nomination of a new contract owner
     */
    removeNominatedOwner(overrides?: CallOverrides): Promise<void>;

    /**
     * Set a new FundDeployer for use within the contract
     * @param _nextFundDeployer The address of the FundDeployer contract
     */
    setCurrentFundDeployer(
      _nextFundDeployer: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    /**
     * Sets a new migration timelock
     * @param _nextTimelock The number of seconds for the new timelock
     */
    setMigrationTimelock(
      _nextTimelock: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    /**
     * Does not prohibit overwriting the current nominatedOwner
     * Nominate a new contract owner
     * @param _nextNominatedOwner The account to nominate
     */
    setNominatedOwner(
      _nextNominatedOwner: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    /**
     * Sets a new `symbol` value for VaultProxy instances
     * @param _nextSymbol The symbol value to set
     */
    setSharesTokenSymbol(
      _nextSymbol: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    /**
     * Signals a migration by creating a migration request
     * @param _bypassFailure True if a failure in either migration hook should be ignored
     * @param _nextVaultAccessor The account that will be the next `accessor` on the VaultProxy
     * @param _nextVaultLib The next VaultLib library contract address to set on the VaultProxy
     * @param _vaultProxy The VaultProxy contract for which to signal migration
     */
    signalMigration(
      _vaultProxy: PromiseOrValue<string>,
      _nextVaultAccessor: PromiseOrValue<string>,
      _nextVaultLib: PromiseOrValue<string>,
      _bypassFailure: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'CurrentFundDeployerSet(address,address)'(
      prevFundDeployer?: null,
      nextFundDeployer?: null,
    ): CurrentFundDeployerSetEventFilter;
    CurrentFundDeployerSet(
      prevFundDeployer?: null,
      nextFundDeployer?: null,
    ): CurrentFundDeployerSetEventFilter;

    'MigrationCancelled(address,address,address,address,address,uint256)'(
      vaultProxy?: PromiseOrValue<string> | null,
      prevFundDeployer?: PromiseOrValue<string> | null,
      nextFundDeployer?: PromiseOrValue<string> | null,
      nextVaultAccessor?: null,
      nextVaultLib?: null,
      executableTimestamp?: null,
    ): MigrationCancelledEventFilter;
    MigrationCancelled(
      vaultProxy?: PromiseOrValue<string> | null,
      prevFundDeployer?: PromiseOrValue<string> | null,
      nextFundDeployer?: PromiseOrValue<string> | null,
      nextVaultAccessor?: null,
      nextVaultLib?: null,
      executableTimestamp?: null,
    ): MigrationCancelledEventFilter;

    'MigrationExecuted(address,address,address,address,address,uint256)'(
      vaultProxy?: PromiseOrValue<string> | null,
      prevFundDeployer?: PromiseOrValue<string> | null,
      nextFundDeployer?: PromiseOrValue<string> | null,
      nextVaultAccessor?: null,
      nextVaultLib?: null,
      executableTimestamp?: null,
    ): MigrationExecutedEventFilter;
    MigrationExecuted(
      vaultProxy?: PromiseOrValue<string> | null,
      prevFundDeployer?: PromiseOrValue<string> | null,
      nextFundDeployer?: PromiseOrValue<string> | null,
      nextVaultAccessor?: null,
      nextVaultLib?: null,
      executableTimestamp?: null,
    ): MigrationExecutedEventFilter;

    'MigrationInCancelHookFailed(bytes,address,address,address,address,address)'(
      failureReturnData?: null,
      vaultProxy?: PromiseOrValue<string> | null,
      prevFundDeployer?: PromiseOrValue<string> | null,
      nextFundDeployer?: PromiseOrValue<string> | null,
      nextVaultAccessor?: null,
      nextVaultLib?: null,
    ): MigrationInCancelHookFailedEventFilter;
    MigrationInCancelHookFailed(
      failureReturnData?: null,
      vaultProxy?: PromiseOrValue<string> | null,
      prevFundDeployer?: PromiseOrValue<string> | null,
      nextFundDeployer?: PromiseOrValue<string> | null,
      nextVaultAccessor?: null,
      nextVaultLib?: null,
    ): MigrationInCancelHookFailedEventFilter;

    'MigrationOutHookFailed(bytes,uint8,address,address,address,address,address)'(
      failureReturnData?: null,
      hook?: null,
      vaultProxy?: PromiseOrValue<string> | null,
      prevFundDeployer?: PromiseOrValue<string> | null,
      nextFundDeployer?: PromiseOrValue<string> | null,
      nextVaultAccessor?: null,
      nextVaultLib?: null,
    ): MigrationOutHookFailedEventFilter;
    MigrationOutHookFailed(
      failureReturnData?: null,
      hook?: null,
      vaultProxy?: PromiseOrValue<string> | null,
      prevFundDeployer?: PromiseOrValue<string> | null,
      nextFundDeployer?: PromiseOrValue<string> | null,
      nextVaultAccessor?: null,
      nextVaultLib?: null,
    ): MigrationOutHookFailedEventFilter;

    'MigrationSignaled(address,address,address,address,address,uint256)'(
      vaultProxy?: PromiseOrValue<string> | null,
      prevFundDeployer?: PromiseOrValue<string> | null,
      nextFundDeployer?: PromiseOrValue<string> | null,
      nextVaultAccessor?: null,
      nextVaultLib?: null,
      executableTimestamp?: null,
    ): MigrationSignaledEventFilter;
    MigrationSignaled(
      vaultProxy?: PromiseOrValue<string> | null,
      prevFundDeployer?: PromiseOrValue<string> | null,
      nextFundDeployer?: PromiseOrValue<string> | null,
      nextVaultAccessor?: null,
      nextVaultLib?: null,
      executableTimestamp?: null,
    ): MigrationSignaledEventFilter;

    'MigrationTimelockSet(uint256,uint256)'(
      prevTimelock?: null,
      nextTimelock?: null,
    ): MigrationTimelockSetEventFilter;
    MigrationTimelockSet(
      prevTimelock?: null,
      nextTimelock?: null,
    ): MigrationTimelockSetEventFilter;

    'NominatedOwnerRemoved(address)'(
      nominatedOwner?: PromiseOrValue<string> | null,
    ): NominatedOwnerRemovedEventFilter;
    NominatedOwnerRemoved(
      nominatedOwner?: PromiseOrValue<string> | null,
    ): NominatedOwnerRemovedEventFilter;

    'NominatedOwnerSet(address)'(
      nominatedOwner?: PromiseOrValue<string> | null,
    ): NominatedOwnerSetEventFilter;
    NominatedOwnerSet(
      nominatedOwner?: PromiseOrValue<string> | null,
    ): NominatedOwnerSetEventFilter;

    'OwnershipTransferred(address,address)'(
      prevOwner?: PromiseOrValue<string> | null,
      nextOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      prevOwner?: PromiseOrValue<string> | null,
      nextOwner?: PromiseOrValue<string> | null,
    ): OwnershipTransferredEventFilter;

    'SharesTokenSymbolSet(string)'(
      _nextSymbol?: null,
    ): SharesTokenSymbolSetEventFilter;
    SharesTokenSymbolSet(_nextSymbol?: null): SharesTokenSymbolSetEventFilter;

    'VaultProxyDeployed(address,address,address,address,address,string)'(
      fundDeployer?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      vaultProxy?: null,
      vaultLib?: PromiseOrValue<string> | null,
      vaultAccessor?: null,
      fundName?: null,
    ): VaultProxyDeployedEventFilter;
    VaultProxyDeployed(
      fundDeployer?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null,
      vaultProxy?: null,
      vaultLib?: PromiseOrValue<string> | null,
      vaultAccessor?: null,
      fundName?: null,
    ): VaultProxyDeployedEventFilter;
  };

  estimateGas: {
    /**
     * Because this function must also be callable by a permissioned migrator, it has an extra migration hook to the nextFundDeployer for the case where cancelMigration() is called directly (rather than via the nextFundDeployer).
     * Cancels a pending migration request
     * @param _bypassFailure True if a failure in either migration hook should be ignored
     * @param _vaultProxy The VaultProxy contract for which to cancel the migration request
     */
    cancelMigration(
      _vaultProxy: PromiseOrValue<string>,
      _bypassFailure: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Claim ownership of the contract
     */
    claimOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Input validation should be handled by the VaultProxy during deployment
     * Deploys a VaultProxy
     * @param _fundName The name of the fund
     * @param _owner The account to set as the VaultProxy's owner
     * @param _vaultAccessor The account to set as the VaultProxy's permissioned accessor
     * @param _vaultLib The VaultLib library with which to instantiate the VaultProxy
     */
    deployVaultProxy(
      _vaultLib: PromiseOrValue<string>,
      _owner: PromiseOrValue<string>,
      _vaultAccessor: PromiseOrValue<string>,
      _fundName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Executes a pending migration request
     * @param _bypassFailure True if a failure in either migration hook should be ignored
     * @param _vaultProxy The VaultProxy contract for which to execute the migration request
     */
    executeMigration(
      _vaultProxy: PromiseOrValue<string>,
      _bypassFailure: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Gets the current FundDeployer that is allowed to deploy and migrate funds
     */
    getCurrentFundDeployer(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the FundDeployer with which a given VaultProxy is associated
     * @param _vaultProxy The VaultProxy instance
     */
    getFundDeployerForVaultProxy(
      _vaultProxy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    /**
     * Gets the details of a pending migration request for a given VaultProxy
     * @param _vaultProxy The VaultProxy instance
     */
    getMigrationRequestDetailsForVaultProxy(
      _vaultProxy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    /**
     * Gets the amount of time that must pass between signaling and executing a migration
     */
    getMigrationTimelock(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the account that is nominated to be the next owner of this contract
     */
    getNominatedOwner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the owner of this contract
     */
    getOwner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the shares token `symbol` value for use in VaultProxy instances
     */
    getSharesTokenSymbol(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the time remaining until the migration request of a given VaultProxy can be executed
     * @param _vaultProxy The VaultProxy instance
     */
    getTimelockRemainingForMigrationRequest(
      _vaultProxy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    /**
     * Checks whether a migration request that is executable exists for a given VaultProxy
     * @param _vaultProxy The VaultProxy instance
     */
    hasExecutableMigrationRequest(
      _vaultProxy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    /**
     * Checks whether a migration request exists for a given VaultProxy
     * @param _vaultProxy The VaultProxy instance
     */
    hasMigrationRequest(
      _vaultProxy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    /**
     * Revoke the nomination of a new contract owner
     */
    removeNominatedOwner(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Set a new FundDeployer for use within the contract
     * @param _nextFundDeployer The address of the FundDeployer contract
     */
    setCurrentFundDeployer(
      _nextFundDeployer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Sets a new migration timelock
     * @param _nextTimelock The number of seconds for the new timelock
     */
    setMigrationTimelock(
      _nextTimelock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Does not prohibit overwriting the current nominatedOwner
     * Nominate a new contract owner
     * @param _nextNominatedOwner The account to nominate
     */
    setNominatedOwner(
      _nextNominatedOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Sets a new `symbol` value for VaultProxy instances
     * @param _nextSymbol The symbol value to set
     */
    setSharesTokenSymbol(
      _nextSymbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Signals a migration by creating a migration request
     * @param _bypassFailure True if a failure in either migration hook should be ignored
     * @param _nextVaultAccessor The account that will be the next `accessor` on the VaultProxy
     * @param _nextVaultLib The next VaultLib library contract address to set on the VaultProxy
     * @param _vaultProxy The VaultProxy contract for which to signal migration
     */
    signalMigration(
      _vaultProxy: PromiseOrValue<string>,
      _nextVaultAccessor: PromiseOrValue<string>,
      _nextVaultLib: PromiseOrValue<string>,
      _bypassFailure: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Because this function must also be callable by a permissioned migrator, it has an extra migration hook to the nextFundDeployer for the case where cancelMigration() is called directly (rather than via the nextFundDeployer).
     * Cancels a pending migration request
     * @param _bypassFailure True if a failure in either migration hook should be ignored
     * @param _vaultProxy The VaultProxy contract for which to cancel the migration request
     */
    cancelMigration(
      _vaultProxy: PromiseOrValue<string>,
      _bypassFailure: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Claim ownership of the contract
     */
    claimOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Input validation should be handled by the VaultProxy during deployment
     * Deploys a VaultProxy
     * @param _fundName The name of the fund
     * @param _owner The account to set as the VaultProxy's owner
     * @param _vaultAccessor The account to set as the VaultProxy's permissioned accessor
     * @param _vaultLib The VaultLib library with which to instantiate the VaultProxy
     */
    deployVaultProxy(
      _vaultLib: PromiseOrValue<string>,
      _owner: PromiseOrValue<string>,
      _vaultAccessor: PromiseOrValue<string>,
      _fundName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Executes a pending migration request
     * @param _bypassFailure True if a failure in either migration hook should be ignored
     * @param _vaultProxy The VaultProxy contract for which to execute the migration request
     */
    executeMigration(
      _vaultProxy: PromiseOrValue<string>,
      _bypassFailure: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the current FundDeployer that is allowed to deploy and migrate funds
     */
    getCurrentFundDeployer(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the FundDeployer with which a given VaultProxy is associated
     * @param _vaultProxy The VaultProxy instance
     */
    getFundDeployerForVaultProxy(
      _vaultProxy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the details of a pending migration request for a given VaultProxy
     * @param _vaultProxy The VaultProxy instance
     */
    getMigrationRequestDetailsForVaultProxy(
      _vaultProxy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the amount of time that must pass between signaling and executing a migration
     */
    getMigrationTimelock(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the account that is nominated to be the next owner of this contract
     */
    getNominatedOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Gets the owner of this contract
     */
    getOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Gets the shares token `symbol` value for use in VaultProxy instances
     */
    getSharesTokenSymbol(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the time remaining until the migration request of a given VaultProxy can be executed
     * @param _vaultProxy The VaultProxy instance
     */
    getTimelockRemainingForMigrationRequest(
      _vaultProxy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    /**
     * Checks whether a migration request that is executable exists for a given VaultProxy
     * @param _vaultProxy The VaultProxy instance
     */
    hasExecutableMigrationRequest(
      _vaultProxy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    /**
     * Checks whether a migration request exists for a given VaultProxy
     * @param _vaultProxy The VaultProxy instance
     */
    hasMigrationRequest(
      _vaultProxy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    /**
     * Revoke the nomination of a new contract owner
     */
    removeNominatedOwner(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Set a new FundDeployer for use within the contract
     * @param _nextFundDeployer The address of the FundDeployer contract
     */
    setCurrentFundDeployer(
      _nextFundDeployer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Sets a new migration timelock
     * @param _nextTimelock The number of seconds for the new timelock
     */
    setMigrationTimelock(
      _nextTimelock: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Does not prohibit overwriting the current nominatedOwner
     * Nominate a new contract owner
     * @param _nextNominatedOwner The account to nominate
     */
    setNominatedOwner(
      _nextNominatedOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Sets a new `symbol` value for VaultProxy instances
     * @param _nextSymbol The symbol value to set
     */
    setSharesTokenSymbol(
      _nextSymbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Signals a migration by creating a migration request
     * @param _bypassFailure True if a failure in either migration hook should be ignored
     * @param _nextVaultAccessor The account that will be the next `accessor` on the VaultProxy
     * @param _nextVaultLib The next VaultLib library contract address to set on the VaultProxy
     * @param _vaultProxy The VaultProxy contract for which to signal migration
     */
    signalMigration(
      _vaultProxy: PromiseOrValue<string>,
      _nextVaultAccessor: PromiseOrValue<string>,
      _nextVaultLib: PromiseOrValue<string>,
      _bypassFailure: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
