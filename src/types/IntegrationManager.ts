/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common';

export interface IntegrationManagerInterface extends utils.Interface {
  functions: {
    'activateForFund(bool)': FunctionFragment;
    'adapterIsRegistered(address)': FunctionFragment;
    'addAuthUserForFund(address,address)': FunctionFragment;
    'deactivateForFund()': FunctionFragment;
    'deregisterAdapters(address[])': FunctionFragment;
    'getDerivativePriceFeed()': FunctionFragment;
    'getFundDeployer()': FunctionFragment;
    'getOwner()': FunctionFragment;
    'getPolicyManager()': FunctionFragment;
    'getPrimitivePriceFeed()': FunctionFragment;
    'getRegisteredAdapters()': FunctionFragment;
    'getVaultProxyForFund(address)': FunctionFragment;
    'isAuthUserForFund(address,address)': FunctionFragment;
    'receiveCallFromComptroller(address,uint256,bytes)': FunctionFragment;
    'registerAdapters(address[])': FunctionFragment;
    'removeAuthUserForFund(address,address)': FunctionFragment;
    'setConfigForFund(bytes)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'activateForFund'
      | 'adapterIsRegistered'
      | 'addAuthUserForFund'
      | 'deactivateForFund'
      | 'deregisterAdapters'
      | 'getDerivativePriceFeed'
      | 'getFundDeployer'
      | 'getOwner'
      | 'getPolicyManager'
      | 'getPrimitivePriceFeed'
      | 'getRegisteredAdapters'
      | 'getVaultProxyForFund'
      | 'isAuthUserForFund'
      | 'receiveCallFromComptroller'
      | 'registerAdapters'
      | 'removeAuthUserForFund'
      | 'setConfigForFund',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'activateForFund',
    values: [PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(
    functionFragment: 'adapterIsRegistered',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'addAuthUserForFund',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'deactivateForFund',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'deregisterAdapters',
    values: [PromiseOrValue<string>[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'getDerivativePriceFeed',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getFundDeployer',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'getOwner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getPolicyManager',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getPrimitivePriceFeed',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getRegisteredAdapters',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getVaultProxyForFund',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'isAuthUserForFund',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'receiveCallFromComptroller',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'registerAdapters',
    values: [PromiseOrValue<string>[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'removeAuthUserForFund',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setConfigForFund',
    values: [PromiseOrValue<BytesLike>],
  ): string;

  decodeFunctionResult(
    functionFragment: 'activateForFund',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'adapterIsRegistered',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'addAuthUserForFund',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'deactivateForFund',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'deregisterAdapters',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getDerivativePriceFeed',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getFundDeployer',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'getOwner', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getPolicyManager',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getPrimitivePriceFeed',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getRegisteredAdapters',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getVaultProxyForFund',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'isAuthUserForFund',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'receiveCallFromComptroller',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'registerAdapters',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'removeAuthUserForFund',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setConfigForFund',
    data: BytesLike,
  ): Result;

  events: {
    'AdapterDeregistered(address,string)': EventFragment;
    'AdapterRegistered(address,string)': EventFragment;
    'AuthUserAddedForFund(address,address)': EventFragment;
    'AuthUserRemovedForFund(address,address)': EventFragment;
    'CallOnIntegrationExecutedForFund(address,address,address,address,bytes4,bytes,address[],uint256[],address[],uint256[])': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AdapterDeregistered'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AdapterRegistered'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AuthUserAddedForFund'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AuthUserRemovedForFund'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'CallOnIntegrationExecutedForFund',
  ): EventFragment;
}

export interface AdapterDeregisteredEventObject {
  adapter: string;
  identifier: string;
}
export type AdapterDeregisteredEvent = TypedEvent<
  [string, string],
  AdapterDeregisteredEventObject
>;

export type AdapterDeregisteredEventFilter =
  TypedEventFilter<AdapterDeregisteredEvent>;

export interface AdapterRegisteredEventObject {
  adapter: string;
  identifier: string;
}
export type AdapterRegisteredEvent = TypedEvent<
  [string, string],
  AdapterRegisteredEventObject
>;

export type AdapterRegisteredEventFilter =
  TypedEventFilter<AdapterRegisteredEvent>;

export interface AuthUserAddedForFundEventObject {
  comptrollerProxy: string;
  account: string;
}
export type AuthUserAddedForFundEvent = TypedEvent<
  [string, string],
  AuthUserAddedForFundEventObject
>;

export type AuthUserAddedForFundEventFilter =
  TypedEventFilter<AuthUserAddedForFundEvent>;

export interface AuthUserRemovedForFundEventObject {
  comptrollerProxy: string;
  account: string;
}
export type AuthUserRemovedForFundEvent = TypedEvent<
  [string, string],
  AuthUserRemovedForFundEventObject
>;

export type AuthUserRemovedForFundEventFilter =
  TypedEventFilter<AuthUserRemovedForFundEvent>;

export interface CallOnIntegrationExecutedForFundEventObject {
  comptrollerProxy: string;
  vaultProxy: string;
  caller: string;
  adapter: string;
  selector: string;
  integrationData: string;
  incomingAssets: string[];
  incomingAssetAmounts: BigNumber[];
  outgoingAssets: string[];
  outgoingAssetAmounts: BigNumber[];
}
export type CallOnIntegrationExecutedForFundEvent = TypedEvent<
  [
    string,
    string,
    string,
    string,
    string,
    string,
    string[],
    BigNumber[],
    string[],
    BigNumber[],
  ],
  CallOnIntegrationExecutedForFundEventObject
>;

export type CallOnIntegrationExecutedForFundEventFilter =
  TypedEventFilter<CallOnIntegrationExecutedForFundEvent>;

export interface IntegrationManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IntegrationManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Activates the extension by storing the VaultProxy
     */
    activateForFund(
      arg0: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Checks if an integration adapter is registered
     * @param _adapter The adapter to check
     */
    adapterIsRegistered(
      _adapter: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean] & { isRegistered_: boolean }>;

    /**
     * Authorizes a user to act on behalf of a fund via the IntegrationManager
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     * @param _who The user to authorize
     */
    addAuthUserForFund(
      _comptrollerProxy: PromiseOrValue<string>,
      _who: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Deactivate the extension by destroying storage
     */
    deactivateForFund(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Remove integration adapters from the list of registered adapters
     * @param _adapters Addresses of adapters to be deregistered
     */
    deregisterAdapters(
      _adapters: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Gets the `DERIVATIVE_PRICE_FEED` variable
     */
    getDerivativePriceFeed(
      overrides?: CallOverrides,
    ): Promise<[string] & { derivativePriceFeed_: string }>;

    /**
     * Gets the `FUND_DEPLOYER` variable
     */
    getFundDeployer(
      overrides?: CallOverrides,
    ): Promise<[string] & { fundDeployer_: string }>;

    /**
     * Ownership is deferred to the owner of the FundDeployer contract
     * Gets the owner of this contract
     */
    getOwner(overrides?: CallOverrides): Promise<[string] & { owner_: string }>;

    /**
     * Gets the `POLICY_MANAGER` variable
     */
    getPolicyManager(
      overrides?: CallOverrides,
    ): Promise<[string] & { policyManager_: string }>;

    /**
     * Gets the `PRIMITIVE_PRICE_FEED` variable
     */
    getPrimitivePriceFeed(
      overrides?: CallOverrides,
    ): Promise<[string] & { primitivePriceFeed_: string }>;

    /**
     * Gets all registered integration adapters
     */
    getRegisteredAdapters(
      overrides?: CallOverrides,
    ): Promise<[string[]] & { registeredAdaptersArray_: string[] }>;

    /**
     * Gets the verified VaultProxy for a given ComptrollerProxy
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     */
    getVaultProxyForFund(
      _comptrollerProxy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[string] & { vaultProxy_: string }>;

    /**
     * Checks whether an account is an authorized IntegrationManager user for a given fund
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     * @param _who The account to check
     */
    isAuthUserForFund(
      _comptrollerProxy: PromiseOrValue<string>,
      _who: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean] & { isAuthUser_: boolean }>;

    /**
     * Receives a dispatched `callOnExtension` from a fund's ComptrollerProxy
     * @param _actionId An ID representing the desired action
     * @param _callArgs The encoded args for the action
     * @param _caller The user who called for this action
     */
    receiveCallFromComptroller(
      _caller: PromiseOrValue<string>,
      _actionId: PromiseOrValue<BigNumberish>,
      _callArgs: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Add integration adapters to the list of registered adapters
     * @param _adapters Addresses of adapters to be registered
     */
    registerAdapters(
      _adapters: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Removes an authorized user from the IntegrationManager for the given fund
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     * @param _who The authorized user to remove
     */
    removeAuthUserForFund(
      _comptrollerProxy: PromiseOrValue<string>,
      _who: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Unimplemented by default, may be overridden.
     * Allows extension to run logic during fund configuration
     */
    setConfigForFund(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  /**
   * Activates the extension by storing the VaultProxy
   */
  activateForFund(
    arg0: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Checks if an integration adapter is registered
   * @param _adapter The adapter to check
   */
  adapterIsRegistered(
    _adapter: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  /**
   * Authorizes a user to act on behalf of a fund via the IntegrationManager
   * @param _comptrollerProxy The ComptrollerProxy of the fund
   * @param _who The user to authorize
   */
  addAuthUserForFund(
    _comptrollerProxy: PromiseOrValue<string>,
    _who: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Deactivate the extension by destroying storage
   */
  deactivateForFund(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Remove integration adapters from the list of registered adapters
   * @param _adapters Addresses of adapters to be deregistered
   */
  deregisterAdapters(
    _adapters: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Gets the `DERIVATIVE_PRICE_FEED` variable
   */
  getDerivativePriceFeed(overrides?: CallOverrides): Promise<string>;

  /**
   * Gets the `FUND_DEPLOYER` variable
   */
  getFundDeployer(overrides?: CallOverrides): Promise<string>;

  /**
   * Ownership is deferred to the owner of the FundDeployer contract
   * Gets the owner of this contract
   */
  getOwner(overrides?: CallOverrides): Promise<string>;

  /**
   * Gets the `POLICY_MANAGER` variable
   */
  getPolicyManager(overrides?: CallOverrides): Promise<string>;

  /**
   * Gets the `PRIMITIVE_PRICE_FEED` variable
   */
  getPrimitivePriceFeed(overrides?: CallOverrides): Promise<string>;

  /**
   * Gets all registered integration adapters
   */
  getRegisteredAdapters(overrides?: CallOverrides): Promise<string[]>;

  /**
   * Gets the verified VaultProxy for a given ComptrollerProxy
   * @param _comptrollerProxy The ComptrollerProxy of the fund
   */
  getVaultProxyForFund(
    _comptrollerProxy: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<string>;

  /**
   * Checks whether an account is an authorized IntegrationManager user for a given fund
   * @param _comptrollerProxy The ComptrollerProxy of the fund
   * @param _who The account to check
   */
  isAuthUserForFund(
    _comptrollerProxy: PromiseOrValue<string>,
    _who: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  /**
   * Receives a dispatched `callOnExtension` from a fund's ComptrollerProxy
   * @param _actionId An ID representing the desired action
   * @param _callArgs The encoded args for the action
   * @param _caller The user who called for this action
   */
  receiveCallFromComptroller(
    _caller: PromiseOrValue<string>,
    _actionId: PromiseOrValue<BigNumberish>,
    _callArgs: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Add integration adapters to the list of registered adapters
   * @param _adapters Addresses of adapters to be registered
   */
  registerAdapters(
    _adapters: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Removes an authorized user from the IntegrationManager for the given fund
   * @param _comptrollerProxy The ComptrollerProxy of the fund
   * @param _who The authorized user to remove
   */
  removeAuthUserForFund(
    _comptrollerProxy: PromiseOrValue<string>,
    _who: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Unimplemented by default, may be overridden.
   * Allows extension to run logic during fund configuration
   */
  setConfigForFund(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * Activates the extension by storing the VaultProxy
     */
    activateForFund(
      arg0: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    /**
     * Checks if an integration adapter is registered
     * @param _adapter The adapter to check
     */
    adapterIsRegistered(
      _adapter: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    /**
     * Authorizes a user to act on behalf of a fund via the IntegrationManager
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     * @param _who The user to authorize
     */
    addAuthUserForFund(
      _comptrollerProxy: PromiseOrValue<string>,
      _who: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    /**
     * Deactivate the extension by destroying storage
     */
    deactivateForFund(overrides?: CallOverrides): Promise<void>;

    /**
     * Remove integration adapters from the list of registered adapters
     * @param _adapters Addresses of adapters to be deregistered
     */
    deregisterAdapters(
      _adapters: PromiseOrValue<string>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    /**
     * Gets the `DERIVATIVE_PRICE_FEED` variable
     */
    getDerivativePriceFeed(overrides?: CallOverrides): Promise<string>;

    /**
     * Gets the `FUND_DEPLOYER` variable
     */
    getFundDeployer(overrides?: CallOverrides): Promise<string>;

    /**
     * Ownership is deferred to the owner of the FundDeployer contract
     * Gets the owner of this contract
     */
    getOwner(overrides?: CallOverrides): Promise<string>;

    /**
     * Gets the `POLICY_MANAGER` variable
     */
    getPolicyManager(overrides?: CallOverrides): Promise<string>;

    /**
     * Gets the `PRIMITIVE_PRICE_FEED` variable
     */
    getPrimitivePriceFeed(overrides?: CallOverrides): Promise<string>;

    /**
     * Gets all registered integration adapters
     */
    getRegisteredAdapters(overrides?: CallOverrides): Promise<string[]>;

    /**
     * Gets the verified VaultProxy for a given ComptrollerProxy
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     */
    getVaultProxyForFund(
      _comptrollerProxy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<string>;

    /**
     * Checks whether an account is an authorized IntegrationManager user for a given fund
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     * @param _who The account to check
     */
    isAuthUserForFund(
      _comptrollerProxy: PromiseOrValue<string>,
      _who: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    /**
     * Receives a dispatched `callOnExtension` from a fund's ComptrollerProxy
     * @param _actionId An ID representing the desired action
     * @param _callArgs The encoded args for the action
     * @param _caller The user who called for this action
     */
    receiveCallFromComptroller(
      _caller: PromiseOrValue<string>,
      _actionId: PromiseOrValue<BigNumberish>,
      _callArgs: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    /**
     * Add integration adapters to the list of registered adapters
     * @param _adapters Addresses of adapters to be registered
     */
    registerAdapters(
      _adapters: PromiseOrValue<string>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    /**
     * Removes an authorized user from the IntegrationManager for the given fund
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     * @param _who The authorized user to remove
     */
    removeAuthUserForFund(
      _comptrollerProxy: PromiseOrValue<string>,
      _who: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    /**
     * Unimplemented by default, may be overridden.
     * Allows extension to run logic during fund configuration
     */
    setConfigForFund(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'AdapterDeregistered(address,string)'(
      adapter?: PromiseOrValue<string> | null,
      identifier?: PromiseOrValue<string> | null,
    ): AdapterDeregisteredEventFilter;
    AdapterDeregistered(
      adapter?: PromiseOrValue<string> | null,
      identifier?: PromiseOrValue<string> | null,
    ): AdapterDeregisteredEventFilter;

    'AdapterRegistered(address,string)'(
      adapter?: PromiseOrValue<string> | null,
      identifier?: PromiseOrValue<string> | null,
    ): AdapterRegisteredEventFilter;
    AdapterRegistered(
      adapter?: PromiseOrValue<string> | null,
      identifier?: PromiseOrValue<string> | null,
    ): AdapterRegisteredEventFilter;

    'AuthUserAddedForFund(address,address)'(
      comptrollerProxy?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
    ): AuthUserAddedForFundEventFilter;
    AuthUserAddedForFund(
      comptrollerProxy?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
    ): AuthUserAddedForFundEventFilter;

    'AuthUserRemovedForFund(address,address)'(
      comptrollerProxy?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
    ): AuthUserRemovedForFundEventFilter;
    AuthUserRemovedForFund(
      comptrollerProxy?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
    ): AuthUserRemovedForFundEventFilter;

    'CallOnIntegrationExecutedForFund(address,address,address,address,bytes4,bytes,address[],uint256[],address[],uint256[])'(
      comptrollerProxy?: PromiseOrValue<string> | null,
      vaultProxy?: null,
      caller?: null,
      adapter?: PromiseOrValue<string> | null,
      selector?: PromiseOrValue<BytesLike> | null,
      integrationData?: null,
      incomingAssets?: null,
      incomingAssetAmounts?: null,
      outgoingAssets?: null,
      outgoingAssetAmounts?: null,
    ): CallOnIntegrationExecutedForFundEventFilter;
    CallOnIntegrationExecutedForFund(
      comptrollerProxy?: PromiseOrValue<string> | null,
      vaultProxy?: null,
      caller?: null,
      adapter?: PromiseOrValue<string> | null,
      selector?: PromiseOrValue<BytesLike> | null,
      integrationData?: null,
      incomingAssets?: null,
      incomingAssetAmounts?: null,
      outgoingAssets?: null,
      outgoingAssetAmounts?: null,
    ): CallOnIntegrationExecutedForFundEventFilter;
  };

  estimateGas: {
    /**
     * Activates the extension by storing the VaultProxy
     */
    activateForFund(
      arg0: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Checks if an integration adapter is registered
     * @param _adapter The adapter to check
     */
    adapterIsRegistered(
      _adapter: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    /**
     * Authorizes a user to act on behalf of a fund via the IntegrationManager
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     * @param _who The user to authorize
     */
    addAuthUserForFund(
      _comptrollerProxy: PromiseOrValue<string>,
      _who: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Deactivate the extension by destroying storage
     */
    deactivateForFund(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Remove integration adapters from the list of registered adapters
     * @param _adapters Addresses of adapters to be deregistered
     */
    deregisterAdapters(
      _adapters: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Gets the `DERIVATIVE_PRICE_FEED` variable
     */
    getDerivativePriceFeed(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the `FUND_DEPLOYER` variable
     */
    getFundDeployer(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Ownership is deferred to the owner of the FundDeployer contract
     * Gets the owner of this contract
     */
    getOwner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the `POLICY_MANAGER` variable
     */
    getPolicyManager(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the `PRIMITIVE_PRICE_FEED` variable
     */
    getPrimitivePriceFeed(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets all registered integration adapters
     */
    getRegisteredAdapters(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the verified VaultProxy for a given ComptrollerProxy
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     */
    getVaultProxyForFund(
      _comptrollerProxy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    /**
     * Checks whether an account is an authorized IntegrationManager user for a given fund
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     * @param _who The account to check
     */
    isAuthUserForFund(
      _comptrollerProxy: PromiseOrValue<string>,
      _who: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    /**
     * Receives a dispatched `callOnExtension` from a fund's ComptrollerProxy
     * @param _actionId An ID representing the desired action
     * @param _callArgs The encoded args for the action
     * @param _caller The user who called for this action
     */
    receiveCallFromComptroller(
      _caller: PromiseOrValue<string>,
      _actionId: PromiseOrValue<BigNumberish>,
      _callArgs: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Add integration adapters to the list of registered adapters
     * @param _adapters Addresses of adapters to be registered
     */
    registerAdapters(
      _adapters: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Removes an authorized user from the IntegrationManager for the given fund
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     * @param _who The authorized user to remove
     */
    removeAuthUserForFund(
      _comptrollerProxy: PromiseOrValue<string>,
      _who: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Unimplemented by default, may be overridden.
     * Allows extension to run logic during fund configuration
     */
    setConfigForFund(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Activates the extension by storing the VaultProxy
     */
    activateForFund(
      arg0: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Checks if an integration adapter is registered
     * @param _adapter The adapter to check
     */
    adapterIsRegistered(
      _adapter: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    /**
     * Authorizes a user to act on behalf of a fund via the IntegrationManager
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     * @param _who The user to authorize
     */
    addAuthUserForFund(
      _comptrollerProxy: PromiseOrValue<string>,
      _who: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Deactivate the extension by destroying storage
     */
    deactivateForFund(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Remove integration adapters from the list of registered adapters
     * @param _adapters Addresses of adapters to be deregistered
     */
    deregisterAdapters(
      _adapters: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the `DERIVATIVE_PRICE_FEED` variable
     */
    getDerivativePriceFeed(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the `FUND_DEPLOYER` variable
     */
    getFundDeployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Ownership is deferred to the owner of the FundDeployer contract
     * Gets the owner of this contract
     */
    getOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Gets the `POLICY_MANAGER` variable
     */
    getPolicyManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Gets the `PRIMITIVE_PRICE_FEED` variable
     */
    getPrimitivePriceFeed(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    /**
     * Gets all registered integration adapters
     */
    getRegisteredAdapters(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the verified VaultProxy for a given ComptrollerProxy
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     */
    getVaultProxyForFund(
      _comptrollerProxy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    /**
     * Checks whether an account is an authorized IntegrationManager user for a given fund
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     * @param _who The account to check
     */
    isAuthUserForFund(
      _comptrollerProxy: PromiseOrValue<string>,
      _who: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    /**
     * Receives a dispatched `callOnExtension` from a fund's ComptrollerProxy
     * @param _actionId An ID representing the desired action
     * @param _callArgs The encoded args for the action
     * @param _caller The user who called for this action
     */
    receiveCallFromComptroller(
      _caller: PromiseOrValue<string>,
      _actionId: PromiseOrValue<BigNumberish>,
      _callArgs: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Add integration adapters to the list of registered adapters
     * @param _adapters Addresses of adapters to be registered
     */
    registerAdapters(
      _adapters: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Removes an authorized user from the IntegrationManager for the given fund
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     * @param _who The authorized user to remove
     */
    removeAuthUserForFund(
      _comptrollerProxy: PromiseOrValue<string>,
      _who: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Unimplemented by default, may be overridden.
     * Allows extension to run logic during fund configuration
     */
    setConfigForFund(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
