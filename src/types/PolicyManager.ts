/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common';

export interface PolicyManagerInterface extends utils.Interface {
  functions: {
    'activateForFund(bool)': FunctionFragment;
    'deactivateForFund()': FunctionFragment;
    'deregisterPolicies(address[])': FunctionFragment;
    'disablePolicyForFund(address,address)': FunctionFragment;
    'enablePolicyForFund(address,address,bytes)': FunctionFragment;
    'getEnabledPoliciesForFund(address)': FunctionFragment;
    'getFundDeployer()': FunctionFragment;
    'getOwner()': FunctionFragment;
    'getRegisteredPolicies()': FunctionFragment;
    'getVaultProxyForFund(address)': FunctionFragment;
    'policyImplementsHook(address,uint8)': FunctionFragment;
    'policyIsEnabledForFund(address,address)': FunctionFragment;
    'policyIsRegistered(address)': FunctionFragment;
    'receiveCallFromComptroller(address,uint256,bytes)': FunctionFragment;
    'registerPolicies(address[])': FunctionFragment;
    'setConfigForFund(bytes)': FunctionFragment;
    'updatePolicySettingsForFund(address,address,bytes)': FunctionFragment;
    'validatePolicies(address,uint8,bytes)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'activateForFund'
      | 'deactivateForFund'
      | 'deregisterPolicies'
      | 'disablePolicyForFund'
      | 'enablePolicyForFund'
      | 'getEnabledPoliciesForFund'
      | 'getFundDeployer'
      | 'getOwner'
      | 'getRegisteredPolicies'
      | 'getVaultProxyForFund'
      | 'policyImplementsHook'
      | 'policyIsEnabledForFund'
      | 'policyIsRegistered'
      | 'receiveCallFromComptroller'
      | 'registerPolicies'
      | 'setConfigForFund'
      | 'updatePolicySettingsForFund'
      | 'validatePolicies',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'activateForFund',
    values: [PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(
    functionFragment: 'deactivateForFund',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'deregisterPolicies',
    values: [PromiseOrValue<string>[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'disablePolicyForFund',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'enablePolicyForFund',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'getEnabledPoliciesForFund',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getFundDeployer',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'getOwner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getRegisteredPolicies',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getVaultProxyForFund',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'policyImplementsHook',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'policyIsEnabledForFund',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'policyIsRegistered',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'receiveCallFromComptroller',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'registerPolicies',
    values: [PromiseOrValue<string>[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'setConfigForFund',
    values: [PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(
    functionFragment: 'updatePolicySettingsForFund',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'validatePolicies',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
    ],
  ): string;

  decodeFunctionResult(
    functionFragment: 'activateForFund',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'deactivateForFund',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'deregisterPolicies',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'disablePolicyForFund',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'enablePolicyForFund',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getEnabledPoliciesForFund',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getFundDeployer',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'getOwner', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getRegisteredPolicies',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getVaultProxyForFund',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'policyImplementsHook',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'policyIsEnabledForFund',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'policyIsRegistered',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'receiveCallFromComptroller',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'registerPolicies',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setConfigForFund',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updatePolicySettingsForFund',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'validatePolicies',
    data: BytesLike,
  ): Result;

  events: {
    'PolicyDeregistered(address,string)': EventFragment;
    'PolicyDisabledForFund(address,address)': EventFragment;
    'PolicyEnabledForFund(address,address,bytes)': EventFragment;
    'PolicyRegistered(address,string,uint8[])': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'PolicyDeregistered'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PolicyDisabledForFund'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PolicyEnabledForFund'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PolicyRegistered'): EventFragment;
}

export interface PolicyDeregisteredEventObject {
  policy: string;
  identifier: string;
}
export type PolicyDeregisteredEvent = TypedEvent<
  [string, string],
  PolicyDeregisteredEventObject
>;

export type PolicyDeregisteredEventFilter =
  TypedEventFilter<PolicyDeregisteredEvent>;

export interface PolicyDisabledForFundEventObject {
  comptrollerProxy: string;
  policy: string;
}
export type PolicyDisabledForFundEvent = TypedEvent<
  [string, string],
  PolicyDisabledForFundEventObject
>;

export type PolicyDisabledForFundEventFilter =
  TypedEventFilter<PolicyDisabledForFundEvent>;

export interface PolicyEnabledForFundEventObject {
  comptrollerProxy: string;
  policy: string;
  settingsData: string;
}
export type PolicyEnabledForFundEvent = TypedEvent<
  [string, string, string],
  PolicyEnabledForFundEventObject
>;

export type PolicyEnabledForFundEventFilter =
  TypedEventFilter<PolicyEnabledForFundEvent>;

export interface PolicyRegisteredEventObject {
  policy: string;
  identifier: string;
  implementedHooks: number[];
}
export type PolicyRegisteredEvent = TypedEvent<
  [string, string, number[]],
  PolicyRegisteredEventObject
>;

export type PolicyRegisteredEventFilter =
  TypedEventFilter<PolicyRegisteredEvent>;

export interface PolicyManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PolicyManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Caller is expected to be a valid ComptrollerProxy, but there isn't a need to validate.
     * Validates and initializes policies as necessary prior to fund activation
     * @param _isMigratedFund True if the fund is migrating to this release
     */
    activateForFund(
      _isMigratedFund: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Deactivates policies for a fund by destroying storage
     */
    deactivateForFund(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Remove policies from the list of registered policies
     * @param _policies Addresses of policies to be registered
     */
    deregisterPolicies(
      _policies: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Disables a policy for a fund
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     * @param _policy The policy address to disable
     */
    disablePolicyForFund(
      _comptrollerProxy: PromiseOrValue<string>,
      _policy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Disabling a policy does not delete fund config on the policy, so if a policy is disabled and then enabled again, its initial state will be the previous config. It is the policy's job to determine how to merge that config with the _settingsData param in this function.
     * Enables a policy for a fund
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     * @param _policy The policy address to enable
     * @param _settingsData The encoded settings data with which to configure the policy
     */
    enablePolicyForFund(
      _comptrollerProxy: PromiseOrValue<string>,
      _policy: PromiseOrValue<string>,
      _settingsData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Get a list of enabled policies for a given fund
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     */
    getEnabledPoliciesForFund(
      _comptrollerProxy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[string[]] & { enabledPolicies_: string[] }>;

    /**
     * Gets the `FUND_DEPLOYER` variable
     */
    getFundDeployer(
      overrides?: CallOverrides,
    ): Promise<[string] & { fundDeployer_: string }>;

    /**
     * Ownership is deferred to the owner of the FundDeployer contract
     * Gets the owner of this contract
     */
    getOwner(overrides?: CallOverrides): Promise<[string] & { owner_: string }>;

    /**
     * Get all registered policies
     */
    getRegisteredPolicies(
      overrides?: CallOverrides,
    ): Promise<[string[]] & { registeredPoliciesArray_: string[] }>;

    /**
     * Gets the verified VaultProxy for a given ComptrollerProxy
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     */
    getVaultProxyForFund(
      _comptrollerProxy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[string] & { vaultProxy_: string }>;

    /**
     * Checks if a policy implements a particular hook
     * @param _hook The PolicyHook to check
     * @param _policy The address of the policy to check
     */
    policyImplementsHook(
      _policy: PromiseOrValue<string>,
      _hook: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[boolean] & { implementsHook_: boolean }>;

    /**
     * Check if a policy is enabled for the fund
     * @param _comptrollerProxy The ComptrollerProxy of the fund to check
     * @param _policy The address of the policy to check
     */
    policyIsEnabledForFund(
      _comptrollerProxy: PromiseOrValue<string>,
      _policy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean] & { isEnabled_: boolean }>;

    /**
     * Check whether a policy is registered
     * @param _policy The address of the policy to check
     */
    policyIsRegistered(
      _policy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean] & { isRegistered_: boolean }>;

    /**
     * Unimplemented by default, may be overridden.
     * Receives calls from ComptrollerLib.callOnExtension() and dispatches the appropriate action
     */
    receiveCallFromComptroller(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Add policies to the list of registered policies
     * @param _policies Addresses of policies to be registered
     */
    registerPolicies(
      _policies: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Only called during init() on ComptrollerProxy deployment
     * Enable policies for use in a fund
     * @param _configData Encoded config data
     */
    setConfigForFund(
      _configData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Updates policy settings for a fund
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     * @param _policy The Policy contract to update
     * @param _settingsData The encoded settings data with which to update the policy config
     */
    updatePolicySettingsForFund(
      _comptrollerProxy: PromiseOrValue<string>,
      _policy: PromiseOrValue<string>,
      _settingsData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Validates all policies that apply to a given hook for a fund
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     * @param _hook The PolicyHook for which to validate policies
     * @param _validationData The encoded data with which to validate the filtered policies
     */
    validatePolicies(
      _comptrollerProxy: PromiseOrValue<string>,
      _hook: PromiseOrValue<BigNumberish>,
      _validationData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  /**
   * Caller is expected to be a valid ComptrollerProxy, but there isn't a need to validate.
   * Validates and initializes policies as necessary prior to fund activation
   * @param _isMigratedFund True if the fund is migrating to this release
   */
  activateForFund(
    _isMigratedFund: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Deactivates policies for a fund by destroying storage
   */
  deactivateForFund(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Remove policies from the list of registered policies
   * @param _policies Addresses of policies to be registered
   */
  deregisterPolicies(
    _policies: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Disables a policy for a fund
   * @param _comptrollerProxy The ComptrollerProxy of the fund
   * @param _policy The policy address to disable
   */
  disablePolicyForFund(
    _comptrollerProxy: PromiseOrValue<string>,
    _policy: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Disabling a policy does not delete fund config on the policy, so if a policy is disabled and then enabled again, its initial state will be the previous config. It is the policy's job to determine how to merge that config with the _settingsData param in this function.
   * Enables a policy for a fund
   * @param _comptrollerProxy The ComptrollerProxy of the fund
   * @param _policy The policy address to enable
   * @param _settingsData The encoded settings data with which to configure the policy
   */
  enablePolicyForFund(
    _comptrollerProxy: PromiseOrValue<string>,
    _policy: PromiseOrValue<string>,
    _settingsData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Get a list of enabled policies for a given fund
   * @param _comptrollerProxy The ComptrollerProxy of the fund
   */
  getEnabledPoliciesForFund(
    _comptrollerProxy: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<string[]>;

  /**
   * Gets the `FUND_DEPLOYER` variable
   */
  getFundDeployer(overrides?: CallOverrides): Promise<string>;

  /**
   * Ownership is deferred to the owner of the FundDeployer contract
   * Gets the owner of this contract
   */
  getOwner(overrides?: CallOverrides): Promise<string>;

  /**
   * Get all registered policies
   */
  getRegisteredPolicies(overrides?: CallOverrides): Promise<string[]>;

  /**
   * Gets the verified VaultProxy for a given ComptrollerProxy
   * @param _comptrollerProxy The ComptrollerProxy of the fund
   */
  getVaultProxyForFund(
    _comptrollerProxy: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<string>;

  /**
   * Checks if a policy implements a particular hook
   * @param _hook The PolicyHook to check
   * @param _policy The address of the policy to check
   */
  policyImplementsHook(
    _policy: PromiseOrValue<string>,
    _hook: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  /**
   * Check if a policy is enabled for the fund
   * @param _comptrollerProxy The ComptrollerProxy of the fund to check
   * @param _policy The address of the policy to check
   */
  policyIsEnabledForFund(
    _comptrollerProxy: PromiseOrValue<string>,
    _policy: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  /**
   * Check whether a policy is registered
   * @param _policy The address of the policy to check
   */
  policyIsRegistered(
    _policy: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  /**
   * Unimplemented by default, may be overridden.
   * Receives calls from ComptrollerLib.callOnExtension() and dispatches the appropriate action
   */
  receiveCallFromComptroller(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    arg2: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Add policies to the list of registered policies
   * @param _policies Addresses of policies to be registered
   */
  registerPolicies(
    _policies: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Only called during init() on ComptrollerProxy deployment
   * Enable policies for use in a fund
   * @param _configData Encoded config data
   */
  setConfigForFund(
    _configData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Updates policy settings for a fund
   * @param _comptrollerProxy The ComptrollerProxy of the fund
   * @param _policy The Policy contract to update
   * @param _settingsData The encoded settings data with which to update the policy config
   */
  updatePolicySettingsForFund(
    _comptrollerProxy: PromiseOrValue<string>,
    _policy: PromiseOrValue<string>,
    _settingsData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Validates all policies that apply to a given hook for a fund
   * @param _comptrollerProxy The ComptrollerProxy of the fund
   * @param _hook The PolicyHook for which to validate policies
   * @param _validationData The encoded data with which to validate the filtered policies
   */
  validatePolicies(
    _comptrollerProxy: PromiseOrValue<string>,
    _hook: PromiseOrValue<BigNumberish>,
    _validationData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * Caller is expected to be a valid ComptrollerProxy, but there isn't a need to validate.
     * Validates and initializes policies as necessary prior to fund activation
     * @param _isMigratedFund True if the fund is migrating to this release
     */
    activateForFund(
      _isMigratedFund: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    /**
     * Deactivates policies for a fund by destroying storage
     */
    deactivateForFund(overrides?: CallOverrides): Promise<void>;

    /**
     * Remove policies from the list of registered policies
     * @param _policies Addresses of policies to be registered
     */
    deregisterPolicies(
      _policies: PromiseOrValue<string>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    /**
     * Disables a policy for a fund
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     * @param _policy The policy address to disable
     */
    disablePolicyForFund(
      _comptrollerProxy: PromiseOrValue<string>,
      _policy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    /**
     * Disabling a policy does not delete fund config on the policy, so if a policy is disabled and then enabled again, its initial state will be the previous config. It is the policy's job to determine how to merge that config with the _settingsData param in this function.
     * Enables a policy for a fund
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     * @param _policy The policy address to enable
     * @param _settingsData The encoded settings data with which to configure the policy
     */
    enablePolicyForFund(
      _comptrollerProxy: PromiseOrValue<string>,
      _policy: PromiseOrValue<string>,
      _settingsData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    /**
     * Get a list of enabled policies for a given fund
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     */
    getEnabledPoliciesForFund(
      _comptrollerProxy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<string[]>;

    /**
     * Gets the `FUND_DEPLOYER` variable
     */
    getFundDeployer(overrides?: CallOverrides): Promise<string>;

    /**
     * Ownership is deferred to the owner of the FundDeployer contract
     * Gets the owner of this contract
     */
    getOwner(overrides?: CallOverrides): Promise<string>;

    /**
     * Get all registered policies
     */
    getRegisteredPolicies(overrides?: CallOverrides): Promise<string[]>;

    /**
     * Gets the verified VaultProxy for a given ComptrollerProxy
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     */
    getVaultProxyForFund(
      _comptrollerProxy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<string>;

    /**
     * Checks if a policy implements a particular hook
     * @param _hook The PolicyHook to check
     * @param _policy The address of the policy to check
     */
    policyImplementsHook(
      _policy: PromiseOrValue<string>,
      _hook: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    /**
     * Check if a policy is enabled for the fund
     * @param _comptrollerProxy The ComptrollerProxy of the fund to check
     * @param _policy The address of the policy to check
     */
    policyIsEnabledForFund(
      _comptrollerProxy: PromiseOrValue<string>,
      _policy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    /**
     * Check whether a policy is registered
     * @param _policy The address of the policy to check
     */
    policyIsRegistered(
      _policy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    /**
     * Unimplemented by default, may be overridden.
     * Receives calls from ComptrollerLib.callOnExtension() and dispatches the appropriate action
     */
    receiveCallFromComptroller(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    /**
     * Add policies to the list of registered policies
     * @param _policies Addresses of policies to be registered
     */
    registerPolicies(
      _policies: PromiseOrValue<string>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    /**
     * Only called during init() on ComptrollerProxy deployment
     * Enable policies for use in a fund
     * @param _configData Encoded config data
     */
    setConfigForFund(
      _configData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    /**
     * Updates policy settings for a fund
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     * @param _policy The Policy contract to update
     * @param _settingsData The encoded settings data with which to update the policy config
     */
    updatePolicySettingsForFund(
      _comptrollerProxy: PromiseOrValue<string>,
      _policy: PromiseOrValue<string>,
      _settingsData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    /**
     * Validates all policies that apply to a given hook for a fund
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     * @param _hook The PolicyHook for which to validate policies
     * @param _validationData The encoded data with which to validate the filtered policies
     */
    validatePolicies(
      _comptrollerProxy: PromiseOrValue<string>,
      _hook: PromiseOrValue<BigNumberish>,
      _validationData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'PolicyDeregistered(address,string)'(
      policy?: PromiseOrValue<string> | null,
      identifier?: PromiseOrValue<string> | null,
    ): PolicyDeregisteredEventFilter;
    PolicyDeregistered(
      policy?: PromiseOrValue<string> | null,
      identifier?: PromiseOrValue<string> | null,
    ): PolicyDeregisteredEventFilter;

    'PolicyDisabledForFund(address,address)'(
      comptrollerProxy?: PromiseOrValue<string> | null,
      policy?: PromiseOrValue<string> | null,
    ): PolicyDisabledForFundEventFilter;
    PolicyDisabledForFund(
      comptrollerProxy?: PromiseOrValue<string> | null,
      policy?: PromiseOrValue<string> | null,
    ): PolicyDisabledForFundEventFilter;

    'PolicyEnabledForFund(address,address,bytes)'(
      comptrollerProxy?: PromiseOrValue<string> | null,
      policy?: PromiseOrValue<string> | null,
      settingsData?: null,
    ): PolicyEnabledForFundEventFilter;
    PolicyEnabledForFund(
      comptrollerProxy?: PromiseOrValue<string> | null,
      policy?: PromiseOrValue<string> | null,
      settingsData?: null,
    ): PolicyEnabledForFundEventFilter;

    'PolicyRegistered(address,string,uint8[])'(
      policy?: PromiseOrValue<string> | null,
      identifier?: PromiseOrValue<string> | null,
      implementedHooks?: null,
    ): PolicyRegisteredEventFilter;
    PolicyRegistered(
      policy?: PromiseOrValue<string> | null,
      identifier?: PromiseOrValue<string> | null,
      implementedHooks?: null,
    ): PolicyRegisteredEventFilter;
  };

  estimateGas: {
    /**
     * Caller is expected to be a valid ComptrollerProxy, but there isn't a need to validate.
     * Validates and initializes policies as necessary prior to fund activation
     * @param _isMigratedFund True if the fund is migrating to this release
     */
    activateForFund(
      _isMigratedFund: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Deactivates policies for a fund by destroying storage
     */
    deactivateForFund(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Remove policies from the list of registered policies
     * @param _policies Addresses of policies to be registered
     */
    deregisterPolicies(
      _policies: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Disables a policy for a fund
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     * @param _policy The policy address to disable
     */
    disablePolicyForFund(
      _comptrollerProxy: PromiseOrValue<string>,
      _policy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Disabling a policy does not delete fund config on the policy, so if a policy is disabled and then enabled again, its initial state will be the previous config. It is the policy's job to determine how to merge that config with the _settingsData param in this function.
     * Enables a policy for a fund
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     * @param _policy The policy address to enable
     * @param _settingsData The encoded settings data with which to configure the policy
     */
    enablePolicyForFund(
      _comptrollerProxy: PromiseOrValue<string>,
      _policy: PromiseOrValue<string>,
      _settingsData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Get a list of enabled policies for a given fund
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     */
    getEnabledPoliciesForFund(
      _comptrollerProxy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    /**
     * Gets the `FUND_DEPLOYER` variable
     */
    getFundDeployer(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Ownership is deferred to the owner of the FundDeployer contract
     * Gets the owner of this contract
     */
    getOwner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Get all registered policies
     */
    getRegisteredPolicies(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the verified VaultProxy for a given ComptrollerProxy
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     */
    getVaultProxyForFund(
      _comptrollerProxy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    /**
     * Checks if a policy implements a particular hook
     * @param _hook The PolicyHook to check
     * @param _policy The address of the policy to check
     */
    policyImplementsHook(
      _policy: PromiseOrValue<string>,
      _hook: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    /**
     * Check if a policy is enabled for the fund
     * @param _comptrollerProxy The ComptrollerProxy of the fund to check
     * @param _policy The address of the policy to check
     */
    policyIsEnabledForFund(
      _comptrollerProxy: PromiseOrValue<string>,
      _policy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    /**
     * Check whether a policy is registered
     * @param _policy The address of the policy to check
     */
    policyIsRegistered(
      _policy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    /**
     * Unimplemented by default, may be overridden.
     * Receives calls from ComptrollerLib.callOnExtension() and dispatches the appropriate action
     */
    receiveCallFromComptroller(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Add policies to the list of registered policies
     * @param _policies Addresses of policies to be registered
     */
    registerPolicies(
      _policies: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Only called during init() on ComptrollerProxy deployment
     * Enable policies for use in a fund
     * @param _configData Encoded config data
     */
    setConfigForFund(
      _configData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Updates policy settings for a fund
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     * @param _policy The Policy contract to update
     * @param _settingsData The encoded settings data with which to update the policy config
     */
    updatePolicySettingsForFund(
      _comptrollerProxy: PromiseOrValue<string>,
      _policy: PromiseOrValue<string>,
      _settingsData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Validates all policies that apply to a given hook for a fund
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     * @param _hook The PolicyHook for which to validate policies
     * @param _validationData The encoded data with which to validate the filtered policies
     */
    validatePolicies(
      _comptrollerProxy: PromiseOrValue<string>,
      _hook: PromiseOrValue<BigNumberish>,
      _validationData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Caller is expected to be a valid ComptrollerProxy, but there isn't a need to validate.
     * Validates and initializes policies as necessary prior to fund activation
     * @param _isMigratedFund True if the fund is migrating to this release
     */
    activateForFund(
      _isMigratedFund: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Deactivates policies for a fund by destroying storage
     */
    deactivateForFund(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Remove policies from the list of registered policies
     * @param _policies Addresses of policies to be registered
     */
    deregisterPolicies(
      _policies: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Disables a policy for a fund
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     * @param _policy The policy address to disable
     */
    disablePolicyForFund(
      _comptrollerProxy: PromiseOrValue<string>,
      _policy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Disabling a policy does not delete fund config on the policy, so if a policy is disabled and then enabled again, its initial state will be the previous config. It is the policy's job to determine how to merge that config with the _settingsData param in this function.
     * Enables a policy for a fund
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     * @param _policy The policy address to enable
     * @param _settingsData The encoded settings data with which to configure the policy
     */
    enablePolicyForFund(
      _comptrollerProxy: PromiseOrValue<string>,
      _policy: PromiseOrValue<string>,
      _settingsData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Get a list of enabled policies for a given fund
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     */
    getEnabledPoliciesForFund(
      _comptrollerProxy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the `FUND_DEPLOYER` variable
     */
    getFundDeployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Ownership is deferred to the owner of the FundDeployer contract
     * Gets the owner of this contract
     */
    getOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Get all registered policies
     */
    getRegisteredPolicies(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the verified VaultProxy for a given ComptrollerProxy
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     */
    getVaultProxyForFund(
      _comptrollerProxy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    /**
     * Checks if a policy implements a particular hook
     * @param _hook The PolicyHook to check
     * @param _policy The address of the policy to check
     */
    policyImplementsHook(
      _policy: PromiseOrValue<string>,
      _hook: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    /**
     * Check if a policy is enabled for the fund
     * @param _comptrollerProxy The ComptrollerProxy of the fund to check
     * @param _policy The address of the policy to check
     */
    policyIsEnabledForFund(
      _comptrollerProxy: PromiseOrValue<string>,
      _policy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    /**
     * Check whether a policy is registered
     * @param _policy The address of the policy to check
     */
    policyIsRegistered(
      _policy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    /**
     * Unimplemented by default, may be overridden.
     * Receives calls from ComptrollerLib.callOnExtension() and dispatches the appropriate action
     */
    receiveCallFromComptroller(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Add policies to the list of registered policies
     * @param _policies Addresses of policies to be registered
     */
    registerPolicies(
      _policies: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Only called during init() on ComptrollerProxy deployment
     * Enable policies for use in a fund
     * @param _configData Encoded config data
     */
    setConfigForFund(
      _configData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Updates policy settings for a fund
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     * @param _policy The Policy contract to update
     * @param _settingsData The encoded settings data with which to update the policy config
     */
    updatePolicySettingsForFund(
      _comptrollerProxy: PromiseOrValue<string>,
      _policy: PromiseOrValue<string>,
      _settingsData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Validates all policies that apply to a given hook for a fund
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     * @param _hook The PolicyHook for which to validate policies
     * @param _validationData The encoded data with which to validate the filtered policies
     */
    validatePolicies(
      _comptrollerProxy: PromiseOrValue<string>,
      _hook: PromiseOrValue<BigNumberish>,
      _validationData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
