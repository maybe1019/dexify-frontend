/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common';

export declare namespace ManagementFee {
  export type FeeInfoStruct = {
    scaledPerSecondRate: PromiseOrValue<BigNumberish>;
    lastSettled: PromiseOrValue<BigNumberish>;
  };

  export type FeeInfoStructOutput = [BigNumber, BigNumber] & {
    scaledPerSecondRate: BigNumber;
    lastSettled: BigNumber;
  };
}

export interface ManagementFeeInterface extends utils.Interface {
  functions: {
    'activateForFund(address,address)': FunctionFragment;
    'addFundSettings(address,bytes)': FunctionFragment;
    'getFeeInfoForFund(address)': FunctionFragment;
    'getFeeManager()': FunctionFragment;
    'identifier()': FunctionFragment;
    'implementedHooks()': FunctionFragment;
    'payout(address,address)': FunctionFragment;
    'settle(address,address,uint8,bytes,uint256)': FunctionFragment;
    'update(address,address,uint8,bytes,uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'activateForFund'
      | 'addFundSettings'
      | 'getFeeInfoForFund'
      | 'getFeeManager'
      | 'identifier'
      | 'implementedHooks'
      | 'payout'
      | 'settle'
      | 'update',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'activateForFund',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'addFundSettings',
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getFeeInfoForFund',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getFeeManager',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'identifier',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'implementedHooks',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'payout',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'settle',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'update',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;

  decodeFunctionResult(
    functionFragment: 'activateForFund',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'addFundSettings',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getFeeInfoForFund',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getFeeManager',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'identifier', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'implementedHooks',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'payout', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'settle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'update', data: BytesLike): Result;

  events: {
    'ActivatedForMigratedFund(address)': EventFragment;
    'FundSettingsAdded(address,uint256)': EventFragment;
    'Settled(address,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'ActivatedForMigratedFund'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FundSettingsAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Settled'): EventFragment;
}

export interface ActivatedForMigratedFundEventObject {
  comptrollerProxy: string;
}
export type ActivatedForMigratedFundEvent = TypedEvent<
  [string],
  ActivatedForMigratedFundEventObject
>;

export type ActivatedForMigratedFundEventFilter =
  TypedEventFilter<ActivatedForMigratedFundEvent>;

export interface FundSettingsAddedEventObject {
  comptrollerProxy: string;
  scaledPerSecondRate: BigNumber;
}
export type FundSettingsAddedEvent = TypedEvent<
  [string, BigNumber],
  FundSettingsAddedEventObject
>;

export type FundSettingsAddedEventFilter =
  TypedEventFilter<FundSettingsAddedEvent>;

export interface SettledEventObject {
  comptrollerProxy: string;
  sharesQuantity: BigNumber;
  secondsSinceSettlement: BigNumber;
}
export type SettledEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  SettledEventObject
>;

export type SettledEventFilter = TypedEventFilter<SettledEvent>;

export interface ManagementFee extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ManagementFeeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Activates the fee for a fund
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     * @param _vaultProxy The VaultProxy of the fund
     */
    activateForFund(
      _comptrollerProxy: PromiseOrValue<string>,
      _vaultProxy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Add the initial fee settings for a fund
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     * @param _settingsData Encoded settings to apply to the fee for a fund
     */
    addFundSettings(
      _comptrollerProxy: PromiseOrValue<string>,
      _settingsData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Gets the feeInfo for a given fund
     * @param _comptrollerProxy The ComptrollerProxy contract of the fund
     */
    getFeeInfoForFund(
      _comptrollerProxy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [ManagementFee.FeeInfoStructOutput] & {
        feeInfo_: ManagementFee.FeeInfoStructOutput;
      }
    >;

    /**
     * Gets the `FEE_MANAGER` variable
     */
    getFeeManager(
      overrides?: CallOverrides,
    ): Promise<[string] & { feeManager_: string }>;

    /**
     * Provides a constant string identifier for a fee
     */
    identifier(
      overrides?: CallOverrides,
    ): Promise<[string] & { identifier_: string }>;

    /**
     * Used only during fee registration
     * Gets the hooks that are implemented by the fee
     */
    implementedHooks(overrides?: CallOverrides): Promise<
      [number[], number[], boolean, boolean] & {
        implementedHooksForSettle_: number[];
        implementedHooksForUpdate_: number[];
        usesGavOnSettle_: boolean;
        usesGavOnUpdate_: boolean;
      }
    >;

    /**
     * Returns false by default, can be overridden by fee
     * Runs payout logic for a fee that utilizes shares outstanding as its settlement type
     */
    payout(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Settle the fee and calculate shares due
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     * @param _vaultProxy The VaultProxy of the fund
     */
    settle(
      _comptrollerProxy: PromiseOrValue<string>,
      _vaultProxy: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      arg4: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Unimplemented by default, can be overridden by fee
     * Update fee state after all settlement has occurred during a given fee hook
     */
    update(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      arg4: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  /**
   * Activates the fee for a fund
   * @param _comptrollerProxy The ComptrollerProxy of the fund
   * @param _vaultProxy The VaultProxy of the fund
   */
  activateForFund(
    _comptrollerProxy: PromiseOrValue<string>,
    _vaultProxy: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Add the initial fee settings for a fund
   * @param _comptrollerProxy The ComptrollerProxy of the fund
   * @param _settingsData Encoded settings to apply to the fee for a fund
   */
  addFundSettings(
    _comptrollerProxy: PromiseOrValue<string>,
    _settingsData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Gets the feeInfo for a given fund
   * @param _comptrollerProxy The ComptrollerProxy contract of the fund
   */
  getFeeInfoForFund(
    _comptrollerProxy: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<ManagementFee.FeeInfoStructOutput>;

  /**
   * Gets the `FEE_MANAGER` variable
   */
  getFeeManager(overrides?: CallOverrides): Promise<string>;

  /**
   * Provides a constant string identifier for a fee
   */
  identifier(overrides?: CallOverrides): Promise<string>;

  /**
   * Used only during fee registration
   * Gets the hooks that are implemented by the fee
   */
  implementedHooks(overrides?: CallOverrides): Promise<
    [number[], number[], boolean, boolean] & {
      implementedHooksForSettle_: number[];
      implementedHooksForUpdate_: number[];
      usesGavOnSettle_: boolean;
      usesGavOnUpdate_: boolean;
    }
  >;

  /**
   * Returns false by default, can be overridden by fee
   * Runs payout logic for a fee that utilizes shares outstanding as its settlement type
   */
  payout(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Settle the fee and calculate shares due
   * @param _comptrollerProxy The ComptrollerProxy of the fund
   * @param _vaultProxy The VaultProxy of the fund
   */
  settle(
    _comptrollerProxy: PromiseOrValue<string>,
    _vaultProxy: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BytesLike>,
    arg4: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Unimplemented by default, can be overridden by fee
   * Update fee state after all settlement has occurred during a given fee hook
   */
  update(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BytesLike>,
    arg4: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * Activates the fee for a fund
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     * @param _vaultProxy The VaultProxy of the fund
     */
    activateForFund(
      _comptrollerProxy: PromiseOrValue<string>,
      _vaultProxy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    /**
     * Add the initial fee settings for a fund
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     * @param _settingsData Encoded settings to apply to the fee for a fund
     */
    addFundSettings(
      _comptrollerProxy: PromiseOrValue<string>,
      _settingsData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    /**
     * Gets the feeInfo for a given fund
     * @param _comptrollerProxy The ComptrollerProxy contract of the fund
     */
    getFeeInfoForFund(
      _comptrollerProxy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<ManagementFee.FeeInfoStructOutput>;

    /**
     * Gets the `FEE_MANAGER` variable
     */
    getFeeManager(overrides?: CallOverrides): Promise<string>;

    /**
     * Provides a constant string identifier for a fee
     */
    identifier(overrides?: CallOverrides): Promise<string>;

    /**
     * Used only during fee registration
     * Gets the hooks that are implemented by the fee
     */
    implementedHooks(overrides?: CallOverrides): Promise<
      [number[], number[], boolean, boolean] & {
        implementedHooksForSettle_: number[];
        implementedHooksForUpdate_: number[];
        usesGavOnSettle_: boolean;
        usesGavOnUpdate_: boolean;
      }
    >;

    /**
     * Returns false by default, can be overridden by fee
     * Runs payout logic for a fee that utilizes shares outstanding as its settlement type
     */
    payout(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    /**
     * Settle the fee and calculate shares due
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     * @param _vaultProxy The VaultProxy of the fund
     */
    settle(
      _comptrollerProxy: PromiseOrValue<string>,
      _vaultProxy: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      arg4: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [number, string, BigNumber] & {
        settlementType_: number;
        sharesDue_: BigNumber;
      }
    >;

    /**
     * Unimplemented by default, can be overridden by fee
     * Update fee state after all settlement has occurred during a given fee hook
     */
    update(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      arg4: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'ActivatedForMigratedFund(address)'(
      comptrollerProxy?: PromiseOrValue<string> | null,
    ): ActivatedForMigratedFundEventFilter;
    ActivatedForMigratedFund(
      comptrollerProxy?: PromiseOrValue<string> | null,
    ): ActivatedForMigratedFundEventFilter;

    'FundSettingsAdded(address,uint256)'(
      comptrollerProxy?: PromiseOrValue<string> | null,
      scaledPerSecondRate?: null,
    ): FundSettingsAddedEventFilter;
    FundSettingsAdded(
      comptrollerProxy?: PromiseOrValue<string> | null,
      scaledPerSecondRate?: null,
    ): FundSettingsAddedEventFilter;

    'Settled(address,uint256,uint256)'(
      comptrollerProxy?: PromiseOrValue<string> | null,
      sharesQuantity?: null,
      secondsSinceSettlement?: null,
    ): SettledEventFilter;
    Settled(
      comptrollerProxy?: PromiseOrValue<string> | null,
      sharesQuantity?: null,
      secondsSinceSettlement?: null,
    ): SettledEventFilter;
  };

  estimateGas: {
    /**
     * Activates the fee for a fund
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     * @param _vaultProxy The VaultProxy of the fund
     */
    activateForFund(
      _comptrollerProxy: PromiseOrValue<string>,
      _vaultProxy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Add the initial fee settings for a fund
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     * @param _settingsData Encoded settings to apply to the fee for a fund
     */
    addFundSettings(
      _comptrollerProxy: PromiseOrValue<string>,
      _settingsData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Gets the feeInfo for a given fund
     * @param _comptrollerProxy The ComptrollerProxy contract of the fund
     */
    getFeeInfoForFund(
      _comptrollerProxy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    /**
     * Gets the `FEE_MANAGER` variable
     */
    getFeeManager(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Provides a constant string identifier for a fee
     */
    identifier(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Used only during fee registration
     * Gets the hooks that are implemented by the fee
     */
    implementedHooks(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns false by default, can be overridden by fee
     * Runs payout logic for a fee that utilizes shares outstanding as its settlement type
     */
    payout(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Settle the fee and calculate shares due
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     * @param _vaultProxy The VaultProxy of the fund
     */
    settle(
      _comptrollerProxy: PromiseOrValue<string>,
      _vaultProxy: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      arg4: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Unimplemented by default, can be overridden by fee
     * Update fee state after all settlement has occurred during a given fee hook
     */
    update(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      arg4: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Activates the fee for a fund
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     * @param _vaultProxy The VaultProxy of the fund
     */
    activateForFund(
      _comptrollerProxy: PromiseOrValue<string>,
      _vaultProxy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Add the initial fee settings for a fund
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     * @param _settingsData Encoded settings to apply to the fee for a fund
     */
    addFundSettings(
      _comptrollerProxy: PromiseOrValue<string>,
      _settingsData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the feeInfo for a given fund
     * @param _comptrollerProxy The ComptrollerProxy contract of the fund
     */
    getFeeInfoForFund(
      _comptrollerProxy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the `FEE_MANAGER` variable
     */
    getFeeManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Provides a constant string identifier for a fee
     */
    identifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Used only during fee registration
     * Gets the hooks that are implemented by the fee
     */
    implementedHooks(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns false by default, can be overridden by fee
     * Runs payout logic for a fee that utilizes shares outstanding as its settlement type
     */
    payout(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Settle the fee and calculate shares due
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     * @param _vaultProxy The VaultProxy of the fund
     */
    settle(
      _comptrollerProxy: PromiseOrValue<string>,
      _vaultProxy: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      arg4: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Unimplemented by default, can be overridden by fee
     * Update fee state after all settlement has occurred during a given fee hook
     */
    update(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      arg4: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
