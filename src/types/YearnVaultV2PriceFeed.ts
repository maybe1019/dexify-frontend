/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common';

export interface YearnVaultV2PriceFeedInterface extends utils.Interface {
  functions: {
    'addDerivatives(address[],address[])': FunctionFragment;
    'calcUnderlyingValues(address,uint256)': FunctionFragment;
    'getFundDeployer()': FunctionFragment;
    'getOwner()': FunctionFragment;
    'getUnderlyingForDerivative(address)': FunctionFragment;
    'getYearnVaultV2Registry()': FunctionFragment;
    'isSupportedAsset(address)': FunctionFragment;
    'removeDerivatives(address[])': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'addDerivatives'
      | 'calcUnderlyingValues'
      | 'getFundDeployer'
      | 'getOwner'
      | 'getUnderlyingForDerivative'
      | 'getYearnVaultV2Registry'
      | 'isSupportedAsset'
      | 'removeDerivatives',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'addDerivatives',
    values: [PromiseOrValue<string>[], PromiseOrValue<string>[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'calcUnderlyingValues',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getFundDeployer',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'getOwner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getUnderlyingForDerivative',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getYearnVaultV2Registry',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'isSupportedAsset',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'removeDerivatives',
    values: [PromiseOrValue<string>[]],
  ): string;

  decodeFunctionResult(
    functionFragment: 'addDerivatives',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'calcUnderlyingValues',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getFundDeployer',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'getOwner', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getUnderlyingForDerivative',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getYearnVaultV2Registry',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'isSupportedAsset',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'removeDerivatives',
    data: BytesLike,
  ): Result;

  events: {
    'DerivativeAdded(address,address)': EventFragment;
    'DerivativeRemoved(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'DerivativeAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DerivativeRemoved'): EventFragment;
}

export interface DerivativeAddedEventObject {
  derivative: string;
  underlying: string;
}
export type DerivativeAddedEvent = TypedEvent<
  [string, string],
  DerivativeAddedEventObject
>;

export type DerivativeAddedEventFilter = TypedEventFilter<DerivativeAddedEvent>;

export interface DerivativeRemovedEventObject {
  derivative: string;
}
export type DerivativeRemovedEvent = TypedEvent<
  [string],
  DerivativeRemovedEventObject
>;

export type DerivativeRemovedEventFilter =
  TypedEventFilter<DerivativeRemovedEvent>;

export interface YearnVaultV2PriceFeed extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: YearnVaultV2PriceFeedInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Adds derivatives with corresponding underlyings to the price feed
     * @param _derivatives The derivatives to add
     * @param _underlyings The corresponding underlyings to add
     */
    addDerivatives(
      _derivatives: PromiseOrValue<string>[],
      _underlyings: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Converts a given amount of a derivative to its underlying asset values
     * @param _derivative The derivative to convert
     * @param _derivativeAmount The amount of the derivative to convert
     */
    calcUnderlyingValues(
      _derivative: PromiseOrValue<string>,
      _derivativeAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Gets the `FUND_DEPLOYER` variable
     */
    getFundDeployer(
      overrides?: CallOverrides,
    ): Promise<[string] & { fundDeployer_: string }>;

    /**
     * Ownership is deferred to the owner of the FundDeployer contract
     * Gets the owner of this contract
     */
    getOwner(overrides?: CallOverrides): Promise<[string] & { owner_: string }>;

    /**
     * Gets the underlying asset for a given derivative
     * @param _derivative The derivative for which to get the underlying asset
     */
    getUnderlyingForDerivative(
      _derivative: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[string] & { underlying_: string }>;

    /**
     * Gets the `YEARN_VAULT_V2_REGISTRY` variable
     */
    getYearnVaultV2Registry(
      overrides?: CallOverrides,
    ): Promise<[string] & { yearnVaultV2Registry_: string }>;

    /**
     * Checks if an asset is supported by the price feed
     * @param _asset The asset to check
     */
    isSupportedAsset(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean] & { isSupported_: boolean }>;

    /**
     * Removes derivatives from the price feed
     * @param _derivatives The derivatives to remove
     */
    removeDerivatives(
      _derivatives: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  /**
   * Adds derivatives with corresponding underlyings to the price feed
   * @param _derivatives The derivatives to add
   * @param _underlyings The corresponding underlyings to add
   */
  addDerivatives(
    _derivatives: PromiseOrValue<string>[],
    _underlyings: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Converts a given amount of a derivative to its underlying asset values
   * @param _derivative The derivative to convert
   * @param _derivativeAmount The amount of the derivative to convert
   */
  calcUnderlyingValues(
    _derivative: PromiseOrValue<string>,
    _derivativeAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Gets the `FUND_DEPLOYER` variable
   */
  getFundDeployer(overrides?: CallOverrides): Promise<string>;

  /**
   * Ownership is deferred to the owner of the FundDeployer contract
   * Gets the owner of this contract
   */
  getOwner(overrides?: CallOverrides): Promise<string>;

  /**
   * Gets the underlying asset for a given derivative
   * @param _derivative The derivative for which to get the underlying asset
   */
  getUnderlyingForDerivative(
    _derivative: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<string>;

  /**
   * Gets the `YEARN_VAULT_V2_REGISTRY` variable
   */
  getYearnVaultV2Registry(overrides?: CallOverrides): Promise<string>;

  /**
   * Checks if an asset is supported by the price feed
   * @param _asset The asset to check
   */
  isSupportedAsset(
    _asset: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  /**
   * Removes derivatives from the price feed
   * @param _derivatives The derivatives to remove
   */
  removeDerivatives(
    _derivatives: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * Adds derivatives with corresponding underlyings to the price feed
     * @param _derivatives The derivatives to add
     * @param _underlyings The corresponding underlyings to add
     */
    addDerivatives(
      _derivatives: PromiseOrValue<string>[],
      _underlyings: PromiseOrValue<string>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    /**
     * Converts a given amount of a derivative to its underlying asset values
     * @param _derivative The derivative to convert
     * @param _derivativeAmount The amount of the derivative to convert
     */
    calcUnderlyingValues(
      _derivative: PromiseOrValue<string>,
      _derivativeAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [string[], BigNumber[]] & {
        underlyings_: string[];
        underlyingAmounts_: BigNumber[];
      }
    >;

    /**
     * Gets the `FUND_DEPLOYER` variable
     */
    getFundDeployer(overrides?: CallOverrides): Promise<string>;

    /**
     * Ownership is deferred to the owner of the FundDeployer contract
     * Gets the owner of this contract
     */
    getOwner(overrides?: CallOverrides): Promise<string>;

    /**
     * Gets the underlying asset for a given derivative
     * @param _derivative The derivative for which to get the underlying asset
     */
    getUnderlyingForDerivative(
      _derivative: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<string>;

    /**
     * Gets the `YEARN_VAULT_V2_REGISTRY` variable
     */
    getYearnVaultV2Registry(overrides?: CallOverrides): Promise<string>;

    /**
     * Checks if an asset is supported by the price feed
     * @param _asset The asset to check
     */
    isSupportedAsset(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    /**
     * Removes derivatives from the price feed
     * @param _derivatives The derivatives to remove
     */
    removeDerivatives(
      _derivatives: PromiseOrValue<string>[],
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'DerivativeAdded(address,address)'(
      derivative?: PromiseOrValue<string> | null,
      underlying?: PromiseOrValue<string> | null,
    ): DerivativeAddedEventFilter;
    DerivativeAdded(
      derivative?: PromiseOrValue<string> | null,
      underlying?: PromiseOrValue<string> | null,
    ): DerivativeAddedEventFilter;

    'DerivativeRemoved(address)'(
      derivative?: PromiseOrValue<string> | null,
    ): DerivativeRemovedEventFilter;
    DerivativeRemoved(
      derivative?: PromiseOrValue<string> | null,
    ): DerivativeRemovedEventFilter;
  };

  estimateGas: {
    /**
     * Adds derivatives with corresponding underlyings to the price feed
     * @param _derivatives The derivatives to add
     * @param _underlyings The corresponding underlyings to add
     */
    addDerivatives(
      _derivatives: PromiseOrValue<string>[],
      _underlyings: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Converts a given amount of a derivative to its underlying asset values
     * @param _derivative The derivative to convert
     * @param _derivativeAmount The amount of the derivative to convert
     */
    calcUnderlyingValues(
      _derivative: PromiseOrValue<string>,
      _derivativeAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Gets the `FUND_DEPLOYER` variable
     */
    getFundDeployer(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Ownership is deferred to the owner of the FundDeployer contract
     * Gets the owner of this contract
     */
    getOwner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the underlying asset for a given derivative
     * @param _derivative The derivative for which to get the underlying asset
     */
    getUnderlyingForDerivative(
      _derivative: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    /**
     * Gets the `YEARN_VAULT_V2_REGISTRY` variable
     */
    getYearnVaultV2Registry(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Checks if an asset is supported by the price feed
     * @param _asset The asset to check
     */
    isSupportedAsset(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    /**
     * Removes derivatives from the price feed
     * @param _derivatives The derivatives to remove
     */
    removeDerivatives(
      _derivatives: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Adds derivatives with corresponding underlyings to the price feed
     * @param _derivatives The derivatives to add
     * @param _underlyings The corresponding underlyings to add
     */
    addDerivatives(
      _derivatives: PromiseOrValue<string>[],
      _underlyings: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Converts a given amount of a derivative to its underlying asset values
     * @param _derivative The derivative to convert
     * @param _derivativeAmount The amount of the derivative to convert
     */
    calcUnderlyingValues(
      _derivative: PromiseOrValue<string>,
      _derivativeAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the `FUND_DEPLOYER` variable
     */
    getFundDeployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Ownership is deferred to the owner of the FundDeployer contract
     * Gets the owner of this contract
     */
    getOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Gets the underlying asset for a given derivative
     * @param _derivative The derivative for which to get the underlying asset
     */
    getUnderlyingForDerivative(
      _derivative: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the `YEARN_VAULT_V2_REGISTRY` variable
     */
    getYearnVaultV2Registry(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    /**
     * Checks if an asset is supported by the price feed
     * @param _asset The asset to check
     */
    isSupportedAsset(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    /**
     * Removes derivatives from the price feed
     * @param _derivatives The derivatives to remove
     */
    removeDerivatives(
      _derivatives: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
