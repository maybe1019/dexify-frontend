/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common';

export interface FeeManagerInterface extends utils.Interface {
  functions: {
    'activateForFund(bool)': FunctionFragment;
    'deactivateForFund()': FunctionFragment;
    'deregisterFees(address[])': FunctionFragment;
    'feeSettlesOnHook(address,uint8)': FunctionFragment;
    'feeUpdatesOnHook(address,uint8)': FunctionFragment;
    'feeUsesGavOnSettle(address)': FunctionFragment;
    'feeUsesGavOnUpdate(address)': FunctionFragment;
    'getEnabledFeesForFund(address)': FunctionFragment;
    'getFeeSharesOutstandingForFund(address,address)': FunctionFragment;
    'getFundDeployer()': FunctionFragment;
    'getOwner()': FunctionFragment;
    'getRegisteredFees()': FunctionFragment;
    'getVaultProxyForFund(address)': FunctionFragment;
    'invokeHook(uint8,bytes,uint256)': FunctionFragment;
    'isRegisteredFee(address)': FunctionFragment;
    'receiveCallFromComptroller(address,uint256,bytes)': FunctionFragment;
    'registerFees(address[])': FunctionFragment;
    'setConfigForFund(bytes)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'activateForFund'
      | 'deactivateForFund'
      | 'deregisterFees'
      | 'feeSettlesOnHook'
      | 'feeUpdatesOnHook'
      | 'feeUsesGavOnSettle'
      | 'feeUsesGavOnUpdate'
      | 'getEnabledFeesForFund'
      | 'getFeeSharesOutstandingForFund'
      | 'getFundDeployer'
      | 'getOwner'
      | 'getRegisteredFees'
      | 'getVaultProxyForFund'
      | 'invokeHook'
      | 'isRegisteredFee'
      | 'receiveCallFromComptroller'
      | 'registerFees'
      | 'setConfigForFund',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'activateForFund',
    values: [PromiseOrValue<boolean>],
  ): string;
  encodeFunctionData(
    functionFragment: 'deactivateForFund',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'deregisterFees',
    values: [PromiseOrValue<string>[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'feeSettlesOnHook',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'feeUpdatesOnHook',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'feeUsesGavOnSettle',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'feeUsesGavOnUpdate',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getEnabledFeesForFund',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getFeeSharesOutstandingForFund',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getFundDeployer',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'getOwner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getRegisteredFees',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getVaultProxyForFund',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'invokeHook',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'isRegisteredFee',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'receiveCallFromComptroller',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'registerFees',
    values: [PromiseOrValue<string>[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'setConfigForFund',
    values: [PromiseOrValue<BytesLike>],
  ): string;

  decodeFunctionResult(
    functionFragment: 'activateForFund',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'deactivateForFund',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'deregisterFees',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'feeSettlesOnHook',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'feeUpdatesOnHook',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'feeUsesGavOnSettle',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'feeUsesGavOnUpdate',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getEnabledFeesForFund',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getFeeSharesOutstandingForFund',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getFundDeployer',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'getOwner', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getRegisteredFees',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getVaultProxyForFund',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'invokeHook', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'isRegisteredFee',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'receiveCallFromComptroller',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'registerFees',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setConfigForFund',
    data: BytesLike,
  ): Result;

  events: {
    'AllSharesOutstandingForcePaidForFund(address,address,uint256)': EventFragment;
    'FeeDeregistered(address,string)': EventFragment;
    'FeeEnabledForFund(address,address,bytes)': EventFragment;
    'FeeRegistered(address,string,uint8[],uint8[],bool,bool)': EventFragment;
    'FeeSettledForFund(address,address,uint8,address,address,uint256)': EventFragment;
    'FeesRecipientSetForFund(address,address,address)': EventFragment;
    'SharesOutstandingPaidForFund(address,address,uint256)': EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: 'AllSharesOutstandingForcePaidForFund',
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FeeDeregistered'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FeeEnabledForFund'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FeeRegistered'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FeeSettledForFund'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FeesRecipientSetForFund'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'SharesOutstandingPaidForFund',
  ): EventFragment;
}

export interface AllSharesOutstandingForcePaidForFundEventObject {
  comptrollerProxy: string;
  payee: string;
  sharesDue: BigNumber;
}
export type AllSharesOutstandingForcePaidForFundEvent = TypedEvent<
  [string, string, BigNumber],
  AllSharesOutstandingForcePaidForFundEventObject
>;

export type AllSharesOutstandingForcePaidForFundEventFilter =
  TypedEventFilter<AllSharesOutstandingForcePaidForFundEvent>;

export interface FeeDeregisteredEventObject {
  fee: string;
  identifier: string;
}
export type FeeDeregisteredEvent = TypedEvent<
  [string, string],
  FeeDeregisteredEventObject
>;

export type FeeDeregisteredEventFilter = TypedEventFilter<FeeDeregisteredEvent>;

export interface FeeEnabledForFundEventObject {
  comptrollerProxy: string;
  fee: string;
  settingsData: string;
}
export type FeeEnabledForFundEvent = TypedEvent<
  [string, string, string],
  FeeEnabledForFundEventObject
>;

export type FeeEnabledForFundEventFilter =
  TypedEventFilter<FeeEnabledForFundEvent>;

export interface FeeRegisteredEventObject {
  fee: string;
  identifier: string;
  implementedHooksForSettle: number[];
  implementedHooksForUpdate: number[];
  usesGavOnSettle: boolean;
  usesGavOnUpdate: boolean;
}
export type FeeRegisteredEvent = TypedEvent<
  [string, string, number[], number[], boolean, boolean],
  FeeRegisteredEventObject
>;

export type FeeRegisteredEventFilter = TypedEventFilter<FeeRegisteredEvent>;

export interface FeeSettledForFundEventObject {
  comptrollerProxy: string;
  fee: string;
  settlementType: number;
  payer: string;
  payee: string;
  sharesDue: BigNumber;
}
export type FeeSettledForFundEvent = TypedEvent<
  [string, string, number, string, string, BigNumber],
  FeeSettledForFundEventObject
>;

export type FeeSettledForFundEventFilter =
  TypedEventFilter<FeeSettledForFundEvent>;

export interface FeesRecipientSetForFundEventObject {
  comptrollerProxy: string;
  prevFeesRecipient: string;
  nextFeesRecipient: string;
}
export type FeesRecipientSetForFundEvent = TypedEvent<
  [string, string, string],
  FeesRecipientSetForFundEventObject
>;

export type FeesRecipientSetForFundEventFilter =
  TypedEventFilter<FeesRecipientSetForFundEvent>;

export interface SharesOutstandingPaidForFundEventObject {
  comptrollerProxy: string;
  fee: string;
  sharesDue: BigNumber;
}
export type SharesOutstandingPaidForFundEvent = TypedEvent<
  [string, string, BigNumber],
  SharesOutstandingPaidForFundEventObject
>;

export type SharesOutstandingPaidForFundEventFilter =
  TypedEventFilter<SharesOutstandingPaidForFundEvent>;

export interface FeeManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FeeManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Activate already-configured fees for use in the calling fund
     */
    activateForFund(
      arg0: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * msg.sender is validated during __invokeHook()
     * Deactivate fees for a fund
     */
    deactivateForFund(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Remove fees from the list of registered fees
     * @param _fees Addresses of fees to be deregistered
     */
    deregisterFees(
      _fees: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Checks if a fee implements settle() on a particular hook
     * @param _fee The address of the fee to check
     * @param _hook The FeeHook to check
     */
    feeSettlesOnHook(
      _fee: PromiseOrValue<string>,
      _hook: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[boolean] & { settlesOnHook_: boolean }>;

    /**
     * Checks if a fee implements update() on a particular hook
     * @param _fee The address of the fee to check
     * @param _hook The FeeHook to check
     */
    feeUpdatesOnHook(
      _fee: PromiseOrValue<string>,
      _hook: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[boolean] & { updatesOnHook_: boolean }>;

    /**
     * Checks if a fee uses GAV in its settle() implementation
     * @param _fee The address of the fee to check
     */
    feeUsesGavOnSettle(
      _fee: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean] & { usesGav_: boolean }>;

    /**
     * Checks if a fee uses GAV in its update() implementation
     * @param _fee The address of the fee to check
     */
    feeUsesGavOnUpdate(
      _fee: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean] & { usesGav_: boolean }>;

    /**
     * Get a list of enabled fees for a given fund
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     */
    getEnabledFeesForFund(
      _comptrollerProxy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[string[]] & { enabledFees_: string[] }>;

    /**
     * Get the amount of shares outstanding for a particular fee for a fund
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     * @param _fee The fee address
     */
    getFeeSharesOutstandingForFund(
      _comptrollerProxy: PromiseOrValue<string>,
      _fee: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { sharesOutstanding_: BigNumber }>;

    /**
     * Gets the `FUND_DEPLOYER` variable
     */
    getFundDeployer(
      overrides?: CallOverrides,
    ): Promise<[string] & { fundDeployer_: string }>;

    /**
     * Ownership is deferred to the owner of the FundDeployer contract
     * Gets the owner of this contract
     */
    getOwner(overrides?: CallOverrides): Promise<[string] & { owner_: string }>;

    /**
     * Get all registered fees
     */
    getRegisteredFees(
      overrides?: CallOverrides,
    ): Promise<[string[]] & { registeredFees_: string[] }>;

    /**
     * Gets the verified VaultProxy for a given ComptrollerProxy
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     */
    getVaultProxyForFund(
      _comptrollerProxy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[string] & { vaultProxy_: string }>;

    /**
     * Allows all fees for a particular FeeHook to implement settle() and update() logic
     * @param _gav The GAV for a fund if known in the invocating code, otherwise 0
     * @param _hook The FeeHook to invoke
     * @param _settlementData The encoded settlement parameters specific to the FeeHook
     */
    invokeHook(
      _hook: PromiseOrValue<BigNumberish>,
      _settlementData: PromiseOrValue<BytesLike>,
      _gav: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Check whether a fee is registered
     * @param _fee The address of the fee to check
     */
    isRegisteredFee(
      _fee: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean] & { isRegisteredFee_: boolean }>;

    /**
     * This is the only way to call a function on this contract that updates VaultProxy state. For both of these actions, any caller is allowed, so we don't use the caller param.
     * Receives a dispatched `callOnExtension` from a fund's ComptrollerProxy
     * @param _actionId An ID representing the desired action
     * @param _callArgs Encoded arguments specific to the _actionId
     */
    receiveCallFromComptroller(
      arg0: PromiseOrValue<string>,
      _actionId: PromiseOrValue<BigNumberish>,
      _callArgs: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Stores the hooks that a fee implements and whether each implementation uses GAV, which fronts the gas for calls to check if a hook is implemented, and guarantees that these hook implementation return values do not change post-registration.
     * Add fees to the list of registered fees
     * @param _fees Addresses of fees to be registered
     */
    registerFees(
      _fees: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Caller is expected to be a valid ComptrollerProxy, but there isn't a need to validate. The order of `fees` determines the order in which fees of the same FeeHook will be applied. It is recommended to run ManagementFee before PerformanceFee in order to achieve precise PerformanceFee calcs.
     * Enable and configure fees for use in the calling fund
     * @param _configData Encoded config data
     */
    setConfigForFund(
      _configData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  /**
   * Activate already-configured fees for use in the calling fund
   */
  activateForFund(
    arg0: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * msg.sender is validated during __invokeHook()
   * Deactivate fees for a fund
   */
  deactivateForFund(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Remove fees from the list of registered fees
   * @param _fees Addresses of fees to be deregistered
   */
  deregisterFees(
    _fees: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Checks if a fee implements settle() on a particular hook
   * @param _fee The address of the fee to check
   * @param _hook The FeeHook to check
   */
  feeSettlesOnHook(
    _fee: PromiseOrValue<string>,
    _hook: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  /**
   * Checks if a fee implements update() on a particular hook
   * @param _fee The address of the fee to check
   * @param _hook The FeeHook to check
   */
  feeUpdatesOnHook(
    _fee: PromiseOrValue<string>,
    _hook: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  /**
   * Checks if a fee uses GAV in its settle() implementation
   * @param _fee The address of the fee to check
   */
  feeUsesGavOnSettle(
    _fee: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  /**
   * Checks if a fee uses GAV in its update() implementation
   * @param _fee The address of the fee to check
   */
  feeUsesGavOnUpdate(
    _fee: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  /**
   * Get a list of enabled fees for a given fund
   * @param _comptrollerProxy The ComptrollerProxy of the fund
   */
  getEnabledFeesForFund(
    _comptrollerProxy: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<string[]>;

  /**
   * Get the amount of shares outstanding for a particular fee for a fund
   * @param _comptrollerProxy The ComptrollerProxy of the fund
   * @param _fee The fee address
   */
  getFeeSharesOutstandingForFund(
    _comptrollerProxy: PromiseOrValue<string>,
    _fee: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  /**
   * Gets the `FUND_DEPLOYER` variable
   */
  getFundDeployer(overrides?: CallOverrides): Promise<string>;

  /**
   * Ownership is deferred to the owner of the FundDeployer contract
   * Gets the owner of this contract
   */
  getOwner(overrides?: CallOverrides): Promise<string>;

  /**
   * Get all registered fees
   */
  getRegisteredFees(overrides?: CallOverrides): Promise<string[]>;

  /**
   * Gets the verified VaultProxy for a given ComptrollerProxy
   * @param _comptrollerProxy The ComptrollerProxy of the fund
   */
  getVaultProxyForFund(
    _comptrollerProxy: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<string>;

  /**
   * Allows all fees for a particular FeeHook to implement settle() and update() logic
   * @param _gav The GAV for a fund if known in the invocating code, otherwise 0
   * @param _hook The FeeHook to invoke
   * @param _settlementData The encoded settlement parameters specific to the FeeHook
   */
  invokeHook(
    _hook: PromiseOrValue<BigNumberish>,
    _settlementData: PromiseOrValue<BytesLike>,
    _gav: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Check whether a fee is registered
   * @param _fee The address of the fee to check
   */
  isRegisteredFee(
    _fee: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  /**
   * This is the only way to call a function on this contract that updates VaultProxy state. For both of these actions, any caller is allowed, so we don't use the caller param.
   * Receives a dispatched `callOnExtension` from a fund's ComptrollerProxy
   * @param _actionId An ID representing the desired action
   * @param _callArgs Encoded arguments specific to the _actionId
   */
  receiveCallFromComptroller(
    arg0: PromiseOrValue<string>,
    _actionId: PromiseOrValue<BigNumberish>,
    _callArgs: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Stores the hooks that a fee implements and whether each implementation uses GAV, which fronts the gas for calls to check if a hook is implemented, and guarantees that these hook implementation return values do not change post-registration.
   * Add fees to the list of registered fees
   * @param _fees Addresses of fees to be registered
   */
  registerFees(
    _fees: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Caller is expected to be a valid ComptrollerProxy, but there isn't a need to validate. The order of `fees` determines the order in which fees of the same FeeHook will be applied. It is recommended to run ManagementFee before PerformanceFee in order to achieve precise PerformanceFee calcs.
   * Enable and configure fees for use in the calling fund
   * @param _configData Encoded config data
   */
  setConfigForFund(
    _configData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * Activate already-configured fees for use in the calling fund
     */
    activateForFund(
      arg0: PromiseOrValue<boolean>,
      overrides?: CallOverrides,
    ): Promise<void>;

    /**
     * msg.sender is validated during __invokeHook()
     * Deactivate fees for a fund
     */
    deactivateForFund(overrides?: CallOverrides): Promise<void>;

    /**
     * Remove fees from the list of registered fees
     * @param _fees Addresses of fees to be deregistered
     */
    deregisterFees(
      _fees: PromiseOrValue<string>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    /**
     * Checks if a fee implements settle() on a particular hook
     * @param _fee The address of the fee to check
     * @param _hook The FeeHook to check
     */
    feeSettlesOnHook(
      _fee: PromiseOrValue<string>,
      _hook: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    /**
     * Checks if a fee implements update() on a particular hook
     * @param _fee The address of the fee to check
     * @param _hook The FeeHook to check
     */
    feeUpdatesOnHook(
      _fee: PromiseOrValue<string>,
      _hook: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    /**
     * Checks if a fee uses GAV in its settle() implementation
     * @param _fee The address of the fee to check
     */
    feeUsesGavOnSettle(
      _fee: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    /**
     * Checks if a fee uses GAV in its update() implementation
     * @param _fee The address of the fee to check
     */
    feeUsesGavOnUpdate(
      _fee: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    /**
     * Get a list of enabled fees for a given fund
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     */
    getEnabledFeesForFund(
      _comptrollerProxy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<string[]>;

    /**
     * Get the amount of shares outstanding for a particular fee for a fund
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     * @param _fee The fee address
     */
    getFeeSharesOutstandingForFund(
      _comptrollerProxy: PromiseOrValue<string>,
      _fee: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    /**
     * Gets the `FUND_DEPLOYER` variable
     */
    getFundDeployer(overrides?: CallOverrides): Promise<string>;

    /**
     * Ownership is deferred to the owner of the FundDeployer contract
     * Gets the owner of this contract
     */
    getOwner(overrides?: CallOverrides): Promise<string>;

    /**
     * Get all registered fees
     */
    getRegisteredFees(overrides?: CallOverrides): Promise<string[]>;

    /**
     * Gets the verified VaultProxy for a given ComptrollerProxy
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     */
    getVaultProxyForFund(
      _comptrollerProxy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<string>;

    /**
     * Allows all fees for a particular FeeHook to implement settle() and update() logic
     * @param _gav The GAV for a fund if known in the invocating code, otherwise 0
     * @param _hook The FeeHook to invoke
     * @param _settlementData The encoded settlement parameters specific to the FeeHook
     */
    invokeHook(
      _hook: PromiseOrValue<BigNumberish>,
      _settlementData: PromiseOrValue<BytesLike>,
      _gav: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    /**
     * Check whether a fee is registered
     * @param _fee The address of the fee to check
     */
    isRegisteredFee(
      _fee: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    /**
     * This is the only way to call a function on this contract that updates VaultProxy state. For both of these actions, any caller is allowed, so we don't use the caller param.
     * Receives a dispatched `callOnExtension` from a fund's ComptrollerProxy
     * @param _actionId An ID representing the desired action
     * @param _callArgs Encoded arguments specific to the _actionId
     */
    receiveCallFromComptroller(
      arg0: PromiseOrValue<string>,
      _actionId: PromiseOrValue<BigNumberish>,
      _callArgs: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    /**
     * Stores the hooks that a fee implements and whether each implementation uses GAV, which fronts the gas for calls to check if a hook is implemented, and guarantees that these hook implementation return values do not change post-registration.
     * Add fees to the list of registered fees
     * @param _fees Addresses of fees to be registered
     */
    registerFees(
      _fees: PromiseOrValue<string>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    /**
     * Caller is expected to be a valid ComptrollerProxy, but there isn't a need to validate. The order of `fees` determines the order in which fees of the same FeeHook will be applied. It is recommended to run ManagementFee before PerformanceFee in order to achieve precise PerformanceFee calcs.
     * Enable and configure fees for use in the calling fund
     * @param _configData Encoded config data
     */
    setConfigForFund(
      _configData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'AllSharesOutstandingForcePaidForFund(address,address,uint256)'(
      comptrollerProxy?: PromiseOrValue<string> | null,
      payee?: null,
      sharesDue?: null,
    ): AllSharesOutstandingForcePaidForFundEventFilter;
    AllSharesOutstandingForcePaidForFund(
      comptrollerProxy?: PromiseOrValue<string> | null,
      payee?: null,
      sharesDue?: null,
    ): AllSharesOutstandingForcePaidForFundEventFilter;

    'FeeDeregistered(address,string)'(
      fee?: PromiseOrValue<string> | null,
      identifier?: PromiseOrValue<string> | null,
    ): FeeDeregisteredEventFilter;
    FeeDeregistered(
      fee?: PromiseOrValue<string> | null,
      identifier?: PromiseOrValue<string> | null,
    ): FeeDeregisteredEventFilter;

    'FeeEnabledForFund(address,address,bytes)'(
      comptrollerProxy?: PromiseOrValue<string> | null,
      fee?: PromiseOrValue<string> | null,
      settingsData?: null,
    ): FeeEnabledForFundEventFilter;
    FeeEnabledForFund(
      comptrollerProxy?: PromiseOrValue<string> | null,
      fee?: PromiseOrValue<string> | null,
      settingsData?: null,
    ): FeeEnabledForFundEventFilter;

    'FeeRegistered(address,string,uint8[],uint8[],bool,bool)'(
      fee?: PromiseOrValue<string> | null,
      identifier?: PromiseOrValue<string> | null,
      implementedHooksForSettle?: null,
      implementedHooksForUpdate?: null,
      usesGavOnSettle?: null,
      usesGavOnUpdate?: null,
    ): FeeRegisteredEventFilter;
    FeeRegistered(
      fee?: PromiseOrValue<string> | null,
      identifier?: PromiseOrValue<string> | null,
      implementedHooksForSettle?: null,
      implementedHooksForUpdate?: null,
      usesGavOnSettle?: null,
      usesGavOnUpdate?: null,
    ): FeeRegisteredEventFilter;

    'FeeSettledForFund(address,address,uint8,address,address,uint256)'(
      comptrollerProxy?: PromiseOrValue<string> | null,
      fee?: PromiseOrValue<string> | null,
      settlementType?: PromiseOrValue<BigNumberish> | null,
      payer?: null,
      payee?: null,
      sharesDue?: null,
    ): FeeSettledForFundEventFilter;
    FeeSettledForFund(
      comptrollerProxy?: PromiseOrValue<string> | null,
      fee?: PromiseOrValue<string> | null,
      settlementType?: PromiseOrValue<BigNumberish> | null,
      payer?: null,
      payee?: null,
      sharesDue?: null,
    ): FeeSettledForFundEventFilter;

    'FeesRecipientSetForFund(address,address,address)'(
      comptrollerProxy?: PromiseOrValue<string> | null,
      prevFeesRecipient?: null,
      nextFeesRecipient?: null,
    ): FeesRecipientSetForFundEventFilter;
    FeesRecipientSetForFund(
      comptrollerProxy?: PromiseOrValue<string> | null,
      prevFeesRecipient?: null,
      nextFeesRecipient?: null,
    ): FeesRecipientSetForFundEventFilter;

    'SharesOutstandingPaidForFund(address,address,uint256)'(
      comptrollerProxy?: PromiseOrValue<string> | null,
      fee?: PromiseOrValue<string> | null,
      sharesDue?: null,
    ): SharesOutstandingPaidForFundEventFilter;
    SharesOutstandingPaidForFund(
      comptrollerProxy?: PromiseOrValue<string> | null,
      fee?: PromiseOrValue<string> | null,
      sharesDue?: null,
    ): SharesOutstandingPaidForFundEventFilter;
  };

  estimateGas: {
    /**
     * Activate already-configured fees for use in the calling fund
     */
    activateForFund(
      arg0: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * msg.sender is validated during __invokeHook()
     * Deactivate fees for a fund
     */
    deactivateForFund(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Remove fees from the list of registered fees
     * @param _fees Addresses of fees to be deregistered
     */
    deregisterFees(
      _fees: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Checks if a fee implements settle() on a particular hook
     * @param _fee The address of the fee to check
     * @param _hook The FeeHook to check
     */
    feeSettlesOnHook(
      _fee: PromiseOrValue<string>,
      _hook: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    /**
     * Checks if a fee implements update() on a particular hook
     * @param _fee The address of the fee to check
     * @param _hook The FeeHook to check
     */
    feeUpdatesOnHook(
      _fee: PromiseOrValue<string>,
      _hook: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    /**
     * Checks if a fee uses GAV in its settle() implementation
     * @param _fee The address of the fee to check
     */
    feeUsesGavOnSettle(
      _fee: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    /**
     * Checks if a fee uses GAV in its update() implementation
     * @param _fee The address of the fee to check
     */
    feeUsesGavOnUpdate(
      _fee: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    /**
     * Get a list of enabled fees for a given fund
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     */
    getEnabledFeesForFund(
      _comptrollerProxy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    /**
     * Get the amount of shares outstanding for a particular fee for a fund
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     * @param _fee The fee address
     */
    getFeeSharesOutstandingForFund(
      _comptrollerProxy: PromiseOrValue<string>,
      _fee: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    /**
     * Gets the `FUND_DEPLOYER` variable
     */
    getFundDeployer(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Ownership is deferred to the owner of the FundDeployer contract
     * Gets the owner of this contract
     */
    getOwner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Get all registered fees
     */
    getRegisteredFees(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the verified VaultProxy for a given ComptrollerProxy
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     */
    getVaultProxyForFund(
      _comptrollerProxy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    /**
     * Allows all fees for a particular FeeHook to implement settle() and update() logic
     * @param _gav The GAV for a fund if known in the invocating code, otherwise 0
     * @param _hook The FeeHook to invoke
     * @param _settlementData The encoded settlement parameters specific to the FeeHook
     */
    invokeHook(
      _hook: PromiseOrValue<BigNumberish>,
      _settlementData: PromiseOrValue<BytesLike>,
      _gav: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Check whether a fee is registered
     * @param _fee The address of the fee to check
     */
    isRegisteredFee(
      _fee: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    /**
     * This is the only way to call a function on this contract that updates VaultProxy state. For both of these actions, any caller is allowed, so we don't use the caller param.
     * Receives a dispatched `callOnExtension` from a fund's ComptrollerProxy
     * @param _actionId An ID representing the desired action
     * @param _callArgs Encoded arguments specific to the _actionId
     */
    receiveCallFromComptroller(
      arg0: PromiseOrValue<string>,
      _actionId: PromiseOrValue<BigNumberish>,
      _callArgs: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Stores the hooks that a fee implements and whether each implementation uses GAV, which fronts the gas for calls to check if a hook is implemented, and guarantees that these hook implementation return values do not change post-registration.
     * Add fees to the list of registered fees
     * @param _fees Addresses of fees to be registered
     */
    registerFees(
      _fees: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Caller is expected to be a valid ComptrollerProxy, but there isn't a need to validate. The order of `fees` determines the order in which fees of the same FeeHook will be applied. It is recommended to run ManagementFee before PerformanceFee in order to achieve precise PerformanceFee calcs.
     * Enable and configure fees for use in the calling fund
     * @param _configData Encoded config data
     */
    setConfigForFund(
      _configData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Activate already-configured fees for use in the calling fund
     */
    activateForFund(
      arg0: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * msg.sender is validated during __invokeHook()
     * Deactivate fees for a fund
     */
    deactivateForFund(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Remove fees from the list of registered fees
     * @param _fees Addresses of fees to be deregistered
     */
    deregisterFees(
      _fees: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Checks if a fee implements settle() on a particular hook
     * @param _fee The address of the fee to check
     * @param _hook The FeeHook to check
     */
    feeSettlesOnHook(
      _fee: PromiseOrValue<string>,
      _hook: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    /**
     * Checks if a fee implements update() on a particular hook
     * @param _fee The address of the fee to check
     * @param _hook The FeeHook to check
     */
    feeUpdatesOnHook(
      _fee: PromiseOrValue<string>,
      _hook: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    /**
     * Checks if a fee uses GAV in its settle() implementation
     * @param _fee The address of the fee to check
     */
    feeUsesGavOnSettle(
      _fee: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    /**
     * Checks if a fee uses GAV in its update() implementation
     * @param _fee The address of the fee to check
     */
    feeUsesGavOnUpdate(
      _fee: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    /**
     * Get a list of enabled fees for a given fund
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     */
    getEnabledFeesForFund(
      _comptrollerProxy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    /**
     * Get the amount of shares outstanding for a particular fee for a fund
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     * @param _fee The fee address
     */
    getFeeSharesOutstandingForFund(
      _comptrollerProxy: PromiseOrValue<string>,
      _fee: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the `FUND_DEPLOYER` variable
     */
    getFundDeployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Ownership is deferred to the owner of the FundDeployer contract
     * Gets the owner of this contract
     */
    getOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Get all registered fees
     */
    getRegisteredFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Gets the verified VaultProxy for a given ComptrollerProxy
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     */
    getVaultProxyForFund(
      _comptrollerProxy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    /**
     * Allows all fees for a particular FeeHook to implement settle() and update() logic
     * @param _gav The GAV for a fund if known in the invocating code, otherwise 0
     * @param _hook The FeeHook to invoke
     * @param _settlementData The encoded settlement parameters specific to the FeeHook
     */
    invokeHook(
      _hook: PromiseOrValue<BigNumberish>,
      _settlementData: PromiseOrValue<BytesLike>,
      _gav: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Check whether a fee is registered
     * @param _fee The address of the fee to check
     */
    isRegisteredFee(
      _fee: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    /**
     * This is the only way to call a function on this contract that updates VaultProxy state. For both of these actions, any caller is allowed, so we don't use the caller param.
     * Receives a dispatched `callOnExtension` from a fund's ComptrollerProxy
     * @param _actionId An ID representing the desired action
     * @param _callArgs Encoded arguments specific to the _actionId
     */
    receiveCallFromComptroller(
      arg0: PromiseOrValue<string>,
      _actionId: PromiseOrValue<BigNumberish>,
      _callArgs: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Stores the hooks that a fee implements and whether each implementation uses GAV, which fronts the gas for calls to check if a hook is implemented, and guarantees that these hook implementation return values do not change post-registration.
     * Add fees to the list of registered fees
     * @param _fees Addresses of fees to be registered
     */
    registerFees(
      _fees: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Caller is expected to be a valid ComptrollerProxy, but there isn't a need to validate. The order of `fees` determines the order in which fees of the same FeeHook will be applied. It is recommended to run ManagementFee before PerformanceFee in order to achieve precise PerformanceFee calcs.
     * Enable and configure fees for use in the calling fund
     * @param _configData Encoded config data
     */
    setConfigForFund(
      _configData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
