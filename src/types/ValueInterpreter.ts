/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common';

export interface ValueInterpreterInterface extends utils.Interface {
  functions: {
    'calcCanonicalAssetValue(address,uint256,address)': FunctionFragment;
    'calcCanonicalAssetsTotalValue(address[],uint256[],address)': FunctionFragment;
    'calcLiveAssetValue(address,uint256,address)': FunctionFragment;
    'calcLiveAssetsTotalValue(address[],uint256[],address)': FunctionFragment;
    'getAggregatedDerivativePriceFeed()': FunctionFragment;
    'getPrimitivePriceFeed()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'calcCanonicalAssetValue'
      | 'calcCanonicalAssetsTotalValue'
      | 'calcLiveAssetValue'
      | 'calcLiveAssetsTotalValue'
      | 'getAggregatedDerivativePriceFeed'
      | 'getPrimitivePriceFeed',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'calcCanonicalAssetValue',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'calcCanonicalAssetsTotalValue',
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'calcLiveAssetValue',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'calcLiveAssetsTotalValue',
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'getAggregatedDerivativePriceFeed',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getPrimitivePriceFeed',
    values?: undefined,
  ): string;

  decodeFunctionResult(
    functionFragment: 'calcCanonicalAssetValue',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'calcCanonicalAssetsTotalValue',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'calcLiveAssetValue',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'calcLiveAssetsTotalValue',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getAggregatedDerivativePriceFeed',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getPrimitivePriceFeed',
    data: BytesLike,
  ): Result;

  events: {};
}

export interface ValueInterpreter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ValueInterpreterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Does not alter protocol state, but not a view because calls to price feeds can potentially update third party state
     * Calculates the value of a given amount of one asset in terms of another asset
     * @param _amount The amount of the _baseAsset to convert
     * @param _baseAsset The asset from which to convert
     * @param _quoteAsset The asset to which to convert
     */
    calcCanonicalAssetValue(
      _baseAsset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _quoteAsset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Does not alter protocol state, but not a view because calls to price feeds can potentially update third party state
     * Calculates the total value of given amounts of assets in a single quote asset
     * @param _amounts The amounts of the _baseAssets to convert
     * @param _baseAssets The assets to convert
     * @param _quoteAsset The asset to which to convert
     */
    calcCanonicalAssetsTotalValue(
      _baseAssets: PromiseOrValue<string>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      _quoteAsset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * An alias of calcCanonicalAssetValue
     */
    calcLiveAssetValue(
      _baseAsset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _quoteAsset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * An alias of calcCanonicalAssetsTotalValue
     */
    calcLiveAssetsTotalValue(
      _baseAssets: PromiseOrValue<string>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      _quoteAsset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Gets the `AGGREGATED_DERIVATIVE_PRICE_FEED` variable
     */
    getAggregatedDerivativePriceFeed(
      overrides?: CallOverrides,
    ): Promise<[string] & { aggregatedDerivativePriceFeed_: string }>;

    /**
     * Gets the `PRIMITIVE_PRICE_FEED` variable
     */
    getPrimitivePriceFeed(
      overrides?: CallOverrides,
    ): Promise<[string] & { primitivePriceFeed_: string }>;
  };

  /**
   * Does not alter protocol state, but not a view because calls to price feeds can potentially update third party state
   * Calculates the value of a given amount of one asset in terms of another asset
   * @param _amount The amount of the _baseAsset to convert
   * @param _baseAsset The asset from which to convert
   * @param _quoteAsset The asset to which to convert
   */
  calcCanonicalAssetValue(
    _baseAsset: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _quoteAsset: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Does not alter protocol state, but not a view because calls to price feeds can potentially update third party state
   * Calculates the total value of given amounts of assets in a single quote asset
   * @param _amounts The amounts of the _baseAssets to convert
   * @param _baseAssets The assets to convert
   * @param _quoteAsset The asset to which to convert
   */
  calcCanonicalAssetsTotalValue(
    _baseAssets: PromiseOrValue<string>[],
    _amounts: PromiseOrValue<BigNumberish>[],
    _quoteAsset: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * An alias of calcCanonicalAssetValue
   */
  calcLiveAssetValue(
    _baseAsset: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _quoteAsset: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * An alias of calcCanonicalAssetsTotalValue
   */
  calcLiveAssetsTotalValue(
    _baseAssets: PromiseOrValue<string>[],
    _amounts: PromiseOrValue<BigNumberish>[],
    _quoteAsset: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Gets the `AGGREGATED_DERIVATIVE_PRICE_FEED` variable
   */
  getAggregatedDerivativePriceFeed(overrides?: CallOverrides): Promise<string>;

  /**
   * Gets the `PRIMITIVE_PRICE_FEED` variable
   */
  getPrimitivePriceFeed(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    /**
     * Does not alter protocol state, but not a view because calls to price feeds can potentially update third party state
     * Calculates the value of a given amount of one asset in terms of another asset
     * @param _amount The amount of the _baseAsset to convert
     * @param _baseAsset The asset from which to convert
     * @param _quoteAsset The asset to which to convert
     */
    calcCanonicalAssetValue(
      _baseAsset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _quoteAsset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, boolean] & { value_: BigNumber; isValid_: boolean }>;

    /**
     * Does not alter protocol state, but not a view because calls to price feeds can potentially update third party state
     * Calculates the total value of given amounts of assets in a single quote asset
     * @param _amounts The amounts of the _baseAssets to convert
     * @param _baseAssets The assets to convert
     * @param _quoteAsset The asset to which to convert
     */
    calcCanonicalAssetsTotalValue(
      _baseAssets: PromiseOrValue<string>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      _quoteAsset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, boolean] & { value_: BigNumber; isValid_: boolean }>;

    /**
     * An alias of calcCanonicalAssetValue
     */
    calcLiveAssetValue(
      _baseAsset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _quoteAsset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, boolean] & { value_: BigNumber; isValid_: boolean }>;

    /**
     * An alias of calcCanonicalAssetsTotalValue
     */
    calcLiveAssetsTotalValue(
      _baseAssets: PromiseOrValue<string>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      _quoteAsset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, boolean] & { value_: BigNumber; isValid_: boolean }>;

    /**
     * Gets the `AGGREGATED_DERIVATIVE_PRICE_FEED` variable
     */
    getAggregatedDerivativePriceFeed(
      overrides?: CallOverrides,
    ): Promise<string>;

    /**
     * Gets the `PRIMITIVE_PRICE_FEED` variable
     */
    getPrimitivePriceFeed(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    /**
     * Does not alter protocol state, but not a view because calls to price feeds can potentially update third party state
     * Calculates the value of a given amount of one asset in terms of another asset
     * @param _amount The amount of the _baseAsset to convert
     * @param _baseAsset The asset from which to convert
     * @param _quoteAsset The asset to which to convert
     */
    calcCanonicalAssetValue(
      _baseAsset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _quoteAsset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Does not alter protocol state, but not a view because calls to price feeds can potentially update third party state
     * Calculates the total value of given amounts of assets in a single quote asset
     * @param _amounts The amounts of the _baseAssets to convert
     * @param _baseAssets The assets to convert
     * @param _quoteAsset The asset to which to convert
     */
    calcCanonicalAssetsTotalValue(
      _baseAssets: PromiseOrValue<string>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      _quoteAsset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * An alias of calcCanonicalAssetValue
     */
    calcLiveAssetValue(
      _baseAsset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _quoteAsset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * An alias of calcCanonicalAssetsTotalValue
     */
    calcLiveAssetsTotalValue(
      _baseAssets: PromiseOrValue<string>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      _quoteAsset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Gets the `AGGREGATED_DERIVATIVE_PRICE_FEED` variable
     */
    getAggregatedDerivativePriceFeed(
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    /**
     * Gets the `PRIMITIVE_PRICE_FEED` variable
     */
    getPrimitivePriceFeed(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Does not alter protocol state, but not a view because calls to price feeds can potentially update third party state
     * Calculates the value of a given amount of one asset in terms of another asset
     * @param _amount The amount of the _baseAsset to convert
     * @param _baseAsset The asset from which to convert
     * @param _quoteAsset The asset to which to convert
     */
    calcCanonicalAssetValue(
      _baseAsset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _quoteAsset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Does not alter protocol state, but not a view because calls to price feeds can potentially update third party state
     * Calculates the total value of given amounts of assets in a single quote asset
     * @param _amounts The amounts of the _baseAssets to convert
     * @param _baseAssets The assets to convert
     * @param _quoteAsset The asset to which to convert
     */
    calcCanonicalAssetsTotalValue(
      _baseAssets: PromiseOrValue<string>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      _quoteAsset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * An alias of calcCanonicalAssetValue
     */
    calcLiveAssetValue(
      _baseAsset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _quoteAsset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * An alias of calcCanonicalAssetsTotalValue
     */
    calcLiveAssetsTotalValue(
      _baseAssets: PromiseOrValue<string>[],
      _amounts: PromiseOrValue<BigNumberish>[],
      _quoteAsset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the `AGGREGATED_DERIVATIVE_PRICE_FEED` variable
     */
    getAggregatedDerivativePriceFeed(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the `PRIMITIVE_PRICE_FEED` variable
     */
    getPrimitivePriceFeed(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;
  };
}
