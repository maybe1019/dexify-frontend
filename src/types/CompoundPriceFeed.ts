/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common';

export interface CompoundPriceFeedInterface extends utils.Interface {
  functions: {
    'addCTokens(address[])': FunctionFragment;
    'calcUnderlyingValues(address,uint256)': FunctionFragment;
    'getFundDeployer()': FunctionFragment;
    'getOwner()': FunctionFragment;
    'getTokenFromCToken(address)': FunctionFragment;
    'isSupportedAsset(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'addCTokens'
      | 'calcUnderlyingValues'
      | 'getFundDeployer'
      | 'getOwner'
      | 'getTokenFromCToken'
      | 'isSupportedAsset',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'addCTokens',
    values: [PromiseOrValue<string>[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'calcUnderlyingValues',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getFundDeployer',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'getOwner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getTokenFromCToken',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'isSupportedAsset',
    values: [PromiseOrValue<string>],
  ): string;

  decodeFunctionResult(functionFragment: 'addCTokens', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'calcUnderlyingValues',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getFundDeployer',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'getOwner', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getTokenFromCToken',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'isSupportedAsset',
    data: BytesLike,
  ): Result;

  events: {
    'CTokenAdded(address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'CTokenAdded'): EventFragment;
}

export interface CTokenAddedEventObject {
  cToken: string;
  token: string;
}
export type CTokenAddedEvent = TypedEvent<
  [string, string],
  CTokenAddedEventObject
>;

export type CTokenAddedEventFilter = TypedEventFilter<CTokenAddedEvent>;

export interface CompoundPriceFeed extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CompoundPriceFeedInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Only allows CERC20 tokens. CEther is set in the constructor.
     * Adds cTokens to the price feed
     * @param _cTokens cTokens to add
     */
    addCTokens(
      _cTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Converts a given amount of a derivative to its underlying asset values
     * @param _derivative The derivative to convert
     * @param _derivativeAmount The amount of the derivative to convert
     */
    calcUnderlyingValues(
      _derivative: PromiseOrValue<string>,
      _derivativeAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Gets the `FUND_DEPLOYER` variable
     */
    getFundDeployer(
      overrides?: CallOverrides,
    ): Promise<[string] & { fundDeployer_: string }>;

    /**
     * Ownership is deferred to the owner of the FundDeployer contract
     * Gets the owner of this contract
     */
    getOwner(overrides?: CallOverrides): Promise<[string] & { owner_: string }>;

    /**
     * Returns the underlying asset of a given cToken
     * @param _cToken The cToken for which to get the underlying asset
     */
    getTokenFromCToken(
      _cToken: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[string] & { token_: string }>;

    /**
     * Checks if an asset is supported by the price feed
     * @param _asset The asset to check
     */
    isSupportedAsset(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean] & { isSupported_: boolean }>;
  };

  /**
   * Only allows CERC20 tokens. CEther is set in the constructor.
   * Adds cTokens to the price feed
   * @param _cTokens cTokens to add
   */
  addCTokens(
    _cTokens: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Converts a given amount of a derivative to its underlying asset values
   * @param _derivative The derivative to convert
   * @param _derivativeAmount The amount of the derivative to convert
   */
  calcUnderlyingValues(
    _derivative: PromiseOrValue<string>,
    _derivativeAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Gets the `FUND_DEPLOYER` variable
   */
  getFundDeployer(overrides?: CallOverrides): Promise<string>;

  /**
   * Ownership is deferred to the owner of the FundDeployer contract
   * Gets the owner of this contract
   */
  getOwner(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the underlying asset of a given cToken
   * @param _cToken The cToken for which to get the underlying asset
   */
  getTokenFromCToken(
    _cToken: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<string>;

  /**
   * Checks if an asset is supported by the price feed
   * @param _asset The asset to check
   */
  isSupportedAsset(
    _asset: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  callStatic: {
    /**
     * Only allows CERC20 tokens. CEther is set in the constructor.
     * Adds cTokens to the price feed
     * @param _cTokens cTokens to add
     */
    addCTokens(
      _cTokens: PromiseOrValue<string>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    /**
     * Converts a given amount of a derivative to its underlying asset values
     * @param _derivative The derivative to convert
     * @param _derivativeAmount The amount of the derivative to convert
     */
    calcUnderlyingValues(
      _derivative: PromiseOrValue<string>,
      _derivativeAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [string[], BigNumber[]] & {
        underlyings_: string[];
        underlyingAmounts_: BigNumber[];
      }
    >;

    /**
     * Gets the `FUND_DEPLOYER` variable
     */
    getFundDeployer(overrides?: CallOverrides): Promise<string>;

    /**
     * Ownership is deferred to the owner of the FundDeployer contract
     * Gets the owner of this contract
     */
    getOwner(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the underlying asset of a given cToken
     * @param _cToken The cToken for which to get the underlying asset
     */
    getTokenFromCToken(
      _cToken: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<string>;

    /**
     * Checks if an asset is supported by the price feed
     * @param _asset The asset to check
     */
    isSupportedAsset(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>;
  };

  filters: {
    'CTokenAdded(address,address)'(
      cToken?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
    ): CTokenAddedEventFilter;
    CTokenAdded(
      cToken?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
    ): CTokenAddedEventFilter;
  };

  estimateGas: {
    /**
     * Only allows CERC20 tokens. CEther is set in the constructor.
     * Adds cTokens to the price feed
     * @param _cTokens cTokens to add
     */
    addCTokens(
      _cTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Converts a given amount of a derivative to its underlying asset values
     * @param _derivative The derivative to convert
     * @param _derivativeAmount The amount of the derivative to convert
     */
    calcUnderlyingValues(
      _derivative: PromiseOrValue<string>,
      _derivativeAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Gets the `FUND_DEPLOYER` variable
     */
    getFundDeployer(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Ownership is deferred to the owner of the FundDeployer contract
     * Gets the owner of this contract
     */
    getOwner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the underlying asset of a given cToken
     * @param _cToken The cToken for which to get the underlying asset
     */
    getTokenFromCToken(
      _cToken: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    /**
     * Checks if an asset is supported by the price feed
     * @param _asset The asset to check
     */
    isSupportedAsset(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Only allows CERC20 tokens. CEther is set in the constructor.
     * Adds cTokens to the price feed
     * @param _cTokens cTokens to add
     */
    addCTokens(
      _cTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Converts a given amount of a derivative to its underlying asset values
     * @param _derivative The derivative to convert
     * @param _derivativeAmount The amount of the derivative to convert
     */
    calcUnderlyingValues(
      _derivative: PromiseOrValue<string>,
      _derivativeAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the `FUND_DEPLOYER` variable
     */
    getFundDeployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Ownership is deferred to the owner of the FundDeployer contract
     * Gets the owner of this contract
     */
    getOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the underlying asset of a given cToken
     * @param _cToken The cToken for which to get the underlying asset
     */
    getTokenFromCToken(
      _cToken: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    /**
     * Checks if an asset is supported by the price feed
     * @param _asset The asset to check
     */
    isSupportedAsset(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;
  };
}
