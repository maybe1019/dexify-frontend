/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common';

export declare namespace UniswapV2PoolPriceFeed {
  export type PoolTokenInfoStruct = {
    token0: PromiseOrValue<string>;
    token1: PromiseOrValue<string>;
    token0Decimals: PromiseOrValue<BigNumberish>;
    token1Decimals: PromiseOrValue<BigNumberish>;
  };

  export type PoolTokenInfoStructOutput = [string, string, number, number] & {
    token0: string;
    token1: string;
    token0Decimals: number;
    token1Decimals: number;
  };
}

export interface UniswapV2PoolPriceFeedInterface extends utils.Interface {
  functions: {
    'addPoolTokens(address[])': FunctionFragment;
    'calcUnderlyingValues(address,uint256)': FunctionFragment;
    'getDerivativePriceFeed()': FunctionFragment;
    'getFactory()': FunctionFragment;
    'getFundDeployer()': FunctionFragment;
    'getOwner()': FunctionFragment;
    'getPoolTokenInfo(address)': FunctionFragment;
    'getPoolTokenUnderlyings(address)': FunctionFragment;
    'getPrimitivePriceFeed()': FunctionFragment;
    'getValueInterpreter()': FunctionFragment;
    'isSupportedAsset(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'addPoolTokens'
      | 'calcUnderlyingValues'
      | 'getDerivativePriceFeed'
      | 'getFactory'
      | 'getFundDeployer'
      | 'getOwner'
      | 'getPoolTokenInfo'
      | 'getPoolTokenUnderlyings'
      | 'getPrimitivePriceFeed'
      | 'getValueInterpreter'
      | 'isSupportedAsset',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'addPoolTokens',
    values: [PromiseOrValue<string>[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'calcUnderlyingValues',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getDerivativePriceFeed',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getFactory',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getFundDeployer',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'getOwner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getPoolTokenInfo',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getPoolTokenUnderlyings',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getPrimitivePriceFeed',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getValueInterpreter',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'isSupportedAsset',
    values: [PromiseOrValue<string>],
  ): string;

  decodeFunctionResult(
    functionFragment: 'addPoolTokens',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'calcUnderlyingValues',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getDerivativePriceFeed',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'getFactory', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getFundDeployer',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'getOwner', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getPoolTokenInfo',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getPoolTokenUnderlyings',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getPrimitivePriceFeed',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getValueInterpreter',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'isSupportedAsset',
    data: BytesLike,
  ): Result;

  events: {
    'PoolTokenAdded(address,address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'PoolTokenAdded'): EventFragment;
}

export interface PoolTokenAddedEventObject {
  poolToken: string;
  token0: string;
  token1: string;
}
export type PoolTokenAddedEvent = TypedEvent<
  [string, string, string],
  PoolTokenAddedEventObject
>;

export type PoolTokenAddedEventFilter = TypedEventFilter<PoolTokenAddedEvent>;

export interface UniswapV2PoolPriceFeed extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: UniswapV2PoolPriceFeedInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Adds Uniswap pool tokens to the price feed
     * @param _poolTokens Uniswap pool tokens to add
     */
    addPoolTokens(
      _poolTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Converts a given amount of a derivative to its underlying asset values
     * @param _derivative The derivative to convert
     * @param _derivativeAmount The amount of the derivative to convert
     */
    calcUnderlyingValues(
      _derivative: PromiseOrValue<string>,
      _derivativeAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Gets the `DERIVATIVE_PRICE_FEED` variable value
     */
    getDerivativePriceFeed(
      overrides?: CallOverrides,
    ): Promise<[string] & { derivativePriceFeed_: string }>;

    /**
     * Gets the `FACTORY` variable value
     */
    getFactory(
      overrides?: CallOverrides,
    ): Promise<[string] & { factory_: string }>;

    /**
     * Gets the `FUND_DEPLOYER` variable
     */
    getFundDeployer(
      overrides?: CallOverrides,
    ): Promise<[string] & { fundDeployer_: string }>;

    /**
     * Ownership is deferred to the owner of the FundDeployer contract
     * Gets the owner of this contract
     */
    getOwner(overrides?: CallOverrides): Promise<[string] & { owner_: string }>;

    /**
     * Gets the `PoolTokenInfo` for a given pool token
     * @param _poolToken The pool token for which to get the `PoolTokenInfo`
     */
    getPoolTokenInfo(
      _poolToken: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [UniswapV2PoolPriceFeed.PoolTokenInfoStructOutput] & {
        poolTokenInfo_: UniswapV2PoolPriceFeed.PoolTokenInfoStructOutput;
      }
    >;

    /**
     * Gets the underlyings for a given pool token
     * @param _poolToken The pool token for which to get its underlyings
     */
    getPoolTokenUnderlyings(
      _poolToken: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[string, string] & { token0_: string; token1_: string }>;

    /**
     * Gets the `PRIMITIVE_PRICE_FEED` variable value
     */
    getPrimitivePriceFeed(
      overrides?: CallOverrides,
    ): Promise<[string] & { primitivePriceFeed_: string }>;

    /**
     * Gets the `VALUE_INTERPRETER` variable value
     */
    getValueInterpreter(
      overrides?: CallOverrides,
    ): Promise<[string] & { valueInterpreter_: string }>;

    /**
     * Checks if an asset is supported by the price feed
     * @param _asset The asset to check
     */
    isSupportedAsset(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean] & { isSupported_: boolean }>;
  };

  /**
   * Adds Uniswap pool tokens to the price feed
   * @param _poolTokens Uniswap pool tokens to add
   */
  addPoolTokens(
    _poolTokens: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Converts a given amount of a derivative to its underlying asset values
   * @param _derivative The derivative to convert
   * @param _derivativeAmount The amount of the derivative to convert
   */
  calcUnderlyingValues(
    _derivative: PromiseOrValue<string>,
    _derivativeAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Gets the `DERIVATIVE_PRICE_FEED` variable value
   */
  getDerivativePriceFeed(overrides?: CallOverrides): Promise<string>;

  /**
   * Gets the `FACTORY` variable value
   */
  getFactory(overrides?: CallOverrides): Promise<string>;

  /**
   * Gets the `FUND_DEPLOYER` variable
   */
  getFundDeployer(overrides?: CallOverrides): Promise<string>;

  /**
   * Ownership is deferred to the owner of the FundDeployer contract
   * Gets the owner of this contract
   */
  getOwner(overrides?: CallOverrides): Promise<string>;

  /**
   * Gets the `PoolTokenInfo` for a given pool token
   * @param _poolToken The pool token for which to get the `PoolTokenInfo`
   */
  getPoolTokenInfo(
    _poolToken: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<UniswapV2PoolPriceFeed.PoolTokenInfoStructOutput>;

  /**
   * Gets the underlyings for a given pool token
   * @param _poolToken The pool token for which to get its underlyings
   */
  getPoolTokenUnderlyings(
    _poolToken: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<[string, string] & { token0_: string; token1_: string }>;

  /**
   * Gets the `PRIMITIVE_PRICE_FEED` variable value
   */
  getPrimitivePriceFeed(overrides?: CallOverrides): Promise<string>;

  /**
   * Gets the `VALUE_INTERPRETER` variable value
   */
  getValueInterpreter(overrides?: CallOverrides): Promise<string>;

  /**
   * Checks if an asset is supported by the price feed
   * @param _asset The asset to check
   */
  isSupportedAsset(
    _asset: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  callStatic: {
    /**
     * Adds Uniswap pool tokens to the price feed
     * @param _poolTokens Uniswap pool tokens to add
     */
    addPoolTokens(
      _poolTokens: PromiseOrValue<string>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    /**
     * Converts a given amount of a derivative to its underlying asset values
     * @param _derivative The derivative to convert
     * @param _derivativeAmount The amount of the derivative to convert
     */
    calcUnderlyingValues(
      _derivative: PromiseOrValue<string>,
      _derivativeAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [string[], BigNumber[]] & {
        underlyings_: string[];
        underlyingAmounts_: BigNumber[];
      }
    >;

    /**
     * Gets the `DERIVATIVE_PRICE_FEED` variable value
     */
    getDerivativePriceFeed(overrides?: CallOverrides): Promise<string>;

    /**
     * Gets the `FACTORY` variable value
     */
    getFactory(overrides?: CallOverrides): Promise<string>;

    /**
     * Gets the `FUND_DEPLOYER` variable
     */
    getFundDeployer(overrides?: CallOverrides): Promise<string>;

    /**
     * Ownership is deferred to the owner of the FundDeployer contract
     * Gets the owner of this contract
     */
    getOwner(overrides?: CallOverrides): Promise<string>;

    /**
     * Gets the `PoolTokenInfo` for a given pool token
     * @param _poolToken The pool token for which to get the `PoolTokenInfo`
     */
    getPoolTokenInfo(
      _poolToken: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<UniswapV2PoolPriceFeed.PoolTokenInfoStructOutput>;

    /**
     * Gets the underlyings for a given pool token
     * @param _poolToken The pool token for which to get its underlyings
     */
    getPoolTokenUnderlyings(
      _poolToken: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[string, string] & { token0_: string; token1_: string }>;

    /**
     * Gets the `PRIMITIVE_PRICE_FEED` variable value
     */
    getPrimitivePriceFeed(overrides?: CallOverrides): Promise<string>;

    /**
     * Gets the `VALUE_INTERPRETER` variable value
     */
    getValueInterpreter(overrides?: CallOverrides): Promise<string>;

    /**
     * Checks if an asset is supported by the price feed
     * @param _asset The asset to check
     */
    isSupportedAsset(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>;
  };

  filters: {
    'PoolTokenAdded(address,address,address)'(
      poolToken?: PromiseOrValue<string> | null,
      token0?: null,
      token1?: null,
    ): PoolTokenAddedEventFilter;
    PoolTokenAdded(
      poolToken?: PromiseOrValue<string> | null,
      token0?: null,
      token1?: null,
    ): PoolTokenAddedEventFilter;
  };

  estimateGas: {
    /**
     * Adds Uniswap pool tokens to the price feed
     * @param _poolTokens Uniswap pool tokens to add
     */
    addPoolTokens(
      _poolTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Converts a given amount of a derivative to its underlying asset values
     * @param _derivative The derivative to convert
     * @param _derivativeAmount The amount of the derivative to convert
     */
    calcUnderlyingValues(
      _derivative: PromiseOrValue<string>,
      _derivativeAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Gets the `DERIVATIVE_PRICE_FEED` variable value
     */
    getDerivativePriceFeed(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the `FACTORY` variable value
     */
    getFactory(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the `FUND_DEPLOYER` variable
     */
    getFundDeployer(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Ownership is deferred to the owner of the FundDeployer contract
     * Gets the owner of this contract
     */
    getOwner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the `PoolTokenInfo` for a given pool token
     * @param _poolToken The pool token for which to get the `PoolTokenInfo`
     */
    getPoolTokenInfo(
      _poolToken: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    /**
     * Gets the underlyings for a given pool token
     * @param _poolToken The pool token for which to get its underlyings
     */
    getPoolTokenUnderlyings(
      _poolToken: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    /**
     * Gets the `PRIMITIVE_PRICE_FEED` variable value
     */
    getPrimitivePriceFeed(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the `VALUE_INTERPRETER` variable value
     */
    getValueInterpreter(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Checks if an asset is supported by the price feed
     * @param _asset The asset to check
     */
    isSupportedAsset(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Adds Uniswap pool tokens to the price feed
     * @param _poolTokens Uniswap pool tokens to add
     */
    addPoolTokens(
      _poolTokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Converts a given amount of a derivative to its underlying asset values
     * @param _derivative The derivative to convert
     * @param _derivativeAmount The amount of the derivative to convert
     */
    calcUnderlyingValues(
      _derivative: PromiseOrValue<string>,
      _derivativeAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the `DERIVATIVE_PRICE_FEED` variable value
     */
    getDerivativePriceFeed(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the `FACTORY` variable value
     */
    getFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Gets the `FUND_DEPLOYER` variable
     */
    getFundDeployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Ownership is deferred to the owner of the FundDeployer contract
     * Gets the owner of this contract
     */
    getOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Gets the `PoolTokenInfo` for a given pool token
     * @param _poolToken The pool token for which to get the `PoolTokenInfo`
     */
    getPoolTokenInfo(
      _poolToken: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the underlyings for a given pool token
     * @param _poolToken The pool token for which to get its underlyings
     */
    getPoolTokenUnderlyings(
      _poolToken: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the `PRIMITIVE_PRICE_FEED` variable value
     */
    getPrimitivePriceFeed(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the `VALUE_INTERPRETER` variable value
     */
    getValueInterpreter(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    /**
     * Checks if an asset is supported by the price feed
     * @param _asset The asset to check
     */
    isSupportedAsset(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;
  };
}
