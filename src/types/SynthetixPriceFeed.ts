/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common';

export interface SynthetixPriceFeedInterface extends utils.Interface {
  functions: {
    'addSynths(address[])': FunctionFragment;
    'calcUnderlyingValues(address,uint256)': FunctionFragment;
    'getAddressResolver()': FunctionFragment;
    'getCurrencyKeyForSynth(address)': FunctionFragment;
    'getCurrencyKeysForSynths(address[])': FunctionFragment;
    'getFundDeployer()': FunctionFragment;
    'getOwner()': FunctionFragment;
    'getSUSD()': FunctionFragment;
    'isSupportedAsset(address)': FunctionFragment;
    'updateSynthCurrencyKeys(address[])': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'addSynths'
      | 'calcUnderlyingValues'
      | 'getAddressResolver'
      | 'getCurrencyKeyForSynth'
      | 'getCurrencyKeysForSynths'
      | 'getFundDeployer'
      | 'getOwner'
      | 'getSUSD'
      | 'isSupportedAsset'
      | 'updateSynthCurrencyKeys',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'addSynths',
    values: [PromiseOrValue<string>[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'calcUnderlyingValues',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getAddressResolver',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getCurrencyKeyForSynth',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getCurrencyKeysForSynths',
    values: [PromiseOrValue<string>[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'getFundDeployer',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'getOwner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getSUSD', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'isSupportedAsset',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'updateSynthCurrencyKeys',
    values: [PromiseOrValue<string>[]],
  ): string;

  decodeFunctionResult(functionFragment: 'addSynths', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'calcUnderlyingValues',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getAddressResolver',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getCurrencyKeyForSynth',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getCurrencyKeysForSynths',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getFundDeployer',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'getOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getSUSD', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'isSupportedAsset',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'updateSynthCurrencyKeys',
    data: BytesLike,
  ): Result;

  events: {
    'SynthAdded(address,bytes32)': EventFragment;
    'SynthCurrencyKeyUpdated(address,bytes32,bytes32)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'SynthAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SynthCurrencyKeyUpdated'): EventFragment;
}

export interface SynthAddedEventObject {
  synth: string;
  currencyKey: string;
}
export type SynthAddedEvent = TypedEvent<
  [string, string],
  SynthAddedEventObject
>;

export type SynthAddedEventFilter = TypedEventFilter<SynthAddedEvent>;

export interface SynthCurrencyKeyUpdatedEventObject {
  synth: string;
  prevCurrencyKey: string;
  nextCurrencyKey: string;
}
export type SynthCurrencyKeyUpdatedEvent = TypedEvent<
  [string, string, string],
  SynthCurrencyKeyUpdatedEventObject
>;

export type SynthCurrencyKeyUpdatedEventFilter =
  TypedEventFilter<SynthCurrencyKeyUpdatedEvent>;

export interface SynthetixPriceFeed extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SynthetixPriceFeedInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Adds Synths to the price feed
     * @param _synths Synths to add
     */
    addSynths(
      _synths: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Converts a given amount of a derivative to its underlying asset values
     * @param _derivative The derivative to convert
     * @param _derivativeAmount The amount of the derivative to convert
     */
    calcUnderlyingValues(
      _derivative: PromiseOrValue<string>,
      _derivativeAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Gets the `ADDRESS_RESOLVER` variable
     */
    getAddressResolver(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Gets the currencyKey for a given Synth
     */
    getCurrencyKeyForSynth(
      _synth: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[string] & { currencyKey_: string }>;

    /**
     * Gets the currencyKey for multiple given Synths
     */
    getCurrencyKeysForSynths(
      _synths: PromiseOrValue<string>[],
      overrides?: CallOverrides,
    ): Promise<[string[]] & { currencyKeys_: string[] }>;

    /**
     * Gets the `FUND_DEPLOYER` variable
     */
    getFundDeployer(
      overrides?: CallOverrides,
    ): Promise<[string] & { fundDeployer_: string }>;

    /**
     * Ownership is deferred to the owner of the FundDeployer contract
     * Gets the owner of this contract
     */
    getOwner(overrides?: CallOverrides): Promise<[string] & { owner_: string }>;

    /**
     * Gets the `SUSD` variable
     */
    getSUSD(overrides?: CallOverrides): Promise<[string] & { susd_: string }>;

    /**
     * Checks whether an asset is a supported primitive of the price feed
     * @param _asset The asset to check
     */
    isSupportedAsset(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean] & { isSupported_: boolean }>;

    /**
     * Anybody can call this function
     * Updates the cached currencyKey value for specified Synths
     * @param _synths Synths to update
     */
    updateSynthCurrencyKeys(
      _synths: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  /**
   * Adds Synths to the price feed
   * @param _synths Synths to add
   */
  addSynths(
    _synths: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Converts a given amount of a derivative to its underlying asset values
   * @param _derivative The derivative to convert
   * @param _derivativeAmount The amount of the derivative to convert
   */
  calcUnderlyingValues(
    _derivative: PromiseOrValue<string>,
    _derivativeAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Gets the `ADDRESS_RESOLVER` variable
   */
  getAddressResolver(overrides?: CallOverrides): Promise<string>;

  /**
   * Gets the currencyKey for a given Synth
   */
  getCurrencyKeyForSynth(
    _synth: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<string>;

  /**
   * Gets the currencyKey for multiple given Synths
   */
  getCurrencyKeysForSynths(
    _synths: PromiseOrValue<string>[],
    overrides?: CallOverrides,
  ): Promise<string[]>;

  /**
   * Gets the `FUND_DEPLOYER` variable
   */
  getFundDeployer(overrides?: CallOverrides): Promise<string>;

  /**
   * Ownership is deferred to the owner of the FundDeployer contract
   * Gets the owner of this contract
   */
  getOwner(overrides?: CallOverrides): Promise<string>;

  /**
   * Gets the `SUSD` variable
   */
  getSUSD(overrides?: CallOverrides): Promise<string>;

  /**
   * Checks whether an asset is a supported primitive of the price feed
   * @param _asset The asset to check
   */
  isSupportedAsset(
    _asset: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  /**
   * Anybody can call this function
   * Updates the cached currencyKey value for specified Synths
   * @param _synths Synths to update
   */
  updateSynthCurrencyKeys(
    _synths: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * Adds Synths to the price feed
     * @param _synths Synths to add
     */
    addSynths(
      _synths: PromiseOrValue<string>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    /**
     * Converts a given amount of a derivative to its underlying asset values
     * @param _derivative The derivative to convert
     * @param _derivativeAmount The amount of the derivative to convert
     */
    calcUnderlyingValues(
      _derivative: PromiseOrValue<string>,
      _derivativeAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [string[], BigNumber[]] & {
        underlyings_: string[];
        underlyingAmounts_: BigNumber[];
      }
    >;

    /**
     * Gets the `ADDRESS_RESOLVER` variable
     */
    getAddressResolver(overrides?: CallOverrides): Promise<string>;

    /**
     * Gets the currencyKey for a given Synth
     */
    getCurrencyKeyForSynth(
      _synth: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<string>;

    /**
     * Gets the currencyKey for multiple given Synths
     */
    getCurrencyKeysForSynths(
      _synths: PromiseOrValue<string>[],
      overrides?: CallOverrides,
    ): Promise<string[]>;

    /**
     * Gets the `FUND_DEPLOYER` variable
     */
    getFundDeployer(overrides?: CallOverrides): Promise<string>;

    /**
     * Ownership is deferred to the owner of the FundDeployer contract
     * Gets the owner of this contract
     */
    getOwner(overrides?: CallOverrides): Promise<string>;

    /**
     * Gets the `SUSD` variable
     */
    getSUSD(overrides?: CallOverrides): Promise<string>;

    /**
     * Checks whether an asset is a supported primitive of the price feed
     * @param _asset The asset to check
     */
    isSupportedAsset(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    /**
     * Anybody can call this function
     * Updates the cached currencyKey value for specified Synths
     * @param _synths Synths to update
     */
    updateSynthCurrencyKeys(
      _synths: PromiseOrValue<string>[],
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'SynthAdded(address,bytes32)'(
      synth?: PromiseOrValue<string> | null,
      currencyKey?: null,
    ): SynthAddedEventFilter;
    SynthAdded(
      synth?: PromiseOrValue<string> | null,
      currencyKey?: null,
    ): SynthAddedEventFilter;

    'SynthCurrencyKeyUpdated(address,bytes32,bytes32)'(
      synth?: PromiseOrValue<string> | null,
      prevCurrencyKey?: null,
      nextCurrencyKey?: null,
    ): SynthCurrencyKeyUpdatedEventFilter;
    SynthCurrencyKeyUpdated(
      synth?: PromiseOrValue<string> | null,
      prevCurrencyKey?: null,
      nextCurrencyKey?: null,
    ): SynthCurrencyKeyUpdatedEventFilter;
  };

  estimateGas: {
    /**
     * Adds Synths to the price feed
     * @param _synths Synths to add
     */
    addSynths(
      _synths: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Converts a given amount of a derivative to its underlying asset values
     * @param _derivative The derivative to convert
     * @param _derivativeAmount The amount of the derivative to convert
     */
    calcUnderlyingValues(
      _derivative: PromiseOrValue<string>,
      _derivativeAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Gets the `ADDRESS_RESOLVER` variable
     */
    getAddressResolver(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the currencyKey for a given Synth
     */
    getCurrencyKeyForSynth(
      _synth: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    /**
     * Gets the currencyKey for multiple given Synths
     */
    getCurrencyKeysForSynths(
      _synths: PromiseOrValue<string>[],
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    /**
     * Gets the `FUND_DEPLOYER` variable
     */
    getFundDeployer(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Ownership is deferred to the owner of the FundDeployer contract
     * Gets the owner of this contract
     */
    getOwner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the `SUSD` variable
     */
    getSUSD(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Checks whether an asset is a supported primitive of the price feed
     * @param _asset The asset to check
     */
    isSupportedAsset(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    /**
     * Anybody can call this function
     * Updates the cached currencyKey value for specified Synths
     * @param _synths Synths to update
     */
    updateSynthCurrencyKeys(
      _synths: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Adds Synths to the price feed
     * @param _synths Synths to add
     */
    addSynths(
      _synths: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Converts a given amount of a derivative to its underlying asset values
     * @param _derivative The derivative to convert
     * @param _derivativeAmount The amount of the derivative to convert
     */
    calcUnderlyingValues(
      _derivative: PromiseOrValue<string>,
      _derivativeAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the `ADDRESS_RESOLVER` variable
     */
    getAddressResolver(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the currencyKey for a given Synth
     */
    getCurrencyKeyForSynth(
      _synth: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the currencyKey for multiple given Synths
     */
    getCurrencyKeysForSynths(
      _synths: PromiseOrValue<string>[],
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the `FUND_DEPLOYER` variable
     */
    getFundDeployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Ownership is deferred to the owner of the FundDeployer contract
     * Gets the owner of this contract
     */
    getOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Gets the `SUSD` variable
     */
    getSUSD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Checks whether an asset is a supported primitive of the price feed
     * @param _asset The asset to check
     */
    isSupportedAsset(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    /**
     * Anybody can call this function
     * Updates the cached currencyKey value for specified Synths
     * @param _synths Synths to update
     */
    updateSynthCurrencyKeys(
      _synths: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
