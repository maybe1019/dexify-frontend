/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common';

export declare namespace PerformanceFee {
  export type FeeInfoStruct = {
    rate: PromiseOrValue<BigNumberish>;
    period: PromiseOrValue<BigNumberish>;
    activated: PromiseOrValue<BigNumberish>;
    lastPaid: PromiseOrValue<BigNumberish>;
    highWaterMark: PromiseOrValue<BigNumberish>;
    lastSharePrice: PromiseOrValue<BigNumberish>;
    aggregateValueDue: PromiseOrValue<BigNumberish>;
  };

  export type FeeInfoStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
  ] & {
    rate: BigNumber;
    period: BigNumber;
    activated: BigNumber;
    lastPaid: BigNumber;
    highWaterMark: BigNumber;
    lastSharePrice: BigNumber;
    aggregateValueDue: BigNumber;
  };
}

export interface PerformanceFeeInterface extends utils.Interface {
  functions: {
    'activateForFund(address,address)': FunctionFragment;
    'addFundSettings(address,bytes)': FunctionFragment;
    'getFeeInfoForFund(address)': FunctionFragment;
    'getFeeManager()': FunctionFragment;
    'identifier()': FunctionFragment;
    'implementedHooks()': FunctionFragment;
    'payout(address,address)': FunctionFragment;
    'payoutAllowed(address)': FunctionFragment;
    'settle(address,address,uint8,bytes,uint256)': FunctionFragment;
    'update(address,address,uint8,bytes,uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'activateForFund'
      | 'addFundSettings'
      | 'getFeeInfoForFund'
      | 'getFeeManager'
      | 'identifier'
      | 'implementedHooks'
      | 'payout'
      | 'payoutAllowed'
      | 'settle'
      | 'update',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'activateForFund',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'addFundSettings',
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getFeeInfoForFund',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'getFeeManager',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'identifier',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'implementedHooks',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'payout',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'payoutAllowed',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'settle',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'update',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;

  decodeFunctionResult(
    functionFragment: 'activateForFund',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'addFundSettings',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getFeeInfoForFund',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getFeeManager',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'identifier', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'implementedHooks',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'payout', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'payoutAllowed',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'settle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'update', data: BytesLike): Result;

  events: {
    'ActivatedForFund(address,uint256)': EventFragment;
    'FundSettingsAdded(address,uint256,uint256)': EventFragment;
    'LastSharePriceUpdated(address,uint256,uint256)': EventFragment;
    'PaidOut(address,uint256,uint256,uint256)': EventFragment;
    'PerformanceUpdated(address,uint256,uint256,int256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'ActivatedForFund'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FundSettingsAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LastSharePriceUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PaidOut'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PerformanceUpdated'): EventFragment;
}

export interface ActivatedForFundEventObject {
  comptrollerProxy: string;
  highWaterMark: BigNumber;
}
export type ActivatedForFundEvent = TypedEvent<
  [string, BigNumber],
  ActivatedForFundEventObject
>;

export type ActivatedForFundEventFilter =
  TypedEventFilter<ActivatedForFundEvent>;

export interface FundSettingsAddedEventObject {
  comptrollerProxy: string;
  rate: BigNumber;
  period: BigNumber;
}
export type FundSettingsAddedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  FundSettingsAddedEventObject
>;

export type FundSettingsAddedEventFilter =
  TypedEventFilter<FundSettingsAddedEvent>;

export interface LastSharePriceUpdatedEventObject {
  comptrollerProxy: string;
  prevSharePrice: BigNumber;
  nextSharePrice: BigNumber;
}
export type LastSharePriceUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  LastSharePriceUpdatedEventObject
>;

export type LastSharePriceUpdatedEventFilter =
  TypedEventFilter<LastSharePriceUpdatedEvent>;

export interface PaidOutEventObject {
  comptrollerProxy: string;
  prevHighWaterMark: BigNumber;
  nextHighWaterMark: BigNumber;
  aggregateValueDue: BigNumber;
}
export type PaidOutEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  PaidOutEventObject
>;

export type PaidOutEventFilter = TypedEventFilter<PaidOutEvent>;

export interface PerformanceUpdatedEventObject {
  comptrollerProxy: string;
  prevAggregateValueDue: BigNumber;
  nextAggregateValueDue: BigNumber;
  sharesOutstandingDiff: BigNumber;
}
export type PerformanceUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  PerformanceUpdatedEventObject
>;

export type PerformanceUpdatedEventFilter =
  TypedEventFilter<PerformanceUpdatedEvent>;

export interface PerformanceFee extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PerformanceFeeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Activates the fee for a fund
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     */
    activateForFund(
      _comptrollerProxy: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * `highWaterMark`, `lastSharePrice`, and `activated` are set during activation
     * Add the initial fee settings for a fund
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     * @param _settingsData Encoded settings to apply to the policy for the fund
     */
    addFundSettings(
      _comptrollerProxy: PromiseOrValue<string>,
      _settingsData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Gets the feeInfo for a given fund
     * @param _comptrollerProxy The ComptrollerProxy contract of the fund
     */
    getFeeInfoForFund(
      _comptrollerProxy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [PerformanceFee.FeeInfoStructOutput] & {
        feeInfo_: PerformanceFee.FeeInfoStructOutput;
      }
    >;

    /**
     * Gets the `FEE_MANAGER` variable
     */
    getFeeManager(
      overrides?: CallOverrides,
    ): Promise<[string] & { feeManager_: string }>;

    /**
     * Provides a constant string identifier for a fee
     */
    identifier(
      overrides?: CallOverrides,
    ): Promise<[string] & { identifier_: string }>;

    /**
     * Used only during fee registration
     * Gets the hooks that are implemented by the fee
     */
    implementedHooks(overrides?: CallOverrides): Promise<
      [number[], number[], boolean, boolean] & {
        implementedHooksForSettle_: number[];
        implementedHooksForUpdate_: number[];
        usesGavOnSettle_: boolean;
        usesGavOnUpdate_: boolean;
      }
    >;

    /**
     * Checks whether the shares outstanding for the fee can be paid out, and updates the info for the fee's last payout
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     */
    payout(
      _comptrollerProxy: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Payout is allowed if fees have not yet been settled in a crystallization period, and at least 1 crystallization period has passed since activation
     * Checks whether the shares outstanding can be paid out
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     */
    payoutAllowed(
      _comptrollerProxy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean] & { payoutAllowed_: boolean }>;

    /**
     * Settles the fee and calculates shares due
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     * @param _gav The GAV of the fund
     * @param _vaultProxy The VaultProxy of the fund
     */
    settle(
      _comptrollerProxy: PromiseOrValue<string>,
      _vaultProxy: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      _gav: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Updates the fee state after all fees have finished settle()
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     * @param _gav The GAV of the fund
     * @param _hook The FeeHook being executed
     * @param _settlementData Encoded args to use in calculating the settlement
     * @param _vaultProxy The VaultProxy of the fund
     */
    update(
      _comptrollerProxy: PromiseOrValue<string>,
      _vaultProxy: PromiseOrValue<string>,
      _hook: PromiseOrValue<BigNumberish>,
      _settlementData: PromiseOrValue<BytesLike>,
      _gav: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  /**
   * Activates the fee for a fund
   * @param _comptrollerProxy The ComptrollerProxy of the fund
   */
  activateForFund(
    _comptrollerProxy: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * `highWaterMark`, `lastSharePrice`, and `activated` are set during activation
   * Add the initial fee settings for a fund
   * @param _comptrollerProxy The ComptrollerProxy of the fund
   * @param _settingsData Encoded settings to apply to the policy for the fund
   */
  addFundSettings(
    _comptrollerProxy: PromiseOrValue<string>,
    _settingsData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Gets the feeInfo for a given fund
   * @param _comptrollerProxy The ComptrollerProxy contract of the fund
   */
  getFeeInfoForFund(
    _comptrollerProxy: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<PerformanceFee.FeeInfoStructOutput>;

  /**
   * Gets the `FEE_MANAGER` variable
   */
  getFeeManager(overrides?: CallOverrides): Promise<string>;

  /**
   * Provides a constant string identifier for a fee
   */
  identifier(overrides?: CallOverrides): Promise<string>;

  /**
   * Used only during fee registration
   * Gets the hooks that are implemented by the fee
   */
  implementedHooks(overrides?: CallOverrides): Promise<
    [number[], number[], boolean, boolean] & {
      implementedHooksForSettle_: number[];
      implementedHooksForUpdate_: number[];
      usesGavOnSettle_: boolean;
      usesGavOnUpdate_: boolean;
    }
  >;

  /**
   * Checks whether the shares outstanding for the fee can be paid out, and updates the info for the fee's last payout
   * @param _comptrollerProxy The ComptrollerProxy of the fund
   */
  payout(
    _comptrollerProxy: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Payout is allowed if fees have not yet been settled in a crystallization period, and at least 1 crystallization period has passed since activation
   * Checks whether the shares outstanding can be paid out
   * @param _comptrollerProxy The ComptrollerProxy of the fund
   */
  payoutAllowed(
    _comptrollerProxy: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  /**
   * Settles the fee and calculates shares due
   * @param _comptrollerProxy The ComptrollerProxy of the fund
   * @param _gav The GAV of the fund
   * @param _vaultProxy The VaultProxy of the fund
   */
  settle(
    _comptrollerProxy: PromiseOrValue<string>,
    _vaultProxy: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BytesLike>,
    _gav: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Updates the fee state after all fees have finished settle()
   * @param _comptrollerProxy The ComptrollerProxy of the fund
   * @param _gav The GAV of the fund
   * @param _hook The FeeHook being executed
   * @param _settlementData Encoded args to use in calculating the settlement
   * @param _vaultProxy The VaultProxy of the fund
   */
  update(
    _comptrollerProxy: PromiseOrValue<string>,
    _vaultProxy: PromiseOrValue<string>,
    _hook: PromiseOrValue<BigNumberish>,
    _settlementData: PromiseOrValue<BytesLike>,
    _gav: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * Activates the fee for a fund
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     */
    activateForFund(
      _comptrollerProxy: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    /**
     * `highWaterMark`, `lastSharePrice`, and `activated` are set during activation
     * Add the initial fee settings for a fund
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     * @param _settingsData Encoded settings to apply to the policy for the fund
     */
    addFundSettings(
      _comptrollerProxy: PromiseOrValue<string>,
      _settingsData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    /**
     * Gets the feeInfo for a given fund
     * @param _comptrollerProxy The ComptrollerProxy contract of the fund
     */
    getFeeInfoForFund(
      _comptrollerProxy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PerformanceFee.FeeInfoStructOutput>;

    /**
     * Gets the `FEE_MANAGER` variable
     */
    getFeeManager(overrides?: CallOverrides): Promise<string>;

    /**
     * Provides a constant string identifier for a fee
     */
    identifier(overrides?: CallOverrides): Promise<string>;

    /**
     * Used only during fee registration
     * Gets the hooks that are implemented by the fee
     */
    implementedHooks(overrides?: CallOverrides): Promise<
      [number[], number[], boolean, boolean] & {
        implementedHooksForSettle_: number[];
        implementedHooksForUpdate_: number[];
        usesGavOnSettle_: boolean;
        usesGavOnUpdate_: boolean;
      }
    >;

    /**
     * Checks whether the shares outstanding for the fee can be paid out, and updates the info for the fee's last payout
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     */
    payout(
      _comptrollerProxy: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    /**
     * Payout is allowed if fees have not yet been settled in a crystallization period, and at least 1 crystallization period has passed since activation
     * Checks whether the shares outstanding can be paid out
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     */
    payoutAllowed(
      _comptrollerProxy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    /**
     * Settles the fee and calculates shares due
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     * @param _gav The GAV of the fund
     * @param _vaultProxy The VaultProxy of the fund
     */
    settle(
      _comptrollerProxy: PromiseOrValue<string>,
      _vaultProxy: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      _gav: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [number, string, BigNumber] & {
        settlementType_: number;
        sharesDue_: BigNumber;
      }
    >;

    /**
     * Updates the fee state after all fees have finished settle()
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     * @param _gav The GAV of the fund
     * @param _hook The FeeHook being executed
     * @param _settlementData Encoded args to use in calculating the settlement
     * @param _vaultProxy The VaultProxy of the fund
     */
    update(
      _comptrollerProxy: PromiseOrValue<string>,
      _vaultProxy: PromiseOrValue<string>,
      _hook: PromiseOrValue<BigNumberish>,
      _settlementData: PromiseOrValue<BytesLike>,
      _gav: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'ActivatedForFund(address,uint256)'(
      comptrollerProxy?: PromiseOrValue<string> | null,
      highWaterMark?: null,
    ): ActivatedForFundEventFilter;
    ActivatedForFund(
      comptrollerProxy?: PromiseOrValue<string> | null,
      highWaterMark?: null,
    ): ActivatedForFundEventFilter;

    'FundSettingsAdded(address,uint256,uint256)'(
      comptrollerProxy?: PromiseOrValue<string> | null,
      rate?: null,
      period?: null,
    ): FundSettingsAddedEventFilter;
    FundSettingsAdded(
      comptrollerProxy?: PromiseOrValue<string> | null,
      rate?: null,
      period?: null,
    ): FundSettingsAddedEventFilter;

    'LastSharePriceUpdated(address,uint256,uint256)'(
      comptrollerProxy?: PromiseOrValue<string> | null,
      prevSharePrice?: null,
      nextSharePrice?: null,
    ): LastSharePriceUpdatedEventFilter;
    LastSharePriceUpdated(
      comptrollerProxy?: PromiseOrValue<string> | null,
      prevSharePrice?: null,
      nextSharePrice?: null,
    ): LastSharePriceUpdatedEventFilter;

    'PaidOut(address,uint256,uint256,uint256)'(
      comptrollerProxy?: PromiseOrValue<string> | null,
      prevHighWaterMark?: null,
      nextHighWaterMark?: null,
      aggregateValueDue?: null,
    ): PaidOutEventFilter;
    PaidOut(
      comptrollerProxy?: PromiseOrValue<string> | null,
      prevHighWaterMark?: null,
      nextHighWaterMark?: null,
      aggregateValueDue?: null,
    ): PaidOutEventFilter;

    'PerformanceUpdated(address,uint256,uint256,int256)'(
      comptrollerProxy?: PromiseOrValue<string> | null,
      prevAggregateValueDue?: null,
      nextAggregateValueDue?: null,
      sharesOutstandingDiff?: null,
    ): PerformanceUpdatedEventFilter;
    PerformanceUpdated(
      comptrollerProxy?: PromiseOrValue<string> | null,
      prevAggregateValueDue?: null,
      nextAggregateValueDue?: null,
      sharesOutstandingDiff?: null,
    ): PerformanceUpdatedEventFilter;
  };

  estimateGas: {
    /**
     * Activates the fee for a fund
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     */
    activateForFund(
      _comptrollerProxy: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * `highWaterMark`, `lastSharePrice`, and `activated` are set during activation
     * Add the initial fee settings for a fund
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     * @param _settingsData Encoded settings to apply to the policy for the fund
     */
    addFundSettings(
      _comptrollerProxy: PromiseOrValue<string>,
      _settingsData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Gets the feeInfo for a given fund
     * @param _comptrollerProxy The ComptrollerProxy contract of the fund
     */
    getFeeInfoForFund(
      _comptrollerProxy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    /**
     * Gets the `FEE_MANAGER` variable
     */
    getFeeManager(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Provides a constant string identifier for a fee
     */
    identifier(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Used only during fee registration
     * Gets the hooks that are implemented by the fee
     */
    implementedHooks(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Checks whether the shares outstanding for the fee can be paid out, and updates the info for the fee's last payout
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     */
    payout(
      _comptrollerProxy: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Payout is allowed if fees have not yet been settled in a crystallization period, and at least 1 crystallization period has passed since activation
     * Checks whether the shares outstanding can be paid out
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     */
    payoutAllowed(
      _comptrollerProxy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    /**
     * Settles the fee and calculates shares due
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     * @param _gav The GAV of the fund
     * @param _vaultProxy The VaultProxy of the fund
     */
    settle(
      _comptrollerProxy: PromiseOrValue<string>,
      _vaultProxy: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      _gav: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Updates the fee state after all fees have finished settle()
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     * @param _gav The GAV of the fund
     * @param _hook The FeeHook being executed
     * @param _settlementData Encoded args to use in calculating the settlement
     * @param _vaultProxy The VaultProxy of the fund
     */
    update(
      _comptrollerProxy: PromiseOrValue<string>,
      _vaultProxy: PromiseOrValue<string>,
      _hook: PromiseOrValue<BigNumberish>,
      _settlementData: PromiseOrValue<BytesLike>,
      _gav: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Activates the fee for a fund
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     */
    activateForFund(
      _comptrollerProxy: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * `highWaterMark`, `lastSharePrice`, and `activated` are set during activation
     * Add the initial fee settings for a fund
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     * @param _settingsData Encoded settings to apply to the policy for the fund
     */
    addFundSettings(
      _comptrollerProxy: PromiseOrValue<string>,
      _settingsData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the feeInfo for a given fund
     * @param _comptrollerProxy The ComptrollerProxy contract of the fund
     */
    getFeeInfoForFund(
      _comptrollerProxy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the `FEE_MANAGER` variable
     */
    getFeeManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Provides a constant string identifier for a fee
     */
    identifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Used only during fee registration
     * Gets the hooks that are implemented by the fee
     */
    implementedHooks(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Checks whether the shares outstanding for the fee can be paid out, and updates the info for the fee's last payout
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     */
    payout(
      _comptrollerProxy: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Payout is allowed if fees have not yet been settled in a crystallization period, and at least 1 crystallization period has passed since activation
     * Checks whether the shares outstanding can be paid out
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     */
    payoutAllowed(
      _comptrollerProxy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    /**
     * Settles the fee and calculates shares due
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     * @param _gav The GAV of the fund
     * @param _vaultProxy The VaultProxy of the fund
     */
    settle(
      _comptrollerProxy: PromiseOrValue<string>,
      _vaultProxy: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      _gav: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Updates the fee state after all fees have finished settle()
     * @param _comptrollerProxy The ComptrollerProxy of the fund
     * @param _gav The GAV of the fund
     * @param _hook The FeeHook being executed
     * @param _settlementData Encoded args to use in calculating the settlement
     * @param _vaultProxy The VaultProxy of the fund
     */
    update(
      _comptrollerProxy: PromiseOrValue<string>,
      _vaultProxy: PromiseOrValue<string>,
      _hook: PromiseOrValue<BigNumberish>,
      _settlementData: PromiseOrValue<BytesLike>,
      _gav: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
