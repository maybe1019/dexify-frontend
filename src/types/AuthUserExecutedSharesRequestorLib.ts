/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common';

export declare namespace AuthUserExecutedSharesRequestorLib {
  export type RequestInfoStruct = {
    investmentAmount: PromiseOrValue<BigNumberish>;
    minSharesQuantity: PromiseOrValue<BigNumberish>;
  };

  export type RequestInfoStructOutput = [BigNumber, BigNumber] & {
    investmentAmount: BigNumber;
    minSharesQuantity: BigNumber;
  };
}

export interface AuthUserExecutedSharesRequestorLibInterface
  extends utils.Interface {
  functions: {
    'addRequestExecutors(address[])': FunctionFragment;
    'cancelRequest()': FunctionFragment;
    'createRequest(uint256,uint256)': FunctionFragment;
    'executeRequests(address[])': FunctionFragment;
    'getComptrollerProxy()': FunctionFragment;
    'getDenominationAsset()': FunctionFragment;
    'getFundOwner()': FunctionFragment;
    'getSharesRequestInfoForOwner(address)': FunctionFragment;
    'init(address)': FunctionFragment;
    'isRequestExecutor(address)': FunctionFragment;
    'removeRequestExecutors(address[])': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'addRequestExecutors'
      | 'cancelRequest'
      | 'createRequest'
      | 'executeRequests'
      | 'getComptrollerProxy'
      | 'getDenominationAsset'
      | 'getFundOwner'
      | 'getSharesRequestInfoForOwner'
      | 'init'
      | 'isRequestExecutor'
      | 'removeRequestExecutors',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'addRequestExecutors',
    values: [PromiseOrValue<string>[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'cancelRequest',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'createRequest',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'executeRequests',
    values: [PromiseOrValue<string>[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'getComptrollerProxy',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getDenominationAsset',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getFundOwner',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getSharesRequestInfoForOwner',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'init',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'isRequestExecutor',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'removeRequestExecutors',
    values: [PromiseOrValue<string>[]],
  ): string;

  decodeFunctionResult(
    functionFragment: 'addRequestExecutors',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'cancelRequest',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'createRequest',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'executeRequests',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getComptrollerProxy',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getDenominationAsset',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getFundOwner',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getSharesRequestInfoForOwner',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'init', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'isRequestExecutor',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'removeRequestExecutors',
    data: BytesLike,
  ): Result;

  events: {
    'RequestCanceled(address,uint256,uint256)': EventFragment;
    'RequestCreated(address,uint256,uint256)': EventFragment;
    'RequestExecuted(address,address,uint256,uint256)': EventFragment;
    'RequestExecutorAdded(address)': EventFragment;
    'RequestExecutorRemoved(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'RequestCanceled'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RequestCreated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RequestExecuted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RequestExecutorAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RequestExecutorRemoved'): EventFragment;
}

export interface RequestCanceledEventObject {
  requestOwner: string;
  investmentAmount: BigNumber;
  minSharesQuantity: BigNumber;
}
export type RequestCanceledEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  RequestCanceledEventObject
>;

export type RequestCanceledEventFilter = TypedEventFilter<RequestCanceledEvent>;

export interface RequestCreatedEventObject {
  requestOwner: string;
  investmentAmount: BigNumber;
  minSharesQuantity: BigNumber;
}
export type RequestCreatedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  RequestCreatedEventObject
>;

export type RequestCreatedEventFilter = TypedEventFilter<RequestCreatedEvent>;

export interface RequestExecutedEventObject {
  caller: string;
  requestOwner: string;
  investmentAmount: BigNumber;
  minSharesQuantity: BigNumber;
}
export type RequestExecutedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  RequestExecutedEventObject
>;

export type RequestExecutedEventFilter = TypedEventFilter<RequestExecutedEvent>;

export interface RequestExecutorAddedEventObject {
  account: string;
}
export type RequestExecutorAddedEvent = TypedEvent<
  [string],
  RequestExecutorAddedEventObject
>;

export type RequestExecutorAddedEventFilter =
  TypedEventFilter<RequestExecutorAddedEvent>;

export interface RequestExecutorRemovedEventObject {
  account: string;
}
export type RequestExecutorRemovedEvent = TypedEvent<
  [string],
  RequestExecutorRemovedEventObject
>;

export type RequestExecutorRemovedEventFilter =
  TypedEventFilter<RequestExecutorRemovedEvent>;

export interface AuthUserExecutedSharesRequestorLib extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AuthUserExecutedSharesRequestorLibInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Adds accounts to request executors
     * @param _requestExecutors Accounts to add
     */
    addRequestExecutors(
      _requestExecutors: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Cancels the shares request of the caller
     */
    cancelRequest(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Creates a shares request for the caller
     * @param _investmentAmount The amount of the fund's denomination asset to use to buy shares
     * @param _minSharesQuantity The minimum quantity of shares to buy with the _investmentAmount
     */
    createRequest(
      _investmentAmount: PromiseOrValue<BigNumberish>,
      _minSharesQuantity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Executes multiple shares requests
     * @param _requestOwners The owners of the pending shares requests
     */
    executeRequests(
      _requestOwners: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Gets the value of `comptrollerProxy` variable
     */
    getComptrollerProxy(
      overrides?: CallOverrides,
    ): Promise<[string] & { comptrollerProxy_: string }>;

    /**
     * Gets the value of `denominationAsset` variable
     */
    getDenominationAsset(
      overrides?: CallOverrides,
    ): Promise<[string] & { denominationAsset_: string }>;

    /**
     * Gets the value of `fundOwner` variable
     */
    getFundOwner(
      overrides?: CallOverrides,
    ): Promise<[string] & { fundOwner_: string }>;

    /**
     * Gets the request info of a user
     * @param _requestOwner The address of the user that creates the request
     */
    getSharesRequestInfoForOwner(
      _requestOwner: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<
      [AuthUserExecutedSharesRequestorLib.RequestInfoStructOutput] & {
        requestInfo_: AuthUserExecutedSharesRequestorLib.RequestInfoStructOutput;
      }
    >;

    /**
     * Serves as a per-proxy pseudo-constructor
     * Initializes a proxy instance that uses this library
     */
    init(
      _comptrollerProxy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Checks whether an account is a request executor
     * @param _who The account to check
     */
    isRequestExecutor(
      _who: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean] & { isRequestExecutor_: boolean }>;

    /**
     * Removes accounts from request executors
     * @param _requestExecutors Accounts to remove
     */
    removeRequestExecutors(
      _requestExecutors: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  /**
   * Adds accounts to request executors
   * @param _requestExecutors Accounts to add
   */
  addRequestExecutors(
    _requestExecutors: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Cancels the shares request of the caller
   */
  cancelRequest(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Creates a shares request for the caller
   * @param _investmentAmount The amount of the fund's denomination asset to use to buy shares
   * @param _minSharesQuantity The minimum quantity of shares to buy with the _investmentAmount
   */
  createRequest(
    _investmentAmount: PromiseOrValue<BigNumberish>,
    _minSharesQuantity: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Executes multiple shares requests
   * @param _requestOwners The owners of the pending shares requests
   */
  executeRequests(
    _requestOwners: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Gets the value of `comptrollerProxy` variable
   */
  getComptrollerProxy(overrides?: CallOverrides): Promise<string>;

  /**
   * Gets the value of `denominationAsset` variable
   */
  getDenominationAsset(overrides?: CallOverrides): Promise<string>;

  /**
   * Gets the value of `fundOwner` variable
   */
  getFundOwner(overrides?: CallOverrides): Promise<string>;

  /**
   * Gets the request info of a user
   * @param _requestOwner The address of the user that creates the request
   */
  getSharesRequestInfoForOwner(
    _requestOwner: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<AuthUserExecutedSharesRequestorLib.RequestInfoStructOutput>;

  /**
   * Serves as a per-proxy pseudo-constructor
   * Initializes a proxy instance that uses this library
   */
  init(
    _comptrollerProxy: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Checks whether an account is a request executor
   * @param _who The account to check
   */
  isRequestExecutor(
    _who: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  /**
   * Removes accounts from request executors
   * @param _requestExecutors Accounts to remove
   */
  removeRequestExecutors(
    _requestExecutors: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * Adds accounts to request executors
     * @param _requestExecutors Accounts to add
     */
    addRequestExecutors(
      _requestExecutors: PromiseOrValue<string>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    /**
     * Cancels the shares request of the caller
     */
    cancelRequest(overrides?: CallOverrides): Promise<void>;

    /**
     * Creates a shares request for the caller
     * @param _investmentAmount The amount of the fund's denomination asset to use to buy shares
     * @param _minSharesQuantity The minimum quantity of shares to buy with the _investmentAmount
     */
    createRequest(
      _investmentAmount: PromiseOrValue<BigNumberish>,
      _minSharesQuantity: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    /**
     * Executes multiple shares requests
     * @param _requestOwners The owners of the pending shares requests
     */
    executeRequests(
      _requestOwners: PromiseOrValue<string>[],
      overrides?: CallOverrides,
    ): Promise<void>;

    /**
     * Gets the value of `comptrollerProxy` variable
     */
    getComptrollerProxy(overrides?: CallOverrides): Promise<string>;

    /**
     * Gets the value of `denominationAsset` variable
     */
    getDenominationAsset(overrides?: CallOverrides): Promise<string>;

    /**
     * Gets the value of `fundOwner` variable
     */
    getFundOwner(overrides?: CallOverrides): Promise<string>;

    /**
     * Gets the request info of a user
     * @param _requestOwner The address of the user that creates the request
     */
    getSharesRequestInfoForOwner(
      _requestOwner: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<AuthUserExecutedSharesRequestorLib.RequestInfoStructOutput>;

    /**
     * Serves as a per-proxy pseudo-constructor
     * Initializes a proxy instance that uses this library
     */
    init(
      _comptrollerProxy: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    /**
     * Checks whether an account is a request executor
     * @param _who The account to check
     */
    isRequestExecutor(
      _who: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    /**
     * Removes accounts from request executors
     * @param _requestExecutors Accounts to remove
     */
    removeRequestExecutors(
      _requestExecutors: PromiseOrValue<string>[],
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'RequestCanceled(address,uint256,uint256)'(
      requestOwner?: PromiseOrValue<string> | null,
      investmentAmount?: null,
      minSharesQuantity?: null,
    ): RequestCanceledEventFilter;
    RequestCanceled(
      requestOwner?: PromiseOrValue<string> | null,
      investmentAmount?: null,
      minSharesQuantity?: null,
    ): RequestCanceledEventFilter;

    'RequestCreated(address,uint256,uint256)'(
      requestOwner?: PromiseOrValue<string> | null,
      investmentAmount?: null,
      minSharesQuantity?: null,
    ): RequestCreatedEventFilter;
    RequestCreated(
      requestOwner?: PromiseOrValue<string> | null,
      investmentAmount?: null,
      minSharesQuantity?: null,
    ): RequestCreatedEventFilter;

    'RequestExecuted(address,address,uint256,uint256)'(
      caller?: PromiseOrValue<string> | null,
      requestOwner?: PromiseOrValue<string> | null,
      investmentAmount?: null,
      minSharesQuantity?: null,
    ): RequestExecutedEventFilter;
    RequestExecuted(
      caller?: PromiseOrValue<string> | null,
      requestOwner?: PromiseOrValue<string> | null,
      investmentAmount?: null,
      minSharesQuantity?: null,
    ): RequestExecutedEventFilter;

    'RequestExecutorAdded(address)'(
      account?: PromiseOrValue<string> | null,
    ): RequestExecutorAddedEventFilter;
    RequestExecutorAdded(
      account?: PromiseOrValue<string> | null,
    ): RequestExecutorAddedEventFilter;

    'RequestExecutorRemoved(address)'(
      account?: PromiseOrValue<string> | null,
    ): RequestExecutorRemovedEventFilter;
    RequestExecutorRemoved(
      account?: PromiseOrValue<string> | null,
    ): RequestExecutorRemovedEventFilter;
  };

  estimateGas: {
    /**
     * Adds accounts to request executors
     * @param _requestExecutors Accounts to add
     */
    addRequestExecutors(
      _requestExecutors: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Cancels the shares request of the caller
     */
    cancelRequest(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Creates a shares request for the caller
     * @param _investmentAmount The amount of the fund's denomination asset to use to buy shares
     * @param _minSharesQuantity The minimum quantity of shares to buy with the _investmentAmount
     */
    createRequest(
      _investmentAmount: PromiseOrValue<BigNumberish>,
      _minSharesQuantity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Executes multiple shares requests
     * @param _requestOwners The owners of the pending shares requests
     */
    executeRequests(
      _requestOwners: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Gets the value of `comptrollerProxy` variable
     */
    getComptrollerProxy(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the value of `denominationAsset` variable
     */
    getDenominationAsset(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the value of `fundOwner` variable
     */
    getFundOwner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the request info of a user
     * @param _requestOwner The address of the user that creates the request
     */
    getSharesRequestInfoForOwner(
      _requestOwner: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    /**
     * Serves as a per-proxy pseudo-constructor
     * Initializes a proxy instance that uses this library
     */
    init(
      _comptrollerProxy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Checks whether an account is a request executor
     * @param _who The account to check
     */
    isRequestExecutor(
      _who: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    /**
     * Removes accounts from request executors
     * @param _requestExecutors Accounts to remove
     */
    removeRequestExecutors(
      _requestExecutors: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Adds accounts to request executors
     * @param _requestExecutors Accounts to add
     */
    addRequestExecutors(
      _requestExecutors: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Cancels the shares request of the caller
     */
    cancelRequest(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Creates a shares request for the caller
     * @param _investmentAmount The amount of the fund's denomination asset to use to buy shares
     * @param _minSharesQuantity The minimum quantity of shares to buy with the _investmentAmount
     */
    createRequest(
      _investmentAmount: PromiseOrValue<BigNumberish>,
      _minSharesQuantity: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Executes multiple shares requests
     * @param _requestOwners The owners of the pending shares requests
     */
    executeRequests(
      _requestOwners: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the value of `comptrollerProxy` variable
     */
    getComptrollerProxy(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the value of `denominationAsset` variable
     */
    getDenominationAsset(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the value of `fundOwner` variable
     */
    getFundOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Gets the request info of a user
     * @param _requestOwner The address of the user that creates the request
     */
    getSharesRequestInfoForOwner(
      _requestOwner: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    /**
     * Serves as a per-proxy pseudo-constructor
     * Initializes a proxy instance that uses this library
     */
    init(
      _comptrollerProxy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Checks whether an account is a request executor
     * @param _who The account to check
     */
    isRequestExecutor(
      _who: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    /**
     * Removes accounts from request executors
     * @param _requestExecutors Accounts to remove
     */
    removeRequestExecutors(
      _requestExecutors: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
