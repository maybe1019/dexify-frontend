/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from './common';

export interface VaultLibInterface extends utils.Interface {
  functions: {
    'addTrackedAsset(address)': FunctionFragment;
    'allowance(address,address)': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'approveAssetSpender(address,address,uint256)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'burnShares(address,uint256)': FunctionFragment;
    'callOnContract(address,bytes)': FunctionFragment;
    'canMigrate(address)': FunctionFragment;
    'decimals()': FunctionFragment;
    'getAccessor()': FunctionFragment;
    'getCreator()': FunctionFragment;
    'getMigrator()': FunctionFragment;
    'getOwner()': FunctionFragment;
    'getTrackedAssets()': FunctionFragment;
    'getVaultLib()': FunctionFragment;
    'init(address,address,string)': FunctionFragment;
    'isTrackedAsset(address)': FunctionFragment;
    'mintShares(address,uint256)': FunctionFragment;
    'name()': FunctionFragment;
    'proxiableUUID()': FunctionFragment;
    'removeTrackedAsset(address)': FunctionFragment;
    'setAccessor(address)': FunctionFragment;
    'setMigrator(address)': FunctionFragment;
    'setVaultLib(address)': FunctionFragment;
    'symbol()': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'transfer(address,uint256)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'transferShares(address,address,uint256)': FunctionFragment;
    'withdrawAssetTo(address,address,uint256)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'addTrackedAsset'
      | 'allowance'
      | 'approve'
      | 'approveAssetSpender'
      | 'balanceOf'
      | 'burnShares'
      | 'callOnContract'
      | 'canMigrate'
      | 'decimals'
      | 'getAccessor'
      | 'getCreator'
      | 'getMigrator'
      | 'getOwner'
      | 'getTrackedAssets'
      | 'getVaultLib'
      | 'init'
      | 'isTrackedAsset'
      | 'mintShares'
      | 'name'
      | 'proxiableUUID'
      | 'removeTrackedAsset'
      | 'setAccessor'
      | 'setMigrator'
      | 'setVaultLib'
      | 'symbol'
      | 'totalSupply'
      | 'transfer'
      | 'transferFrom'
      | 'transferShares'
      | 'withdrawAssetTo',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'addTrackedAsset',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'allowance',
    values: [PromiseOrValue<string>, PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'approve',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'approveAssetSpender',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'balanceOf',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'burnShares',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'callOnContract',
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>],
  ): string;
  encodeFunctionData(
    functionFragment: 'canMigrate',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getAccessor',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getCreator',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getMigrator',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'getOwner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getTrackedAssets',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getVaultLib',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'init',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'isTrackedAsset',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'mintShares',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'proxiableUUID',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'removeTrackedAsset',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setAccessor',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setMigrator',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(
    functionFragment: 'setVaultLib',
    values: [PromiseOrValue<string>],
  ): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'totalSupply',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferShares',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'withdrawAssetTo',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string;

  decodeFunctionResult(
    functionFragment: 'addTrackedAsset',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'approveAssetSpender',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'burnShares', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'callOnContract',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'canMigrate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getAccessor',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'getCreator', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getMigrator',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'getOwner', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getTrackedAssets',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getVaultLib',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'init', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'isTrackedAsset',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'mintShares', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'proxiableUUID',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'removeTrackedAsset',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setAccessor',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setMigrator',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setVaultLib',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'totalSupply',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'transferFrom',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferShares',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'withdrawAssetTo',
    data: BytesLike,
  ): Result;

  events: {
    'AccessorSet(address,address)': EventFragment;
    'Approval(address,address,uint256)': EventFragment;
    'AssetWithdrawn(address,address,uint256)': EventFragment;
    'MigratorSet(address,address)': EventFragment;
    'OwnerSet(address,address)': EventFragment;
    'TrackedAssetAdded(address)': EventFragment;
    'TrackedAssetRemoved(address)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
    'VaultLibSet(address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AccessorSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AssetWithdrawn'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MigratorSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnerSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TrackedAssetAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TrackedAssetRemoved'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'VaultLibSet'): EventFragment;
}

export interface AccessorSetEventObject {
  prevAccessor: string;
  nextAccessor: string;
}
export type AccessorSetEvent = TypedEvent<
  [string, string],
  AccessorSetEventObject
>;

export type AccessorSetEventFilter = TypedEventFilter<AccessorSetEvent>;

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface AssetWithdrawnEventObject {
  asset: string;
  target: string;
  amount: BigNumber;
}
export type AssetWithdrawnEvent = TypedEvent<
  [string, string, BigNumber],
  AssetWithdrawnEventObject
>;

export type AssetWithdrawnEventFilter = TypedEventFilter<AssetWithdrawnEvent>;

export interface MigratorSetEventObject {
  prevMigrator: string;
  nextMigrator: string;
}
export type MigratorSetEvent = TypedEvent<
  [string, string],
  MigratorSetEventObject
>;

export type MigratorSetEventFilter = TypedEventFilter<MigratorSetEvent>;

export interface OwnerSetEventObject {
  prevOwner: string;
  nextOwner: string;
}
export type OwnerSetEvent = TypedEvent<[string, string], OwnerSetEventObject>;

export type OwnerSetEventFilter = TypedEventFilter<OwnerSetEvent>;

export interface TrackedAssetAddedEventObject {
  asset: string;
}
export type TrackedAssetAddedEvent = TypedEvent<
  [string],
  TrackedAssetAddedEventObject
>;

export type TrackedAssetAddedEventFilter =
  TypedEventFilter<TrackedAssetAddedEvent>;

export interface TrackedAssetRemovedEventObject {
  asset: string;
}
export type TrackedAssetRemovedEvent = TypedEvent<
  [string],
  TrackedAssetRemovedEventObject
>;

export type TrackedAssetRemovedEventFilter =
  TypedEventFilter<TrackedAssetRemovedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface VaultLibSetEventObject {
  prevVaultLib: string;
  nextVaultLib: string;
}
export type VaultLibSetEvent = TypedEvent<
  [string, string],
  VaultLibSetEventObject
>;

export type VaultLibSetEventFilter = TypedEventFilter<VaultLibSetEvent>;

export interface VaultLib extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VaultLibInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Allows addition of already tracked assets to fail silently.
     * Adds a tracked asset to the fund
     * @param _asset The asset to add
     */
    addTrackedAsset(
      _asset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Standard implementation of ERC20's allowance(). Can be overridden.
     */
    allowance(
      _owner: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    /**
     * Disallows the standard ERC20 approve() function
     */
    approve(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Grants an allowance to a spender to use the fund's asset
     * @param _amount The amount of the allowance
     * @param _asset The asset for which to grant an allowance
     * @param _target The spender of the allowance
     */
    approveAssetSpender(
      _asset: PromiseOrValue<string>,
      _target: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Standard implementation of ERC20's balanceOf(). Can be overridden.
     */
    balanceOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    /**
     * Burns fund shares from a particular account
     * @param _amount The amount of shares to burn
     * @param _target The account for which to burn shares
     */
    burnShares(
      _target: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Makes an arbitrary call with this contract as the sender
     * @param _callData The call data for the call
     * @param _contract The contract to call
     */
    callOnContract(
      _contract: PromiseOrValue<string>,
      _callData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Checks whether an account is allowed to migrate the VaultProxy
     * @param _who The account to check
     */
    canMigrate(
      _who: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean] & { canMigrate_: boolean }>;

    /**
     * Standard implementation of ERC20's decimals(). Can not be overridden.
     */
    decimals(overrides?: CallOverrides): Promise<[number]>;

    /**
     * Gets the `accessor` variable
     */
    getAccessor(
      overrides?: CallOverrides,
    ): Promise<[string] & { accessor_: string }>;

    /**
     * Gets the `creator` variable
     */
    getCreator(
      overrides?: CallOverrides,
    ): Promise<[string] & { creator_: string }>;

    /**
     * Gets the `migrator` variable
     */
    getMigrator(
      overrides?: CallOverrides,
    ): Promise<[string] & { migrator_: string }>;

    /**
     * Gets the `owner` variable
     */
    getOwner(overrides?: CallOverrides): Promise<[string] & { owner_: string }>;

    /**
     * Gets the `trackedAssets` variable
     */
    getTrackedAssets(
      overrides?: CallOverrides,
    ): Promise<[string[]] & { trackedAssets_: string[] }>;

    /**
     * Gets the VaultLib target for the VaultProxy
     */
    getVaultLib(
      overrides?: CallOverrides,
    ): Promise<[string] & { vaultLib_: string }>;

    /**
     * Serves as a per-proxy pseudo-constructor
     * Initializes the VaultProxy with core configuration
     * @param _accessor The address to set as the permissioned accessor of the VaultLib
     * @param _fundName The name of the fund
     * @param _owner The address to set as the fund owner
     */
    init(
      _owner: PromiseOrValue<string>,
      _accessor: PromiseOrValue<string>,
      _fundName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Check whether an address is a tracked asset of the fund
     * @param _asset The address to check
     */
    isTrackedAsset(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[boolean] & { isTrackedAsset_: boolean }>;

    /**
     * Mints fund shares to a particular account
     * @param _amount The amount of shares to mint
     * @param _target The account for which to burn shares
     */
    mintShares(
      _target: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Standard implementation of ERC20's name(). Can be overridden.
     */
    name(overrides?: CallOverrides): Promise<[string]>;

    /**
     * The UUID is `bytes32(keccak256('mln.proxiable.vaultlib'))`
     * Returns a unique bytes32 hash for VaultLib instances
     */
    proxiableUUID(
      overrides?: CallOverrides,
    ): Promise<[string] & { uuid_: string }>;

    /**
     * Removes a tracked asset from the fund
     * @param _asset The asset to remove
     */
    removeTrackedAsset(
      _asset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Sets the permissioned accessor of the VaultLib
     * @param _nextAccessor The address to set as the permissioned accessor of the VaultLib
     */
    setAccessor(
      _nextAccessor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Set to address(0) to remove the migrator.
     * Sets the account that is allowed to migrate a fund to new releases
     * @param _nextMigrator The account to set as the allowed migrator
     */
    setMigrator(
      _nextMigrator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * This function is absolutely critical. __updateCodeAddress() validates that the target is a valid Proxiable contract instance. Does not block _nextVaultLib from being the same as the current VaultLib
     * Sets the VaultLib target for the VaultProxy
     * @param _nextVaultLib The address to set as the VaultLib
     */
    setVaultLib(
      _nextVaultLib: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Defers the shares symbol value to the Dispatcher contract
     * Gets the `symbol` value of the shares token
     */
    symbol(overrides?: CallOverrides): Promise<[string] & { symbol_: string }>;

    /**
     * Standard implementation of ERC20's totalSupply(). Can be overridden.
     */
    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Disallows the standard ERC20 transfer() function
     */
    transfer(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Disallows the standard ERC20 transferFrom() function
     */
    transferFrom(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Transfers fund shares from one account to another
     * @param _amount The amount of shares to transfer
     * @param _from The account from which to transfer shares
     * @param _to The account to which to transfer shares
     */
    transferShares(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    /**
     * Withdraws an asset from the VaultProxy to a given account
     * @param _amount The amount of asset to withdraw
     * @param _asset The asset to withdraw
     * @param _target The account to which to withdraw the asset
     */
    withdrawAssetTo(
      _asset: PromiseOrValue<string>,
      _target: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;
  };

  /**
   * Allows addition of already tracked assets to fail silently.
   * Adds a tracked asset to the fund
   * @param _asset The asset to add
   */
  addTrackedAsset(
    _asset: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Standard implementation of ERC20's allowance(). Can be overridden.
   */
  allowance(
    _owner: PromiseOrValue<string>,
    _spender: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  /**
   * Disallows the standard ERC20 approve() function
   */
  approve(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Grants an allowance to a spender to use the fund's asset
   * @param _amount The amount of the allowance
   * @param _asset The asset for which to grant an allowance
   * @param _target The spender of the allowance
   */
  approveAssetSpender(
    _asset: PromiseOrValue<string>,
    _target: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Standard implementation of ERC20's balanceOf(). Can be overridden.
   */
  balanceOf(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  /**
   * Burns fund shares from a particular account
   * @param _amount The amount of shares to burn
   * @param _target The account for which to burn shares
   */
  burnShares(
    _target: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Makes an arbitrary call with this contract as the sender
   * @param _callData The call data for the call
   * @param _contract The contract to call
   */
  callOnContract(
    _contract: PromiseOrValue<string>,
    _callData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Checks whether an account is allowed to migrate the VaultProxy
   * @param _who The account to check
   */
  canMigrate(
    _who: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  /**
   * Standard implementation of ERC20's decimals(). Can not be overridden.
   */
  decimals(overrides?: CallOverrides): Promise<number>;

  /**
   * Gets the `accessor` variable
   */
  getAccessor(overrides?: CallOverrides): Promise<string>;

  /**
   * Gets the `creator` variable
   */
  getCreator(overrides?: CallOverrides): Promise<string>;

  /**
   * Gets the `migrator` variable
   */
  getMigrator(overrides?: CallOverrides): Promise<string>;

  /**
   * Gets the `owner` variable
   */
  getOwner(overrides?: CallOverrides): Promise<string>;

  /**
   * Gets the `trackedAssets` variable
   */
  getTrackedAssets(overrides?: CallOverrides): Promise<string[]>;

  /**
   * Gets the VaultLib target for the VaultProxy
   */
  getVaultLib(overrides?: CallOverrides): Promise<string>;

  /**
   * Serves as a per-proxy pseudo-constructor
   * Initializes the VaultProxy with core configuration
   * @param _accessor The address to set as the permissioned accessor of the VaultLib
   * @param _fundName The name of the fund
   * @param _owner The address to set as the fund owner
   */
  init(
    _owner: PromiseOrValue<string>,
    _accessor: PromiseOrValue<string>,
    _fundName: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Check whether an address is a tracked asset of the fund
   * @param _asset The address to check
   */
  isTrackedAsset(
    _asset: PromiseOrValue<string>,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  /**
   * Mints fund shares to a particular account
   * @param _amount The amount of shares to mint
   * @param _target The account for which to burn shares
   */
  mintShares(
    _target: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Standard implementation of ERC20's name(). Can be overridden.
   */
  name(overrides?: CallOverrides): Promise<string>;

  /**
   * The UUID is `bytes32(keccak256('mln.proxiable.vaultlib'))`
   * Returns a unique bytes32 hash for VaultLib instances
   */
  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  /**
   * Removes a tracked asset from the fund
   * @param _asset The asset to remove
   */
  removeTrackedAsset(
    _asset: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Sets the permissioned accessor of the VaultLib
   * @param _nextAccessor The address to set as the permissioned accessor of the VaultLib
   */
  setAccessor(
    _nextAccessor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Set to address(0) to remove the migrator.
   * Sets the account that is allowed to migrate a fund to new releases
   * @param _nextMigrator The account to set as the allowed migrator
   */
  setMigrator(
    _nextMigrator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * This function is absolutely critical. __updateCodeAddress() validates that the target is a valid Proxiable contract instance. Does not block _nextVaultLib from being the same as the current VaultLib
   * Sets the VaultLib target for the VaultProxy
   * @param _nextVaultLib The address to set as the VaultLib
   */
  setVaultLib(
    _nextVaultLib: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Defers the shares symbol value to the Dispatcher contract
   * Gets the `symbol` value of the shares token
   */
  symbol(overrides?: CallOverrides): Promise<string>;

  /**
   * Standard implementation of ERC20's totalSupply(). Can be overridden.
   */
  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Disallows the standard ERC20 transfer() function
   */
  transfer(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Disallows the standard ERC20 transferFrom() function
   */
  transferFrom(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Transfers fund shares from one account to another
   * @param _amount The amount of shares to transfer
   * @param _from The account from which to transfer shares
   * @param _to The account to which to transfer shares
   */
  transferShares(
    _from: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  /**
   * Withdraws an asset from the VaultProxy to a given account
   * @param _amount The amount of asset to withdraw
   * @param _asset The asset to withdraw
   * @param _target The account to which to withdraw the asset
   */
  withdrawAssetTo(
    _asset: PromiseOrValue<string>,
    _target: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * Allows addition of already tracked assets to fail silently.
     * Adds a tracked asset to the fund
     * @param _asset The asset to add
     */
    addTrackedAsset(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    /**
     * Standard implementation of ERC20's allowance(). Can be overridden.
     */
    allowance(
      _owner: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    /**
     * Disallows the standard ERC20 approve() function
     */
    approve(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    /**
     * Grants an allowance to a spender to use the fund's asset
     * @param _amount The amount of the allowance
     * @param _asset The asset for which to grant an allowance
     * @param _target The spender of the allowance
     */
    approveAssetSpender(
      _asset: PromiseOrValue<string>,
      _target: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    /**
     * Standard implementation of ERC20's balanceOf(). Can be overridden.
     */
    balanceOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    /**
     * Burns fund shares from a particular account
     * @param _amount The amount of shares to burn
     * @param _target The account for which to burn shares
     */
    burnShares(
      _target: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    /**
     * Makes an arbitrary call with this contract as the sender
     * @param _callData The call data for the call
     * @param _contract The contract to call
     */
    callOnContract(
      _contract: PromiseOrValue<string>,
      _callData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<void>;

    /**
     * Checks whether an account is allowed to migrate the VaultProxy
     * @param _who The account to check
     */
    canMigrate(
      _who: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    /**
     * Standard implementation of ERC20's decimals(). Can not be overridden.
     */
    decimals(overrides?: CallOverrides): Promise<number>;

    /**
     * Gets the `accessor` variable
     */
    getAccessor(overrides?: CallOverrides): Promise<string>;

    /**
     * Gets the `creator` variable
     */
    getCreator(overrides?: CallOverrides): Promise<string>;

    /**
     * Gets the `migrator` variable
     */
    getMigrator(overrides?: CallOverrides): Promise<string>;

    /**
     * Gets the `owner` variable
     */
    getOwner(overrides?: CallOverrides): Promise<string>;

    /**
     * Gets the `trackedAssets` variable
     */
    getTrackedAssets(overrides?: CallOverrides): Promise<string[]>;

    /**
     * Gets the VaultLib target for the VaultProxy
     */
    getVaultLib(overrides?: CallOverrides): Promise<string>;

    /**
     * Serves as a per-proxy pseudo-constructor
     * Initializes the VaultProxy with core configuration
     * @param _accessor The address to set as the permissioned accessor of the VaultLib
     * @param _fundName The name of the fund
     * @param _owner The address to set as the fund owner
     */
    init(
      _owner: PromiseOrValue<string>,
      _accessor: PromiseOrValue<string>,
      _fundName: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    /**
     * Check whether an address is a tracked asset of the fund
     * @param _asset The address to check
     */
    isTrackedAsset(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    /**
     * Mints fund shares to a particular account
     * @param _amount The amount of shares to mint
     * @param _target The account for which to burn shares
     */
    mintShares(
      _target: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    /**
     * Standard implementation of ERC20's name(). Can be overridden.
     */
    name(overrides?: CallOverrides): Promise<string>;

    /**
     * The UUID is `bytes32(keccak256('mln.proxiable.vaultlib'))`
     * Returns a unique bytes32 hash for VaultLib instances
     */
    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    /**
     * Removes a tracked asset from the fund
     * @param _asset The asset to remove
     */
    removeTrackedAsset(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    /**
     * Sets the permissioned accessor of the VaultLib
     * @param _nextAccessor The address to set as the permissioned accessor of the VaultLib
     */
    setAccessor(
      _nextAccessor: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    /**
     * Set to address(0) to remove the migrator.
     * Sets the account that is allowed to migrate a fund to new releases
     * @param _nextMigrator The account to set as the allowed migrator
     */
    setMigrator(
      _nextMigrator: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    /**
     * This function is absolutely critical. __updateCodeAddress() validates that the target is a valid Proxiable contract instance. Does not block _nextVaultLib from being the same as the current VaultLib
     * Sets the VaultLib target for the VaultProxy
     * @param _nextVaultLib The address to set as the VaultLib
     */
    setVaultLib(
      _nextVaultLib: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>;

    /**
     * Defers the shares symbol value to the Dispatcher contract
     * Gets the `symbol` value of the shares token
     */
    symbol(overrides?: CallOverrides): Promise<string>;

    /**
     * Standard implementation of ERC20's totalSupply(). Can be overridden.
     */
    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Disallows the standard ERC20 transfer() function
     */
    transfer(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    /**
     * Disallows the standard ERC20 transferFrom() function
     */
    transferFrom(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    /**
     * Transfers fund shares from one account to another
     * @param _amount The amount of shares to transfer
     * @param _from The account from which to transfer shares
     * @param _to The account to which to transfer shares
     */
    transferShares(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    /**
     * Withdraws an asset from the VaultProxy to a given account
     * @param _amount The amount of asset to withdraw
     * @param _asset The asset to withdraw
     * @param _target The account to which to withdraw the asset
     */
    withdrawAssetTo(
      _asset: PromiseOrValue<string>,
      _target: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'AccessorSet(address,address)'(
      prevAccessor?: null,
      nextAccessor?: null,
    ): AccessorSetEventFilter;
    AccessorSet(
      prevAccessor?: null,
      nextAccessor?: null,
    ): AccessorSetEventFilter;

    'Approval(address,address,uint256)'(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null,
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null,
    ): ApprovalEventFilter;

    'AssetWithdrawn(address,address,uint256)'(
      asset?: PromiseOrValue<string> | null,
      target?: PromiseOrValue<string> | null,
      amount?: null,
    ): AssetWithdrawnEventFilter;
    AssetWithdrawn(
      asset?: PromiseOrValue<string> | null,
      target?: PromiseOrValue<string> | null,
      amount?: null,
    ): AssetWithdrawnEventFilter;

    'MigratorSet(address,address)'(
      prevMigrator?: null,
      nextMigrator?: null,
    ): MigratorSetEventFilter;
    MigratorSet(
      prevMigrator?: null,
      nextMigrator?: null,
    ): MigratorSetEventFilter;

    'OwnerSet(address,address)'(
      prevOwner?: null,
      nextOwner?: null,
    ): OwnerSetEventFilter;
    OwnerSet(prevOwner?: null, nextOwner?: null): OwnerSetEventFilter;

    'TrackedAssetAdded(address)'(asset?: null): TrackedAssetAddedEventFilter;
    TrackedAssetAdded(asset?: null): TrackedAssetAddedEventFilter;

    'TrackedAssetRemoved(address)'(
      asset?: null,
    ): TrackedAssetRemovedEventFilter;
    TrackedAssetRemoved(asset?: null): TrackedAssetRemovedEventFilter;

    'Transfer(address,address,uint256)'(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null,
    ): TransferEventFilter;

    'VaultLibSet(address,address)'(
      prevVaultLib?: null,
      nextVaultLib?: null,
    ): VaultLibSetEventFilter;
    VaultLibSet(
      prevVaultLib?: null,
      nextVaultLib?: null,
    ): VaultLibSetEventFilter;
  };

  estimateGas: {
    /**
     * Allows addition of already tracked assets to fail silently.
     * Adds a tracked asset to the fund
     * @param _asset The asset to add
     */
    addTrackedAsset(
      _asset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Standard implementation of ERC20's allowance(). Can be overridden.
     */
    allowance(
      _owner: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    /**
     * Disallows the standard ERC20 approve() function
     */
    approve(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Grants an allowance to a spender to use the fund's asset
     * @param _amount The amount of the allowance
     * @param _asset The asset for which to grant an allowance
     * @param _target The spender of the allowance
     */
    approveAssetSpender(
      _asset: PromiseOrValue<string>,
      _target: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Standard implementation of ERC20's balanceOf(). Can be overridden.
     */
    balanceOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    /**
     * Burns fund shares from a particular account
     * @param _amount The amount of shares to burn
     * @param _target The account for which to burn shares
     */
    burnShares(
      _target: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Makes an arbitrary call with this contract as the sender
     * @param _callData The call data for the call
     * @param _contract The contract to call
     */
    callOnContract(
      _contract: PromiseOrValue<string>,
      _callData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Checks whether an account is allowed to migrate the VaultProxy
     * @param _who The account to check
     */
    canMigrate(
      _who: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    /**
     * Standard implementation of ERC20's decimals(). Can not be overridden.
     */
    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the `accessor` variable
     */
    getAccessor(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the `creator` variable
     */
    getCreator(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the `migrator` variable
     */
    getMigrator(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the `owner` variable
     */
    getOwner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the `trackedAssets` variable
     */
    getTrackedAssets(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the VaultLib target for the VaultProxy
     */
    getVaultLib(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Serves as a per-proxy pseudo-constructor
     * Initializes the VaultProxy with core configuration
     * @param _accessor The address to set as the permissioned accessor of the VaultLib
     * @param _fundName The name of the fund
     * @param _owner The address to set as the fund owner
     */
    init(
      _owner: PromiseOrValue<string>,
      _accessor: PromiseOrValue<string>,
      _fundName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Check whether an address is a tracked asset of the fund
     * @param _asset The address to check
     */
    isTrackedAsset(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    /**
     * Mints fund shares to a particular account
     * @param _amount The amount of shares to mint
     * @param _target The account for which to burn shares
     */
    mintShares(
      _target: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Standard implementation of ERC20's name(). Can be overridden.
     */
    name(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * The UUID is `bytes32(keccak256('mln.proxiable.vaultlib'))`
     * Returns a unique bytes32 hash for VaultLib instances
     */
    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Removes a tracked asset from the fund
     * @param _asset The asset to remove
     */
    removeTrackedAsset(
      _asset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Sets the permissioned accessor of the VaultLib
     * @param _nextAccessor The address to set as the permissioned accessor of the VaultLib
     */
    setAccessor(
      _nextAccessor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Set to address(0) to remove the migrator.
     * Sets the account that is allowed to migrate a fund to new releases
     * @param _nextMigrator The account to set as the allowed migrator
     */
    setMigrator(
      _nextMigrator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * This function is absolutely critical. __updateCodeAddress() validates that the target is a valid Proxiable contract instance. Does not block _nextVaultLib from being the same as the current VaultLib
     * Sets the VaultLib target for the VaultProxy
     * @param _nextVaultLib The address to set as the VaultLib
     */
    setVaultLib(
      _nextVaultLib: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Defers the shares symbol value to the Dispatcher contract
     * Gets the `symbol` value of the shares token
     */
    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Standard implementation of ERC20's totalSupply(). Can be overridden.
     */
    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Disallows the standard ERC20 transfer() function
     */
    transfer(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Disallows the standard ERC20 transferFrom() function
     */
    transferFrom(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Transfers fund shares from one account to another
     * @param _amount The amount of shares to transfer
     * @param _from The account from which to transfer shares
     * @param _to The account to which to transfer shares
     */
    transferShares(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    /**
     * Withdraws an asset from the VaultProxy to a given account
     * @param _amount The amount of asset to withdraw
     * @param _asset The asset to withdraw
     * @param _target The account to which to withdraw the asset
     */
    withdrawAssetTo(
      _asset: PromiseOrValue<string>,
      _target: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Allows addition of already tracked assets to fail silently.
     * Adds a tracked asset to the fund
     * @param _asset The asset to add
     */
    addTrackedAsset(
      _asset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Standard implementation of ERC20's allowance(). Can be overridden.
     */
    allowance(
      _owner: PromiseOrValue<string>,
      _spender: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    /**
     * Disallows the standard ERC20 approve() function
     */
    approve(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Grants an allowance to a spender to use the fund's asset
     * @param _amount The amount of the allowance
     * @param _asset The asset for which to grant an allowance
     * @param _target The spender of the allowance
     */
    approveAssetSpender(
      _asset: PromiseOrValue<string>,
      _target: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Standard implementation of ERC20's balanceOf(). Can be overridden.
     */
    balanceOf(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    /**
     * Burns fund shares from a particular account
     * @param _amount The amount of shares to burn
     * @param _target The account for which to burn shares
     */
    burnShares(
      _target: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Makes an arbitrary call with this contract as the sender
     * @param _callData The call data for the call
     * @param _contract The contract to call
     */
    callOnContract(
      _contract: PromiseOrValue<string>,
      _callData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Checks whether an account is allowed to migrate the VaultProxy
     * @param _who The account to check
     */
    canMigrate(
      _who: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    /**
     * Standard implementation of ERC20's decimals(). Can not be overridden.
     */
    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Gets the `accessor` variable
     */
    getAccessor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Gets the `creator` variable
     */
    getCreator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Gets the `migrator` variable
     */
    getMigrator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Gets the `owner` variable
     */
    getOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Gets the `trackedAssets` variable
     */
    getTrackedAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Gets the VaultLib target for the VaultProxy
     */
    getVaultLib(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Serves as a per-proxy pseudo-constructor
     * Initializes the VaultProxy with core configuration
     * @param _accessor The address to set as the permissioned accessor of the VaultLib
     * @param _fundName The name of the fund
     * @param _owner The address to set as the fund owner
     */
    init(
      _owner: PromiseOrValue<string>,
      _accessor: PromiseOrValue<string>,
      _fundName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Check whether an address is a tracked asset of the fund
     * @param _asset The address to check
     */
    isTrackedAsset(
      _asset: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    /**
     * Mints fund shares to a particular account
     * @param _amount The amount of shares to mint
     * @param _target The account for which to burn shares
     */
    mintShares(
      _target: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Standard implementation of ERC20's name(). Can be overridden.
     */
    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * The UUID is `bytes32(keccak256('mln.proxiable.vaultlib'))`
     * Returns a unique bytes32 hash for VaultLib instances
     */
    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Removes a tracked asset from the fund
     * @param _asset The asset to remove
     */
    removeTrackedAsset(
      _asset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Sets the permissioned accessor of the VaultLib
     * @param _nextAccessor The address to set as the permissioned accessor of the VaultLib
     */
    setAccessor(
      _nextAccessor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Set to address(0) to remove the migrator.
     * Sets the account that is allowed to migrate a fund to new releases
     * @param _nextMigrator The account to set as the allowed migrator
     */
    setMigrator(
      _nextMigrator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * This function is absolutely critical. __updateCodeAddress() validates that the target is a valid Proxiable contract instance. Does not block _nextVaultLib from being the same as the current VaultLib
     * Sets the VaultLib target for the VaultProxy
     * @param _nextVaultLib The address to set as the VaultLib
     */
    setVaultLib(
      _nextVaultLib: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Defers the shares symbol value to the Dispatcher contract
     * Gets the `symbol` value of the shares token
     */
    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Standard implementation of ERC20's totalSupply(). Can be overridden.
     */
    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Disallows the standard ERC20 transfer() function
     */
    transfer(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Disallows the standard ERC20 transferFrom() function
     */
    transferFrom(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers fund shares from one account to another
     * @param _amount The amount of shares to transfer
     * @param _from The account from which to transfer shares
     * @param _to The account to which to transfer shares
     */
    transferShares(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    /**
     * Withdraws an asset from the VaultProxy to a given account
     * @param _amount The amount of asset to withdraw
     * @param _asset The asset to withdraw
     * @param _target The account to which to withdraw the asset
     */
    withdrawAssetTo(
      _asset: PromiseOrValue<string>,
      _target: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;
  };
}
